<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【二分】Codeforces Round 279 (Div. 2) F. Treeland Tour (树上最长上升子序列)</title>
      <link href="/2021/08/09/ACM/%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91Codeforces%20Round%20279%20(Div.%202)%20F.%20Treeland%20Tour%20(%E6%A0%91%E4%B8%8A%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97)/"/>
      <url>/2021/08/09/ACM/%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91Codeforces%20Round%20279%20(Div.%202)%20F.%20Treeland%20Tour%20(%E6%A0%91%E4%B8%8A%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.ml/contest/490/problem/F">题链</a></p><p>题意如题</p><p>首先得知道最长上升子序列如何在O(nlogn)内求出；</p><p>参考<a href="https://llsunlie.github.io/2021/08/09/ACM/%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91AcWing%202978.%20%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/">【二分】AcWing 2978. 最长上升子序列</a></p><p>那么对于每一个点作为根节点跑一遍最长上升子序列算法即可，复杂度$O(n^2logn)$；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">vector&lt;<span class="keyword">int</span> &gt; vc[MS];</span><br><span class="line"><span class="keyword">int</span> a[MS];</span><br><span class="line"><span class="keyword">int</span> p[MS];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="comment">// p[i] 维护子序列长度为 i的最小值 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="built_in">lower_bound</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>,a[u]) - p;</span><br><span class="line"><span class="keyword">int</span> tmp = p[pos]; <span class="comment">// 递归子节点前记录原先值 </span></span><br><span class="line">p[pos] = a[u]; <span class="comment">// 更新 </span></span><br><span class="line">ans = <span class="built_in">max</span>(ans,pos); </span><br><span class="line"><span class="comment">// 递归子节点 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v != f) <span class="built_in">dfs</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p[pos] = tmp; <span class="comment">// 还原原先值 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">vc[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i] = MAXN;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">dfs</span>(i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce;</span><br><span class="line">ce = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;,&amp;ce);</span></span><br><span class="line"><span class="keyword">while</span>(ce--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树合并】Codeforces Round 279 (Div. 2) F. Treeland Tour (树上最长上升子序列)</title>
      <link href="/2021/08/09/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6%E3%80%91Codeforces%20Round%20279%20(Div.%202)%20F.%20Treeland%20Tour%20(%E6%A0%91%E4%B8%8A%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97)/"/>
      <url>/2021/08/09/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6%E3%80%91Codeforces%20Round%20279%20(Div.%202)%20F.%20Treeland%20Tour%20(%E6%A0%91%E4%B8%8A%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.ml/contest/490/problem/F">题链</a></p><p>题意如题</p><p>权值线段树维护<br>以 $x$ 为结尾的最长上升子序列的长度<br>以 $x$ 为开头的最长下降子序列的长度<br>一开始所有的 $lis$, $lds$ 都是 $1$<br>$dfs$ 到叶子节点然后自底向上维护每个节点的权值线段树<br>考虑某一棵子树，答案由两部分组成：<br>&emsp;经过根节点 $u$ 的子序列：<br>&emsp;&emsp;$1.$ 左子树中小于 $w[u]$ 的最长上升子序列长度<br>              $+$右子树中大于 $w[u]$ 的最长下降子序列长度<br>              $+1$<br>&emsp;&emsp;$2.$ 左子树中大于 $w[u]$ 的最长下降子序列长度<br>              $+$右子树中大于 $w[u]$ 的最长上升子序列长度<br>              $+1$<br>&emsp;不经过根节点 $u$ 的子序列：<br>&emsp;&emsp;需要在子树线段树合并的时候考虑  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;int ,int &gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> w[MS];</span><br><span class="line">vector&lt;<span class="keyword">int</span> &gt; vc[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> lis,lds;</span><br><span class="line">&#125;p[MS*<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> rtpos[MS], tot;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function">Pair <span class="title">pmax</span><span class="params">(Pair t1,Pair t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123; <span class="built_in">max</span>(t1.first ,t2.first )</span><br><span class="line">   , <span class="built_in">max</span>(t1.second,t2.second) &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Pair <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;p[rt].lis,p[rt].lds&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">Pair ans = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans = <span class="built_in">pmax</span>(ans, <span class="built_in">query</span>(L,R,l,m,p[rt].l) );</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans = <span class="built_in">pmax</span>(ans, <span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,p[rt].r) );</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].lis = <span class="built_in">max</span>(p[p[rt].l].lis,p[p[rt].r].lis);</span><br><span class="line">p[rt].lds = <span class="built_in">max</span>(p[p[rt].l].lds,p[p[rt].r].lds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> vlis,<span class="keyword">int</span> vlds)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!rt) rt = ++tot;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt].lis = <span class="built_in">max</span>(p[rt].lis, vlis);</span><br><span class="line">p[rt].lds = <span class="built_in">max</span>(p[rt].lds, vlds);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) <span class="built_in">modify</span>(pos,l,m,p[rt].l,vlis,vlds);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">modify</span>(pos,m+<span class="number">1</span>,r,p[rt].r,vlis,vlds);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) x |= y;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[x].lis = <span class="built_in">max</span>(p[x].lis,p[y].lis);</span><br><span class="line">p[x].lds = <span class="built_in">max</span>(p[x].lds,p[y].lds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 答案可能来自不经过根节点的最长上升子序列 </span></span><br><span class="line">ans = <span class="built_in">max</span>(ans, <span class="built_in">max</span>(p[p[x].l].lis + p[p[y].r].lds</span><br><span class="line">  ,p[p[x].r].lds + p[p[y].l].lis) );</span><br><span class="line"><span class="comment">// 递归合并左右子树 </span></span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">merge</span>(p[x].l,p[y].l,l,m);</span><br><span class="line"><span class="built_in">merge</span>(p[x].r,p[y].r,m+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> nlis = <span class="number">0</span>, nlds = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v != f)&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v,u);</span><br><span class="line"><span class="comment">// u为某子树根节点 </span></span><br><span class="line"><span class="comment">// 这里计算经过点 u 的 lis和 lds </span></span><br><span class="line"><span class="comment">// 得到子树中权值小于 w[u]的 lis, 权值大于 w[u]的 lds </span></span><br><span class="line"><span class="keyword">int</span> tlis = <span class="built_in">query</span>(<span class="number">0</span>,w[u]<span class="number">-1</span>,<span class="number">0</span>,MAXN,rtpos[v]).first;</span><br><span class="line"><span class="keyword">int</span> tlds = <span class="built_in">query</span>(w[u]+<span class="number">1</span>,MAXN,<span class="number">0</span>,MAXN,rtpos[v]).second;</span><br><span class="line"><span class="comment">// 更新答案 </span></span><br><span class="line">ans = <span class="built_in">max</span>(ans, <span class="built_in">max</span>( tlis+nlds+<span class="number">1</span>, tlds+nlis+<span class="number">1</span> ));</span><br><span class="line"><span class="comment">// 更新点 u 为结尾的 lis,lds </span></span><br><span class="line">nlis = <span class="built_in">max</span>(nlis,tlis);</span><br><span class="line">nlds = <span class="built_in">max</span>(nlds,tlds);</span><br><span class="line"><span class="comment">// 将 v合并至 u </span></span><br><span class="line"><span class="built_in">merge</span>(rtpos[u],rtpos[v],<span class="number">0</span>,MAXN);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新 u的权值线段树 </span></span><br><span class="line"><span class="built_in">modify</span>(w[u],<span class="number">0</span>,MAXN,rtpos[u],nlis+<span class="number">1</span>,nlds+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; w[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">vc[v].<span class="built_in">push_back</span>(u); </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="keyword">int</span> ce;</span><br><span class="line">ce = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;,&amp;ce);</span></span><br><span class="line"><span class="keyword">while</span>(ce--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树状数组维护最值】AcWing 2978. 最长上升子序列</title>
      <link href="/2021/08/09/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%B4%E6%8A%A4%E6%9C%80%E5%80%BC%E3%80%91AcWing%202978.%20%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2021/08/09/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%B4%E6%8A%A4%E6%9C%80%E5%80%BC%E3%80%91AcWing%202978.%20%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>回顾DP方式求解过程：</p><p>$p[i]$：原序列</p><p>$dp[i]$：以位置 $i$ 为结尾的最长上升子序列；</p><p>$dp_i = \max_{j=1}^{i-1}dp_j+1(p_j&lt;p_i)$</p><p>也就是说只要知道 $i$ 位置前满足 $a_j&lt;a_i$ 的最大 $dp_j$ 值即可；</p><p>权值树状数组维护 $[1,r]$ 的区间最大值，对于 $i$ 位置，在权值树状数组上查询 $[1,a_i-1]$ 的最大值 $t$，这样以 $i$ 为结尾的最长上升子序列的值就是 $t+1$；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[MS], b[MS], tot;</span><br><span class="line"><span class="keyword">int</span> p[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;pos&lt;=n;pos+=<span class="built_in">lowbit</span>(pos)) p[pos] = <span class="built_in">max</span>(p[pos],val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123; <span class="comment">// 求 [1,pos] 的最大值 </span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;pos;pos-=<span class="built_in">lowbit</span>(pos)) ans = <span class="built_in">max</span>(ans,p[pos]);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i], b[i] = a[i];</span><br><span class="line"><span class="comment">// 离散化 </span></span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) <span class="keyword">if</span>(b[i] != b[i<span class="number">-1</span>]) b[++tot] = b[i];</span><br><span class="line"><span class="comment">// 遍历每一个值 </span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+tot+<span class="number">1</span>,a[i]) - b;</span><br><span class="line"><span class="keyword">int</span> cc = <span class="built_in">query</span>(pos<span class="number">-1</span>)+<span class="number">1</span>;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,cc);</span><br><span class="line"><span class="built_in">update</span>(pos,cc);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce;</span><br><span class="line">ce = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;,&amp;ce);</span></span><br><span class="line"><span class="keyword">while</span>(ce--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【二分】AcWing 2978. 最长上升子序列</title>
      <link href="/2021/08/09/ACM/%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91AcWing%202978.%20%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2021/08/09/ACM/%E3%80%90%E4%BA%8C%E5%88%86%E3%80%91AcWing%202978.%20%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h1><p>回顾DP方式求解过程：</p><p>$p[i]$：原序列</p><p>$dp[i]$：以位置 $i$ 为结尾的最长上升子序列；</p><p>$dp_i = \max_{j=1}^{i-1}dp_j+1(p_j&lt;p_i)$</p><p>这样显然是 $O(n^2)$ 的；</p><h1 id="贪心-二分"><a href="#贪心-二分" class="headerlink" title="贪心 + 二分"></a>贪心 + 二分</h1><p>维护一个数组 $p$，$p_i$ 维护子序列长度为 $i$ 的最小值 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> p[MS], tot;</span><br><span class="line"></span><br><span class="line"><span class="comment">// p[i] 维护子序列长度为 i的最小值 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span>(!tot || x &gt; p[tot]) p[++tot] = x;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="built_in">lower_bound</span>(p+<span class="number">1</span>,p+tot+<span class="number">1</span>,x) - p;</span><br><span class="line">p[pos] = x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; tot &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce;</span><br><span class="line">ce = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;,&amp;ce);</span></span><br><span class="line"><span class="keyword">while</span>(ce--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>换一种写法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> p[MS], tot;</span><br><span class="line"></span><br><span class="line"><span class="comment">// p[i] 维护子序列长度为 i的最小值 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i] = MAXN; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="built_in">lower_bound</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>,x) - p;</span><br><span class="line">p[pos] = x;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,pos);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce;</span><br><span class="line">ce = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;,&amp;ce);</span></span><br><span class="line"><span class="keyword">while</span>(ce--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树合并】洛谷 P4556 雨天的尾巴【模板】线段树合并</title>
      <link href="/2021/08/09/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6%E3%80%91%E6%B4%9B%E8%B0%B7%20P4556%20%E9%9B%A8%E5%A4%A9%E7%9A%84%E5%B0%BE%E5%B7%B4%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/"/>
      <url>/2021/08/09/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6%E3%80%91%E6%B4%9B%E8%B0%B7%20P4556%20%E9%9B%A8%E5%A4%A9%E7%9A%84%E5%B0%BE%E5%B7%B4%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<p>线段树合并；</p><p>对于每一个点开一颗权值线段树，采用树上差分的形式维护；</p><p>例如在x,y之间的路径加上一个z的救济粮，那么就在x的权值线段树z的位置+1，在y的权值线段树z的位置+1，在lca(x,y)的权值线段树z的位置-1，在fa[lca(x,y)]的权值线段树z的位置-1；</p><p>最后自底向上合并线段树，查询线段树上救济粮最大出现次数；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">vector&lt;<span class="keyword">int</span> &gt; vc[MS];</span><br><span class="line"><span class="keyword">int</span> fa[MS], dep[MS], sz[MS], zson[MS], top[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125;p[MAXN*<span class="number">70</span>];</span><br><span class="line"><span class="keyword">int</span> tot, rtpos[MS];</span><br><span class="line"><span class="keyword">int</span> ac[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">fa[u] = f;</span><br><span class="line">dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">sz[u] = <span class="number">1</span>;</span><br><span class="line">zson[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> maxnzson = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v != f)&#123;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u);</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line"><span class="keyword">if</span>(sz[v] &gt; maxnzson)&#123;</span><br><span class="line">maxnzson = sz[v];</span><br><span class="line">zson[u] = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">top[u] = tp;</span><br><span class="line"><span class="keyword">if</span>(zson[u]) <span class="built_in">dfs2</span>(zson[u],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v != fa[u] &amp;&amp; v != zson[u])&#123;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[u] != top[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ top[u] ] &lt; dep[ top[v] ]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">u = fa[ top[u] ];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dep[u]&lt;dep[v]? u:v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].val = <span class="built_in">max</span>(p[p[rt].l].val,p[p[rt].r].val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!rt) rt = ++tot;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt].val += val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) <span class="built_in">modify</span>(pos,l,m,p[rt].l,val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">modify</span>(pos,m+<span class="number">1</span>,r,p[rt].r,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) x |= y;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l == r) p[x].val += p[y].val;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">merge</span>(p[x].l,p[y].l,l,m);</span><br><span class="line"><span class="built_in">merge</span>(p[x].r,p[y].r,m+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">push_up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p[p[rt].l].val &gt;= p[p[rt].r].val) <span class="keyword">return</span> <span class="built_in">query</span>(l,m,p[rt].l);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(m+<span class="number">1</span>,r,p[rt].r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v != fa[u])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(v);</span><br><span class="line"><span class="built_in">merge</span>(rtpos[u],rtpos[v],<span class="number">1</span>,MAXN);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ac[u] = <span class="built_in">query</span>(<span class="number">0</span>,MAXN,rtpos[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">vc[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 树剖求 lca </span></span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line"><span class="built_in">modify</span>(z,<span class="number">0</span>,MAXN,rtpos[x],<span class="number">1</span>);</span><br><span class="line"><span class="built_in">modify</span>(z,<span class="number">0</span>,MAXN,rtpos[y],<span class="number">1</span>);</span><br><span class="line"><span class="built_in">modify</span>(z,<span class="number">0</span>,MAXN,rtpos[<span class="built_in">lca</span>(x,y)],<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">modify</span>(z,<span class="number">0</span>,MAXN,rtpos[fa[<span class="built_in">lca</span>(x,y)]],<span class="number">-1</span>);</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;lca(x,y): &quot; &lt;&lt; lca(x,y) &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;fa[lca(x,y)]: &quot; &lt;&lt; fa[lca(x,y)] &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce;</span><br><span class="line">ce = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;,&amp;ce);</span></span><br><span class="line"><span class="keyword">while</span>(ce--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树分裂合并】洛谷 P5494 【模板】线段树分裂</title>
      <link href="/2021/08/08/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%86%E8%A3%82%E5%90%88%E5%B9%B6%E3%80%91%E6%B4%9B%E8%B0%B7%20P5494%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%86%E8%A3%82/"/>
      <url>/2021/08/08/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%86%E8%A3%82%E5%90%88%E5%B9%B6%E3%80%91%E6%B4%9B%E8%B0%B7%20P5494%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%88%86%E8%A3%82/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5494">题链</a></p><p>线段树分裂合并模板题</p><p>学习自<a href="https://b23.tv/BV1f54y1E7e6">BiliBili</a></p><p>关于线段树空间(带修改的)大概是: 2mlogn</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 200005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">LL val;</span><br><span class="line">&#125;p[MS*<span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> tot, rtpos[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].val = p[p[rt].l].val + p[p[rt].r].val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> &amp;rt,LL num)</span></span>&#123; <span class="comment">// 单点修改 </span></span><br><span class="line"><span class="keyword">if</span>(!rt) rt = ++tot;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt].val += num;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) <span class="built_in">modify</span>(pos,l,m,p[rt].l,num);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">modify</span>(pos,m+<span class="number">1</span>,r,p[rt].r,num);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> &amp;rt)</span></span>&#123; <span class="comment">// 分裂： 将以 rt为根的树中 [L,R]区间提出来 </span></span><br><span class="line"><span class="keyword">int</span> cc = ++tot;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">p[cc] = p[rt]; <span class="comment">// 提出该节点对应区间 </span></span><br><span class="line">rt = <span class="number">0</span>; <span class="comment">// 将该节点从原树中删除 </span></span><br><span class="line"><span class="keyword">return</span> cc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) p[cc].l = <span class="built_in">split</span>(L,R,l,m,p[rt].l);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) p[cc].r = <span class="built_in">split</span>(L,R,m+<span class="number">1</span>,r,p[rt].r);</span><br><span class="line"><span class="built_in">push_up</span>(cc); <span class="comment">// 更新新树 </span></span><br><span class="line"><span class="built_in">push_up</span>(rt); <span class="comment">// 更新原树 </span></span><br><span class="line"><span class="keyword">return</span> cc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y)&#123; <span class="comment">// 如果两棵树该节点任意为空 </span></span><br><span class="line">x |= y; <span class="comment">// x节点直接指向 y, 直接利用 y树的空间, 所以之后不能对 y重复操作, 相当于删除 y树 </span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line">p[x].val += p[y].val; </span><br><span class="line"><span class="built_in">merge</span>(p[x].l,p[y].l); <span class="comment">// 递归合并左右子树 </span></span><br><span class="line"><span class="built_in">merge</span>(p[x].r,p[y].r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123; <span class="comment">// 与普通线段树相同 </span></span><br><span class="line"><span class="keyword">if</span>(!rt) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans += <span class="built_in">query</span>(L,R,l,m,p[rt].l);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans += <span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,p[rt].r);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_kth</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL kth)</span></span>&#123; <span class="comment">// 类似主席树 </span></span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p[p[rt].l].val &gt;= kth) <span class="keyword">return</span> <span class="built_in">get_kth</span>(l,m,p[rt].l,kth);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">get_kth</span>(m+<span class="number">1</span>,r,p[rt].r,kth-p[p[rt].l].val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">modify</span>(i,<span class="number">1</span>,n,rtpos[<span class="number">1</span>],x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> last = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> op,x,y,z;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">0</span>)&#123;</span><br><span class="line">cin &gt;&gt; z;</span><br><span class="line">rtpos[++last] = <span class="built_in">split</span>(y,z,<span class="number">1</span>,n,rtpos[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">merge</span>(rtpos[x],rtpos[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">cin &gt;&gt; z;</span><br><span class="line"><span class="built_in">modify</span>(z,<span class="number">1</span>,n,rtpos[x],y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>)&#123;</span><br><span class="line">cin &gt;&gt; z;</span><br><span class="line">cout &lt;&lt; <span class="built_in">query</span>(y,z,<span class="number">1</span>,n,rtpos[x]) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[rtpos[x]].val &lt; y) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="built_in">get_kth</span>(<span class="number">1</span>,n,rtpos[x],y) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce;</span><br><span class="line">ce = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;,&amp;ce);</span></span><br><span class="line"><span class="keyword">while</span>(ce--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【主席树维护区间修改】HDU 4348 To the moon</title>
      <link href="/2021/08/08/ACM/%E3%80%90%E4%B8%BB%E5%B8%AD%E6%A0%91%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9%E3%80%91HDU%204348%20To%20the%20moon/"/>
      <url>/2021/08/08/ACM/%E3%80%90%E4%B8%BB%E5%B8%AD%E6%A0%91%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9%E3%80%91HDU%204348%20To%20the%20moon/</url>
      
        <content type="html"><![CDATA[<p><a href="https://acm.hdu.edu.cn/showproblem.php?pid=4348">题链</a></p><p>普通主席树一般是单点修改，同时增加logn个节点，要进行区间修改为了节省空间，于是在主席树上打永久标记，一次区间修改得打log(r-l+1)个标记，求和的时候从上至下带着标记求和；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100005</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">LL sum,tag;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> rtpos[MS], tot;</span><br><span class="line"><span class="keyword">int</span> ver;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">p[rt].sum = p[p[rt].l].sum + p[p[rt].r].sum + (LL)(r-l+<span class="number">1</span>)*p[rt].tag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rt = ++tot;</span><br><span class="line">p[rt] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">cin &gt;&gt; p[rt].sum;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">p[rt].l = <span class="built_in">build</span>(l,m);</span><br><span class="line">p[rt].r = <span class="built_in">build</span>(m+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">push_up</span>(rt,l,r);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> lart,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rt = ++tot;</span><br><span class="line">p[rt] = p[lart];</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">p[rt].sum += (LL)(r-l+<span class="number">1</span>)*val;</span><br><span class="line">p[rt].tag += val;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) p[rt].l = <span class="built_in">add</span>(p[lart].l,L,R,l,m,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) p[rt].r = <span class="built_in">add</span>(p[lart].r,L,R,m+<span class="number">1</span>,r,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt,l,r);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL tagsum)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"> <span class="keyword">return</span> p[rt].sum + (LL)(r-l+<span class="number">1</span>)*tagsum;</span><br><span class="line">&#125;</span><br><span class="line">tagsum += p[rt].tag;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans += <span class="built_in">query</span>(p[rt].l,L,R,l,m,tagsum);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans += <span class="built_in">query</span>(p[rt].r,L,R,m+<span class="number">1</span>,r,tagsum);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//cin &gt;&gt; n &gt;&gt; m;</span></span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line">rtpos[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>,n);</span><br><span class="line">ver = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">LL x;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">cout &lt;&lt; <span class="built_in">query</span>(rtpos[ver],l,r,<span class="number">1</span>,n,<span class="number">0ll</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">rtpos[ver+<span class="number">1</span>] = <span class="built_in">add</span>(rtpos[ver],l,r,<span class="number">1</span>,n,x);</span><br><span class="line">ver++;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&#x27;H&#x27;</span>)&#123;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">cout &lt;&lt; <span class="built_in">query</span>(rtpos[x],l,r,<span class="number">1</span>,n,<span class="number">0ll</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">ver = x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce;</span><br><span class="line">ce = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line"><span class="comment">//scanf(&quot;%d&quot;,&amp;ce);</span></span><br><span class="line"><span class="comment">//while(ce--)&#123;</span></span><br><span class="line"><span class="comment">//solve();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &gt;&gt; m)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树状数组维护三阶前缀和】洛谷 P4062 Yazid的新生舞会</title>
      <link href="/2021/08/05/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%B4%E6%8A%A4%E4%B8%89%E9%98%B6%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%91%E6%B4%9B%E8%B0%B7%20P4062%20Yazid%E7%9A%84%E6%96%B0%E7%94%9F%E8%88%9E%E4%BC%9A/"/>
      <url>/2021/08/05/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%B4%E6%8A%A4%E4%B8%89%E9%98%B6%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%91%E6%B4%9B%E8%B0%B7%20P4062%20Yazid%E7%9A%84%E6%96%B0%E7%94%9F%E8%88%9E%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h1><p>  <a href="https://www.luogu.com.cn/problem/P3372" target="_blank">题链</a></p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>  区间众数的个数 $&gt;$ 区间长度一半 称这个区间有主元素，主元素就是这个众数；</p><p>  题意：求数组中有多少个区间有主元素;</p><p>  考虑一个子问题：每一种数作为主元素的贡献；</p><p>  例如给定数组 $p = [3,2,1,3,3,2]$，并考虑 $3$ 作为主元素的贡献；</p><p>  我们可以将是数字 $3$ 的记为 $1$ ，不是的记为 $-1$；</p><table><thead><tr><th align="center"></th><th align="center">$1$</th><th align="center">$2$</th><th align="center">$3$</th><th align="center">$4$</th><th align="center">$5$</th><th align="center">$6$</th></tr></thead><tbody><tr><td align="center">$p$</td><td align="center">$3$</td><td align="center">$2$</td><td align="center">$1$</td><td align="center">$3$</td><td align="center">$3$</td><td align="center">$2$</td></tr><tr><td align="center">$w$</td><td align="center">$1$</td><td align="center">$-1$</td><td align="center">$-1$</td><td align="center">$1$</td><td align="center">$1$</td><td align="center">$-1$</td></tr></tbody></table><p>  于是子问题变成求 $w$ 中有多少个区间和大于 $0$，例如区间 $[3,5]$ 的和为 $1$ ，所以这个区间可行，而区间 $[2,5]$ 的和为 $0$，所以这个区间不可行；</p><p>  我们对 $w$ 求一个前缀和，记为 $d$，如果 $d_r - d_{l-1} &gt; 0$，也就是对于 $d_r$ 查找 $r$ 之前有多少个比 $d_r$ 小的数字，那么区间 $[l,r]$ 满足要求；</p><table><thead><tr><th align="center"></th><th align="center">$0$</th><th align="center">$1$</th><th align="center">$2$</th><th align="center">$3$</th><th align="center">$4$</th><th align="center">$5$</th><th align="center">$6$</th></tr></thead><tbody><tr><td align="center">$p$</td><td align="center">无</td><td align="center">$3$</td><td align="center">$2$</td><td align="center">$1$</td><td align="center">$3$</td><td align="center">$3$</td><td align="center">$2$</td></tr><tr><td align="center">$w$</td><td align="center">$0$</td><td align="center">$1$</td><td align="center">$-1$</td><td align="center">$-1$</td><td align="center">$1$</td><td align="center">$1$</td><td align="center">$-1$</td></tr><tr><td align="center">$d$</td><td align="center">$0$</td><td align="center">$1$</td><td align="center">$0$</td><td align="center">$-1$</td><td align="center">$0$</td><td align="center">$1$</td><td align="center">$0$</td></tr></tbody></table><p>  例如对于 $r = 5$ ，$r$ 前比 $d_r$ 小的数字有 $4$ 个，分别是 $l-1 = [4,3,2,0]$ 的时候，也就是区间 $[5,5],[4,5],[3,5],[1,5]$ 满足要求；  </p><p>  于是可以对每一种数字，求出 $w$，求出 $d$，枚举 $d_i$，查找 $i$ 前有多少个比 $d_i$ 小的数字，用树状数组维护权值，显然这样的复杂度是 $O(n^2logn)$的，不可取；  </p><p>  我们记录下每一种数字在数组中的位置，例如数字 $3$，它的位置有 $pos_3 = [1,4,5]$，如果能在 $O(pos_i.size())$ 的时空复杂度下(可以加个$log$)求出这种数字的贡献，那么枚举每一种数字算贡献整体就是 $O(nlogn)$ 的了；  </p><p>  $d$ 是连续的，$pos_3 = [1,4,5]$ 可以将 $d$ 分为 $4$ 个部分，分别是 $[0,0],[1,3],[4,4],[5,6]$ ，这四个部分都是等差数列，对于$[1,3]$区间内的每个值，在该值前且比该值小的数字只能来自于$[1,3]$这部分之前，不能来自于 $[1,3]$ 这部分本身；  </p><p>  设法将每一部分同时处理，如有一部分 $P_i$，$P_i$这部分的答案来自于 $P_i$ 之前的部分，对 $P_i$ 这部分是一个等差数列 $[y,y-1,y-2, \dots,x]$，那么 $P_i$ 部分插入到树状数组中就是区间 $[x,y]$ 加 $1$；  </p><p>  设 $B_i$ 为权值的前缀和，$B_i = \sum_{j=1}^{i}C_j$，那么对于 $P_i$  部分内的每一个值 $d_i$，$d_i$ 的贡献就等于 $B_{d_i-1}$，那么对于这一整个部分 $P_i$，值为 $[x,y]$，整体贡献就是 $\sum_{i=x-1}^{y-1}B_i$，设 $A_i$ 为权值的前缀和的前缀和，也就是 $B_i$ 的前缀和 $\sum_{j=1}^{i}B_j$，那么整体贡献就是 $A_{y-1} - A_{x-2}$；</p><p>  于是将问题转变为了，区间 $[x,y]$ 加 $1$，和求二阶前缀和；</p><p>  区间 $[x,y]$加一个数，求一阶前缀和就是区间加数，区间求和的洛谷线段树模板题1，当然可以用树状数组实现；</p><p>  和模板题同样将权值 $C_i$差分，差分后的数组位 $D_i$，于是问题转变为单点修改，求三阶前缀和；</p><p>  $A_x = \sum_{i=1}^{x} \sum_{j=1}^{i} \sum_{k=1}^{j} D_k$<br>  $A_x$<br>  $= B_1 + B_2 + B_3 + \dots + B_x$<br>  $= C_1 + (C_1+C_2) + (C_1+C_2+C_3) + \dots + (C_1+C_2+C_3+\dots+C_x)$<br>  $= xC_1+(x-1)C_2+(x-2)C_3+\dots+(x-n+1)C_n+\dots+C_x$<br>  $= xD_1+(x-1)(D_1+D_2)+(x-2)(D_1+D_2+D_3)+\dots+(x-n+1)(D_1+D_2+\dots+D_n)+\dots+(D_1+D_2+D_3+\dots+D_n)$<br>  $= \frac{(x+1)x}{2}D_1+\frac{x(x-1)}{2}D_2+\frac{(x-1)(x-2)}{2}D_3+\dots+\frac{(x-n+2)(x-n+1)}{2}D_n+\dots+D_x$<br>  $= \sum_{n=1}^{x}\frac{(x-n+2)(x-n+1)}{2}D_n$<br>  $= \sum_{n=1}^{x}n^2D_n + \frac{-2x+3}{2}\sum_{n=1}^{x}nD_n + \frac{x^2+3x+2}{2}\sum_{n=1}^{x}D_n$  </p><p>  用三个树状数组维护 $i^2D_i$，$iD_i$，$D_i$即可；  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 2000009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL a[MS];</span><br><span class="line">vector&lt;LL &gt; vc[MS];</span><br><span class="line">LL b[MS], tot;</span><br><span class="line">LL p[<span class="number">4</span>][MS];</span><br><span class="line">LL ans;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lowbit</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL pos, LL val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(LL x=pos;pos&lt;MS;pos+=<span class="built_in">lowbit</span>(pos))&#123;</span><br><span class="line">        p[<span class="number">1</span>][pos] += x*x*val;</span><br><span class="line">        p[<span class="number">2</span>][pos] += x*val;</span><br><span class="line">        p[<span class="number">3</span>][pos] += val;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(LL pos)</span></span>&#123;</span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL x=pos;pos;pos-=<span class="built_in">lowbit</span>(pos))&#123;</span><br><span class="line">        ans += p[<span class="number">1</span>][pos];</span><br><span class="line">        ans += (<span class="number">-2</span>*x<span class="number">-3</span>)*p[<span class="number">2</span>][pos];</span><br><span class="line">        ans += (x*x+<span class="number">3</span>*x+<span class="number">2</span>)*p[<span class="number">3</span>][pos];</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> ans/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=tot;i++) vc[b[i]].<span class="built_in">clear</span>();</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span>(vc[ a[i] ].<span class="built_in">empty</span>())&#123;</span><br><span class="line">            vc[ a[i] ].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">            b[++tot] = a[i];</span><br><span class="line">        &#125; </span><br><span class="line">        vc[ a[i] ].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    LL dis = n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">        LL t = b[i]; vc[t].<span class="built_in">push_back</span>(n+<span class="number">1</span>);</span><br><span class="line">        LL l, r = <span class="number">-1</span>, len = vc[t].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(LL j=<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">            l = r+<span class="number">1</span>;</span><br><span class="line">            r = l-(vc[t][j]-vc[t][j<span class="number">-1</span>]<span class="number">-1</span>);</span><br><span class="line">            LL L = r+dis, R = l+dis;</span><br><span class="line">            ans += <span class="built_in">query</span>(R<span class="number">-1</span>) - (L<span class="number">-2</span>&gt;<span class="number">0</span>? <span class="built_in">query</span>(L<span class="number">-2</span>):<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">add</span>(L, <span class="number">1</span>); <span class="built_in">add</span>(R+<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        r = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(LL j=<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">            l = r+<span class="number">1</span>;</span><br><span class="line">            r = l-(vc[t][j]-vc[t][j<span class="number">-1</span>]<span class="number">-1</span>);</span><br><span class="line">            LL L = r+dis, R = l+dis;</span><br><span class="line">            <span class="built_in">add</span>(L, <span class="number">-1</span>); <span class="built_in">add</span>(R+<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    LL ce;</span><br><span class="line">    ce = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line">    <span class="keyword">while</span>(ce--)&#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树状数组维护区间和】洛谷 P3372 【模板】线段树 1 【树状数组解法】</title>
      <link href="/2021/08/04/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E5%92%8C%E3%80%91%E6%B4%9B%E8%B0%B7%20P3372%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%201%20%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E8%A7%A3%E6%B3%95%E3%80%91/"/>
      <url>/2021/08/04/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E5%92%8C%E3%80%91%E6%B4%9B%E8%B0%B7%20P3372%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%201%20%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E8%A7%A3%E6%B3%95%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3372" target="_blank">题链</a></p><p>这里用树状数组写法;</p><p>考虑求[1,x]的区间和 $sum_x$，于是将原数组差分后，相当于求一个二阶前缀和；</p><p>设原数组为 $a_i$, 差分后的数组为 $b_i = a_i - a_{i-1}$；</p><p>于是 $a_i = \sum_{j=1}^{i}{b_j}$；</p><p>那么[1,x]的区间和为 $sum_x = \sum_{i=1}^{x}a_i = \sum_{i=1}^{x} \sum_{j=1}^{i}b_j$</p><p>$sum_x = a_1 + a_2 + \cdots + a_x$</p><p>&emsp;&emsp;&emsp;&ensp;$= (b_1) + (b_1+b_2) + (b_1+b_2+b_3) + \cdots + (b_1+b_2+b_3+\cdots+b_x)$</p><p>&emsp;&emsp;&emsp;&ensp;$= xb_1 + (x-1)b_2 + (x-2)b_3 + \cdots + (x-n+1)b_n + \cdots + b_x $</p><p>&emsp;&emsp;&emsp;&ensp;$= \sum_{n=1}^{x}{(x-n+1)b_n} $</p><p>&emsp;&emsp;&emsp;&ensp;$= (x+1)\sum_{n=1}^{x}b_n - \sum_{n=1}^{x}b_n \cdot n $</p><p>于是分别在树状数组上维护 $\sum_{n=1}^{x}b_n $ 与 $ \sum_{n=1}^{x}b_n \cdot n $</p><p>$ ans = sum_r - sum_{l-1} $</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">LL a[MS];</span><br><span class="line">LL b[MS];</span><br><span class="line">LL p[<span class="number">2</span>][MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> pos, LL val)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;pos&lt;=n;pos+=<span class="built_in">lowbit</span>(pos)) p[rt][pos] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    LL cc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL t=pos+<span class="number">1</span>;pos;pos-=<span class="built_in">lowbit</span>(pos)) cc += t*p[<span class="number">0</span>][pos]-p[<span class="number">1</span>][pos];</span><br><span class="line">    <span class="keyword">return</span> cc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        b[i] = a[i] - a[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in">add</span>(<span class="number">0</span>, i, b[i]);</span><br><span class="line">        <span class="built_in">add</span>(<span class="number">1</span>, i, b[i]*i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        LL op,l,r;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">            LL x;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">0</span>, l, x);</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">0</span>, r+<span class="number">1</span>, -x);</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">1</span>, l, x*l);</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">1</span>, r+<span class="number">1</span>, -x*(r+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">            LL ans = <span class="built_in">query</span>(r) - <span class="built_in">query</span>(l<span class="number">-1</span>);</span><br><span class="line">            cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【整数三分】Codeforces Round 643 (Div. 2) E. Restorer Distance</title>
      <link href="/2021/08/01/ACM/%E3%80%90%E6%95%B4%E6%95%B0%E4%B8%89%E5%88%86%E3%80%91Codeforces%20Round%20643%20(Div.%202)%20E.%20Restorer%20Distance/"/>
      <url>/2021/08/01/ACM/%E3%80%90%E6%95%B4%E6%95%B0%E4%B8%89%E5%88%86%E3%80%91Codeforces%20Round%20643%20(Div.%202)%20E.%20Restorer%20Distance/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1355/problem/E" target="_blank">题链</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL a,b,c;</span><br><span class="line">LL p[MS], qz[MS];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">cal</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="built_in">upper_bound</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>,x) - p - <span class="number">1</span>;</span><br><span class="line">LL cnt1 = (pos*x) - qz[pos];</span><br><span class="line">LL cnt2 = qz[n]-qz[pos] - (n-pos)*x;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a+b &gt; c)&#123;</span><br><span class="line">LL cc = <span class="built_in">min</span>(cnt1, cnt2);</span><br><span class="line">ans += cc*c;</span><br><span class="line">cnt1 -= cc;</span><br><span class="line">cnt2 -= cc;</span><br><span class="line"><span class="keyword">if</span>(cnt1) ans += cnt1*a;</span><br><span class="line"><span class="keyword">if</span>(cnt2) ans += cnt2*b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans += cnt1*a + cnt2*b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">qz[i] = qz[i<span class="number">-1</span>] + p[i];</span><br><span class="line">&#125;</span><br><span class="line">LL l = p[<span class="number">1</span>]<span class="number">-1</span>, r = p[n]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">LL m1 = l+(r-l)/<span class="number">3</span>;</span><br><span class="line">LL m2 = r-(r-l)/<span class="number">3</span>;</span><br><span class="line">LL c1 = <span class="built_in">cal</span>(m1);</span><br><span class="line">LL c2 = <span class="built_in">cal</span>(m2);</span><br><span class="line"><span class="keyword">if</span>(c1 &lt;= c2) r = m2<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l = m1+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="built_in">min</span>( <span class="built_in">cal</span>(l),<span class="built_in">cal</span>(r) ) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce;</span><br><span class="line"><span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line">ce = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(ce--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 三分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Codeforces】Educational Codeforces Round 112 (Rated for Div. 2)</title>
      <link href="/2021/08/01/ACM/%E3%80%90Codeforces%E3%80%91Educational%20Codeforces%20Round%20112%20(Rated%20for%20Div.%202)/"/>
      <url>/2021/08/01/ACM/%E3%80%90Codeforces%E3%80%91Educational%20Codeforces%20Round%20112%20(Rated%20for%20Div.%202)/</url>
      
        <content type="html"><![CDATA[<h1 id="E-Boring-Segments"><a href="#E-Boring-Segments" class="headerlink" title="E Boring Segments"></a>E Boring Segments</h1><p>双指针加线段树；</p><p>线段树维护区间覆盖问题，具体来说每个节点维护区间被完整覆盖的最小次数；</p><p>先将线段按照权值从小到大排序，seg[i]指下标i所对应的线段；</p><p>对于双指针l，r来说，r向右移的同时将seg[r]对应的线段覆盖，直到覆盖掉整个区间[1,m]，此时再右移l直到区间未被覆盖，更新答案ans；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,w;</span><br><span class="line">&#125;a[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> la;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(seg t1, seg t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t1.w &lt; t2.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].cnt = <span class="built_in">min</span>(p[ls].cnt, p[rs].cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[rt].la)&#123;</span><br><span class="line">p[ls].cnt += p[rt].la;</span><br><span class="line">p[rs].cnt += p[rt].la;</span><br><span class="line">p[ls].la += p[rt].la;</span><br><span class="line">p[rs].la += p[rt].la;</span><br><span class="line">p[rt].la = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">p[rt].cnt += val;</span><br><span class="line">p[rt].la += val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m; m--;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r,w;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r &gt;&gt; w; r--;</span><br><span class="line">a[i] = &#123;l,r,w&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = MAXN;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">1</span>;r&lt;=n;)&#123;</span><br><span class="line"><span class="keyword">while</span>(r&lt;=n &amp;&amp; p[<span class="number">1</span>].cnt&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">update</span>(a[r].l,a[r].r,<span class="number">1</span>,m,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r &amp;&amp; p[<span class="number">1</span>].cnt&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">update</span>(a[l].l,a[l].r,<span class="number">1</span>,m,<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">l++;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) ans = <span class="built_in">min</span>( ans, (a[r<span class="number">-1</span>].w-a[l<span class="number">-1</span>].w) );</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce;</span><br><span class="line"><span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line">ce = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(ce--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算几何】三点求夹角</title>
      <link href="/2021/08/01/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E4%B8%89%E7%82%B9%E6%B1%82%E5%A4%B9%E8%A7%92/"/>
      <url>/2021/08/01/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E4%B8%89%E7%82%B9%E6%B1%82%E5%A4%B9%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M_PI acos(-1.0)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">get angle ACB, point C is the center point</span></span><br><span class="line"><span class="comment">A(x1,y1)</span></span><br><span class="line"><span class="comment">B(x2,y2)</span></span><br><span class="line"><span class="comment">C(x3,y3)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_angle</span><span class="params">(<span class="keyword">double</span> x1, <span class="keyword">double</span> y1, <span class="keyword">double</span> x2, <span class="keyword">double</span> y2, <span class="keyword">double</span> x3, <span class="keyword">double</span> y3)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> theta = <span class="built_in">atan2</span>(x1 - x3, y1 - y3) - <span class="built_in">atan2</span>(x2 - x3, y2 - y3);</span><br><span class="line"><span class="keyword">if</span> (theta &gt; M_PI)</span><br><span class="line">theta -= <span class="number">2</span> * M_PI;</span><br><span class="line"><span class="keyword">if</span> (theta &lt; -M_PI)</span><br><span class="line">theta += <span class="number">2</span> * M_PI;</span><br><span class="line"></span><br><span class="line">theta = <span class="built_in">abs</span>(theta * <span class="number">180.0</span> / M_PI);</span><br><span class="line"><span class="keyword">return</span> theta;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> x1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> y1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> x2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> y2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> x3 = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">double</span> y3 = <span class="number">-2</span>;</span><br><span class="line"><span class="keyword">double</span> angle1 = <span class="built_in">get_angle</span>(x3, y3, x1, y1, x2, y2);</span><br><span class="line"><span class="keyword">double</span> angle2 = <span class="built_in">get_angle</span>(x1, y1, x2, y2, x3, y3);</span><br><span class="line"><span class="keyword">double</span> angle3 = <span class="built_in">get_angle</span>(x2, y2, x3, y3, x1, y1);</span><br><span class="line">cout &lt;&lt; angle2 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; angle3 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; angle1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【后缀数组】模板 from Kausal</title>
      <link href="/2021/07/30/ACM/%E3%80%90%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E3%80%91%E6%A8%A1%E6%9D%BF%20from%20Kausal/"/>
      <url>/2021/07/30/ACM/%E3%80%90%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E3%80%91%E6%A8%A1%E6%9D%BF%20from%20Kausal/</url>
      
        <content type="html"><![CDATA[<p><a href="https://b23.tv/BV1S54y1G7P8" target="_blank">史上最易懂的后缀自动机讲解！独创理解思路还有例题讲解~</a></p><h1 id="O-nlogn"><a href="#O-nlogn" class="headerlink" title="O(nlogn)"></a>O(nlogn)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> wa[N],wb[N],wv[N],wss[N],rak[N],height[N],cal[N],n,sa[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> r[a]==r[b]&amp;&amp;r[a+l]==r[b+l];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> M)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i,j,p,*x=wa,*y=wb,*t;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[x[i]=r[i]]++;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">     <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[x[i]]]=i;</span><br><span class="line">     <span class="keyword">for</span>(j=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;j*=<span class="number">2</span>,M=p) &#123;</span><br><span class="line">        <span class="keyword">for</span>(p=<span class="number">0</span>,i=n-j;i&lt;n;i++) y[p++]=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span>(sa[i]&gt;=j) y[p++]=sa[i]-j;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wv[i]=x[y[i]];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) wss[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) wss[wv[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;M;i++) wss[i]+=wss[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) sa[--wss[wv[i]]]=y[i];</span><br><span class="line">        <span class="keyword">for</span>(t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        x[sa[i]]=<span class="built_in">cmp</span>(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> i,j,k=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) rak[sa[i]]=i;</span><br><span class="line">     <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;height[rak[i++]]=k)</span><br><span class="line">     <span class="keyword">for</span>(k?k--:<span class="number">0</span>,j=sa[rak[i]<span class="number">-1</span>];r[i+k]==r[j+k];k++);</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--)rak[i]=rak[i<span class="number">-1</span>],sa[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cas=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>))&#123;</span><br><span class="line">        n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            cal[i]=s[i];</span><br><span class="line">        cal[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">da</span>(cal+<span class="number">1</span>,sa,n+<span class="number">1</span>,<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">calheight</span>(cal+<span class="number">1</span>,sa,n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,height[i]);</span><br><span class="line">        &#125;<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,sa[i]);</span><br><span class="line">        &#125;<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,rak[i]);</span><br><span class="line">        &#125;<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F(x) ((x) / 3 + ((x) % 3 == 1 ? 0 : tb))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> G(x) ((x) &lt; tb ? (x) * 3 + 1 : ((x) - tb) * 3 + 2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3</span>*(<span class="number">1e5</span>+<span class="number">5</span>);</span><br><span class="line"><span class="keyword">int</span> wa[N], wb[N], ws[N], wv[N], sa[N];</span><br><span class="line"><span class="keyword">int</span> rak[N], height[N], cal[N],n;</span><br><span class="line"><span class="keyword">char</span> s[N],ans[N],s1[N];</span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c0</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r[a] == r[b] &amp;&amp; r[a + <span class="number">1</span>] == r[b + <span class="number">1</span>] &amp;&amp; r[a + <span class="number">2</span>] == r[b + <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">c12</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> *r, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> r[a] &lt; r[b] || r[a] == r[b] &amp;&amp; <span class="built_in">c12</span>(<span class="number">1</span>, r, a + <span class="number">1</span>, b + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> r[a] &lt; r[b] || r[a] == r[b] &amp;&amp; wv[a + <span class="number">1</span>] &lt; wv[b + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rsort</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) wv[i] = r[a[i]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) ws[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) ws[wv[i]]++;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) ws[i] += ws[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) b[--ws[wv[i]]] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dc3</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> *sa, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, *rn = r + n, *san = sa + n, ta = <span class="number">0</span>, tb = (n + <span class="number">1</span>) / <span class="number">3</span>, tbc = <span class="number">0</span>, p;</span><br><span class="line">    r[n] = r[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i % <span class="number">3</span> != <span class="number">0</span>) wa[tbc++] = i;</span><br><span class="line">    <span class="built_in">Rsort</span>(r + <span class="number">2</span>, wa, wb, tbc, m);</span><br><span class="line">    <span class="built_in">Rsort</span>(r + <span class="number">1</span>, wb, wa, tbc, m);</span><br><span class="line">    <span class="built_in">Rsort</span>(r, wa, wb, tbc, m);</span><br><span class="line">    <span class="keyword">for</span> (p = <span class="number">1</span>, rn[<span class="built_in">F</span>(wb[<span class="number">0</span>])] = <span class="number">0</span>, i = <span class="number">1</span>; i &lt; tbc; i++)</span><br><span class="line">        rn[<span class="built_in">F</span>(wb[i])] = <span class="built_in">c0</span>(r, wb[i - <span class="number">1</span>], wb[i]) ? p - <span class="number">1</span> : p++;</span><br><span class="line">    <span class="keyword">if</span> (p &lt; tbc) <span class="built_in">dc3</span>(rn, san, tbc, p);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tbc; i++) san[rn[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tbc; i++) <span class="keyword">if</span> (san[i] &lt; tb) wb[ta++] = san[i] * <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">3</span> == <span class="number">1</span>) wb[ta++] = n - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Rsort</span>(r, wb, wa, ta, m);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; tbc; i++) wv[wb[i] = <span class="built_in">G</span>(san[i])] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>, p = <span class="number">0</span>; i &lt; ta &amp;&amp; j &lt; tbc; p++)</span><br><span class="line">        sa[p] = <span class="built_in">c12</span>(wb[j] % <span class="number">3</span>, r, wa[i], wb[j]) ? wa[i++] : wb[j++];</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; ta; p++) sa[p] = wa[i++];</span><br><span class="line">    <span class="keyword">for</span> (; j &lt; tbc; p++) sa[p] = wb[j++];</span><br><span class="line">    <span class="comment">//for(int i=n;i;i--) rak[i]=rak[i-1];</span></span><br><span class="line">    <span class="comment">//for(int i=n;i;i--) sa[i]++;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *r, <span class="keyword">int</span> *sa, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) rak[sa[i]] = i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; height[rak[i++]] = k)</span><br><span class="line">        <span class="keyword">for</span> (k ? k-- : <span class="number">0</span>, j = sa[rak[i] - <span class="number">1</span>]; r[i + k] == r[j + k]; k++);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) rak[i]=rak[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i;i--) sa[i]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s+<span class="number">1</span>)&amp;&amp;s[<span class="number">1</span>] != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        n = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            cal[i] = s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">        cal[n+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dc3</span>(cal+<span class="number">1</span>, sa, n + <span class="number">1</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="built_in">calheight</span>(cal+<span class="number">1</span>, sa, n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,height[i]);</span><br><span class="line">        &#125;<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 后缀数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【FFT】洛谷 P4173 残缺的字符串</title>
      <link href="/2021/07/28/ACM/%E3%80%90FFT%E3%80%91%E6%B4%9B%E8%B0%B7%20P4173%20%E6%AE%8B%E7%BC%BA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2021/07/28/ACM/%E3%80%90FFT%E3%80%91%E6%B4%9B%E8%B0%B7%20P4173%20%E6%AE%8B%E7%BC%BA%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4173" target="_blank">题链</a></p><p><a href="https://www.luogu.com.cn/blog/Ebola-Emperor/solution-p4173" target="_blank">通俗易懂</a></p><p>这份代码O2优化才能过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 300009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 洛谷 P3803 【模板】多项式乘法（FFT）</span></span><br><span class="line"><span class="comment">// MS = 1e6 </span></span><br><span class="line"><span class="comment">// time: max( 800ms ) </span></span><br><span class="line"><span class="comment">// ========================================================================================</span></span><br><span class="line"><span class="keyword">typedef</span> complex&lt;<span class="keyword">double</span>&gt; comp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = (<span class="number">1</span>&lt;&lt;<span class="number">20</span>)+<span class="number">10</span>; <span class="comment">// 长度为原长度向上的2^n, 再乘 2  </span></span><br><span class="line"><span class="keyword">int</span> lim, r[N];</span><br><span class="line">comp a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line"><span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span> b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果n,m长度不变, 且多次求, 跑一遍 get_lim_r 就行 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_lim_r</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(lim = <span class="number">1</span>; lim &lt;= n + m; lim &lt;&lt;= <span class="number">1</span>) ++ l;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i ++)</span><br><span class="line">r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (l - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(comp * a, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i ++)</span><br><span class="line"><span class="keyword">if</span>(i &lt; r[i]) <span class="built_in">swap</span>(a[i], a[r[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lim; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="function">comp <span class="title">x</span><span class="params">(cos(PI / i), type * sin(PI / i))</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lim; j += (i &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="function">comp <span class="title">y</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k ++, y *= x) &#123;</span><br><span class="line">comp p = a[j + k], q = y * a[j + k + i];</span><br><span class="line">a[j + k] = p + q; a[j + k + i] = p - q;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多项式 c1 [0,n]; 多项式 c2 [0,m]; 返回结果 c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">double</span> *c1, <span class="keyword">int</span> n, <span class="keyword">double</span> *c2, <span class="keyword">int</span> m, <span class="keyword">double</span> *c)</span></span>&#123; </span><br><span class="line"><span class="comment">// 如果n,m长度不变, 且多次求, 跑一遍 get_lim_r 就行 </span></span><br><span class="line"><span class="comment">//get_lim_r(n, m); </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) a[i] = c1[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i ++) b[i] = c2[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">fft</span>(a, <span class="number">1</span>), <span class="built_in">fft</span>(b, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lim; i ++) a[i] *= b[i];</span><br><span class="line"><span class="built_in">fft</span>(a, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; i ++) c[i] = (LL)(<span class="number">0.5</span> + a[i].<span class="built_in">real</span>() / lim);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ========================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// P(x) = ∑S(i)^3*B(j) + ∑S(i)*B(j)^3 - 2*∑S(i)^2*B(j)^2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> s1[MS], s2[MS];</span><br><span class="line"><span class="keyword">double</span> p1[MS], p2[MS], p3[MS];</span><br><span class="line"><span class="keyword">double</span> A[MS], B[MS], S[MS]; </span><br><span class="line"><span class="keyword">double</span> f[<span class="number">3</span>][MS&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> ac[MS], tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s1); <span class="built_in">getchar</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s2); <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) p1[i] = s1[i]==<span class="string">&#x27;*&#x27;</span>? <span class="number">0</span>:s1[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) p2[i] = s2[i]==<span class="string">&#x27;*&#x27;</span>? <span class="number">0</span>:s2[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) p3[i] = p1[n-i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">get_lim_r</span>(n<span class="number">-1</span>, m<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) S[i] = p3[i]*p3[i]*p3[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) B[i] = p2[i];</span><br><span class="line"><span class="built_in">clear</span>(); <span class="built_in">get</span>(S, n<span class="number">-1</span>, B, m<span class="number">-1</span>, f[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) S[i] = p3[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) B[i] = p2[i]*p2[i]*p2[i];</span><br><span class="line"><span class="built_in">clear</span>(); <span class="built_in">get</span>(S, n<span class="number">-1</span>, B, m<span class="number">-1</span>, f[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) S[i] = p3[i]*p3[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) B[i] = p2[i]*p2[i];</span><br><span class="line"><span class="built_in">clear</span>(); <span class="built_in">get</span>(S, n<span class="number">-1</span>, B, m<span class="number">-1</span>, f[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="keyword">double</span> P = f[<span class="number">0</span>][i] + f[<span class="number">1</span>][i] - f[<span class="number">2</span>][i]*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(P) &lt; eps) ac[++tot] = i-n+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,tot);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ac[i]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【FFT】洛谷 P3803 【模板】多项式乘法（FFT）</title>
      <link href="/2021/07/28/ACM/%E3%80%90FFT%E3%80%91%E6%B4%9B%E8%B0%B7%20P3803%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B9%98%E6%B3%95%EF%BC%88FFT%EF%BC%89/"/>
      <url>/2021/07/28/ACM/%E3%80%90FFT%E3%80%91%E6%B4%9B%E8%B0%B7%20P3803%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%A4%9A%E9%A1%B9%E5%BC%8F%E4%B9%98%E6%B3%95%EF%BC%88FFT%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3803" target="_blank">题链</a></p><p>套了题解区的板子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> p1[MS], p2[MS];</span><br><span class="line"><span class="keyword">double</span> ac[MS&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 洛谷 P3803 【模板】多项式乘法（FFT）</span></span><br><span class="line"><span class="comment">// MS = 1e6 </span></span><br><span class="line"><span class="comment">// time: max( 800ms ) </span></span><br><span class="line"><span class="comment">// ========================================================================================</span></span><br><span class="line"><span class="keyword">typedef</span> complex&lt;<span class="keyword">double</span>&gt; comp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = (<span class="number">1</span>&lt;&lt;<span class="number">21</span>)+<span class="number">10</span>; <span class="comment">// 长度为原长度向上的2^n, 再乘 2  </span></span><br><span class="line"><span class="keyword">int</span> lim, r[N];</span><br><span class="line">comp a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(comp * a, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i ++)</span><br><span class="line"><span class="keyword">if</span>(i &lt; r[i]) <span class="built_in">swap</span>(a[i], a[r[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lim; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="function">comp <span class="title">x</span><span class="params">(cos(PI / i), type * sin(PI / i))</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lim; j += (i &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="function">comp <span class="title">y</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k ++, y *= x) &#123;</span><br><span class="line">comp p = a[j + k], q = y * a[j + k + i];</span><br><span class="line">a[j + k] = p + q; a[j + k + i] = p - q;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多项式 c1 [0,n]; 多项式 c2 [0,m];</span></span><br><span class="line"><span class="comment">// 返回结果 c  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> *c1, <span class="keyword">int</span> n, <span class="keyword">int</span> *c2, <span class="keyword">int</span> m, <span class="keyword">double</span> *c)</span></span>&#123; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) a[i] = c1[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i ++) b[i] = c2[i];</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(lim = <span class="number">1</span>; lim &lt;= n + m; lim &lt;&lt;= <span class="number">1</span>) ++ l;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i ++)</span><br><span class="line">r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (l - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fft</span>(a, <span class="number">1</span>), <span class="built_in">fft</span>(b, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lim; i ++) a[i] *= b[i];</span><br><span class="line"><span class="built_in">fft</span>(a, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; i ++) c[i] = (<span class="keyword">int</span>)(<span class="number">0.5</span> + a[i].<span class="built_in">real</span>() / lim);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ========================================================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 两多项式乘积的系数 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p1[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i ++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p2[i]);</span><br><span class="line"><span class="built_in">get</span>(p1, n, p2, m, ac);  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++) <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,(LL)ac[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树维护区间异或】codeforces E. XOR on Segment</title>
      <link href="/2021/07/27/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E5%BC%82%E6%88%96%E3%80%91codeforces%20E.%20XOR%20on%20Segment/"/>
      <url>/2021/07/27/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E5%BC%82%E6%88%96%E3%80%91codeforces%20E.%20XOR%20on%20Segment/</url>
      
        <content type="html"><![CDATA[<p><a href="http://codeforces.com/contest/242/problem/E" target="_blank">题链</a></p><p>对于一个区间有如下数字{5，6，7，8}，他们的二进制表示分别为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5：0101</span><br><span class="line">6：0110</span><br><span class="line">7：0111</span><br><span class="line">8：1000</span><br></pre></td></tr></table></figure><p>那么这区间数的总和可以这么计算：<br>1*(2^3) + 3*(2^2) + 2*(2^1) + 2*(2^0);<br>其中(2^i)次方前的系数就是第i位的1的个数之和</p><p>将他们异或上一个值 如 4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5^4: 0101^0100 = 0001</span><br><span class="line">6^4: 0110^0100 = 0010</span><br><span class="line">7^4: 0111^0100 = 0011</span><br><span class="line">8^4: 1000^0100 = 1100</span><br></pre></td></tr></table></figure><p>那么异或后这一段区间的总和为：<br>1*(2^3) + 1*(2^2) + 2*(2^1) + 2*(2^0);<br>发现对比异或之前就只有(2^2)前的系数改变；<br>原因是4的二进制表示为0100, 只有(2^2)的系数为1；<br>所以对于需要异或的一个值x，如果x的第i位为1，那么这个区间内的第i位的1的个数就需要变化；<br>变化的结果就是区间长度减去第i位1的个数；<br>于是可以开20棵线段树维护每一位的结果；  </p><p>代码段我对于一个节点开了个数组，就不搞个20棵了，本质上是一样的；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 100000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MXLEN 17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">22</span>];</span><br><span class="line"><span class="keyword">int</span> la[<span class="number">22</span>];</span><br><span class="line"><span class="keyword">bool</span> isla;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">p[rt].cnt[i] = p[ls].cnt[i] + p[rs].cnt[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">p[rt].cnt[i] = ( (x&gt;&gt;i)&amp;<span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls); <span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">push_up</span>(rt); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p[rt].isla)&#123;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ln = m-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> rn = r-m;</span><br><span class="line">p[ls].isla = p[rs].isla = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">int</span> t = p[rt].la[i];</span><br><span class="line">p[rt].la[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(t)&#123;</span><br><span class="line">p[ls].cnt[i] = ln - p[ls].cnt[i];</span><br><span class="line">p[rs].cnt[i] = rn - p[rs].cnt[i];</span><br><span class="line">&#125;</span><br><span class="line">p[ls].la[i] ^= t;</span><br><span class="line">p[rs].la[i] ^= t;</span><br><span class="line"><span class="keyword">if</span>(p[ls].la[i]) p[ls].isla = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(p[rs].la[i]) p[rs].isla = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">p[rt].isla = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">int</span> sum = r-l+<span class="number">1</span>;</span><br><span class="line">p[rt].isla = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">int</span> t = (x&gt;&gt;i)&amp;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(t) p[rt].cnt[i] = sum-p[rt].cnt[i];</span><br><span class="line">p[rt].la[i] ^= t;</span><br><span class="line"><span class="keyword">if</span>(p[rt].la[i]) p[rt].isla = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">modify</span>(L,R,l,m,ls,x);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">modify</span>(L,R,m+<span class="number">1</span>,r,rs,x);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">LL sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">LL t = p[rt].cnt[i];</span><br><span class="line">sum += (<span class="number">1ll</span>&lt;&lt;i)*t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans += <span class="built_in">query</span>(L,R,l,m,ls);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans += <span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> op,l,r,x;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">query</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">modify</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树维护矩阵】LibreOJ-2980 大魔法师</title>
      <link href="/2021/07/24/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E7%9F%A9%E9%98%B5%E3%80%91LibreOJ-2980%20%E5%A4%A7%E9%AD%94%E6%B3%95%E5%B8%88/"/>
      <url>/2021/07/24/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E7%9F%A9%E9%98%B5%E3%80%91LibreOJ-2980%20%E5%A4%A7%E9%AD%94%E6%B3%95%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<p><a href="https://vjudge.net/problem/LibreOJ-2980" target="_blank">题链</a></p><p>线段树维护矩阵模板题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 250009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span>&#123;</span></span><br><span class="line">LL rown,coln,a[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line">matrix la[MS&lt;&lt;<span class="number">2</span>],I;</span><br><span class="line"><span class="keyword">bool</span> isla[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">matrix <span class="keyword">operator</span> + (matrix t1,matrix t2)&#123;</span><br><span class="line">matrix t = &#123;t1.rown,t1.coln&#125;;</span><br><span class="line"><span class="built_in">memset</span>(t.a,<span class="number">0</span>,<span class="keyword">sizeof</span> t.a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t.rown;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=t.coln;j++)&#123;</span><br><span class="line">t.a[i][j] = t1.a[i][j] + t2.a[i][j];</span><br><span class="line">t.a[i][j] %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">matrix <span class="keyword">operator</span> * (matrix t1,matrix t2)&#123;</span><br><span class="line">matrix t = &#123;t1.rown,t2.coln&#125;;</span><br><span class="line"><span class="built_in">memset</span>(t.a,<span class="number">0</span>,<span class="keyword">sizeof</span> t.a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=t.rown;u++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=t.coln;v++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t1.coln;i++)&#123;</span><br><span class="line">t.a[u][v] += t1.a[u][i]*t2.a[i][v];</span><br><span class="line">t.a[u][v] %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt] = p[ls] + p[rs];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">la[rt] = I;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">LL a,b,c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">p[rt] = &#123;<span class="number">1</span>,<span class="number">4</span>&#125;;</span><br><span class="line">p[rt].a[<span class="number">1</span>][<span class="number">1</span>] = a;</span><br><span class="line">p[rt].a[<span class="number">1</span>][<span class="number">2</span>] = b;</span><br><span class="line">p[rt].a[<span class="number">1</span>][<span class="number">3</span>] = c;</span><br><span class="line">p[rt].a[<span class="number">1</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,matrix f)</span></span>&#123;</span><br><span class="line">p[rt] = p[rt] * f;</span><br><span class="line">la[rt] = la[rt] * f;</span><br><span class="line">isla[rt] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isla[rt])&#123;</span><br><span class="line"><span class="built_in">update</span>(ls,la[rt]);</span><br><span class="line"><span class="built_in">update</span>(rs,la[rt]);</span><br><span class="line">la[rt] = I;</span><br><span class="line">isla[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,matrix f)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="built_in">update</span>(rt,f);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">modify</span>(L,R,l,m,ls,f);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">modify</span>(L,R,m+<span class="number">1</span>,r,rs,f);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line"><span class="keyword">if</span>(m &lt; L) <span class="keyword">return</span> <span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m &gt;= R) <span class="keyword">return</span> <span class="built_in">query</span>(L,R,l,m,ls);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(L,R,l,m,ls) + <span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">I = &#123;<span class="number">4</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++) I.a[i][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">init</span>(); <span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line">matrix f = &#123;<span class="number">4</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">LL op,l,r,val;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="built_in">memset</span>(f.a,<span class="number">0</span>,<span class="keyword">sizeof</span> f.a);</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">f.a[<span class="number">1</span>][<span class="number">1</span>] = f.a[<span class="number">2</span>][<span class="number">1</span>] = f.a[<span class="number">2</span>][<span class="number">2</span>] = f.a[<span class="number">3</span>][<span class="number">3</span>] = f.a[<span class="number">4</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">f.a[<span class="number">1</span>][<span class="number">1</span>] = f.a[<span class="number">2</span>][<span class="number">2</span>] = f.a[<span class="number">3</span>][<span class="number">2</span>] = f.a[<span class="number">3</span>][<span class="number">3</span>] = f.a[<span class="number">4</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>)&#123;</span><br><span class="line">f.a[<span class="number">1</span>][<span class="number">1</span>] = f.a[<span class="number">2</span>][<span class="number">2</span>] = f.a[<span class="number">1</span>][<span class="number">3</span>] = f.a[<span class="number">3</span>][<span class="number">3</span>] = f.a[<span class="number">4</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">4</span>)&#123;</span><br><span class="line">f.a[<span class="number">1</span>][<span class="number">1</span>] = f.a[<span class="number">2</span>][<span class="number">2</span>] = f.a[<span class="number">3</span>][<span class="number">3</span>] = f.a[<span class="number">4</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; f.a[<span class="number">4</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">5</span>)&#123;</span><br><span class="line">f.a[<span class="number">1</span>][<span class="number">1</span>] = f.a[<span class="number">3</span>][<span class="number">3</span>] = f.a[<span class="number">4</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; f.a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">6</span>)&#123;</span><br><span class="line">f.a[<span class="number">1</span>][<span class="number">1</span>] = f.a[<span class="number">2</span>][<span class="number">2</span>] = f.a[<span class="number">4</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; f.a[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op != <span class="number">7</span>) <span class="built_in">modify</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>,f);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">matrix ans = <span class="built_in">query</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; ans.a[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; ans.a[<span class="number">1</span>][<span class="number">2</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; ans.a[<span class="number">1</span>][<span class="number">3</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【点分治 树状数组】洛谷 P4178 Tree</title>
      <link href="/2021/07/22/ACM/%E3%80%90%E7%82%B9%E5%88%86%E6%B2%BB%20%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E3%80%91%E6%B4%9B%E8%B0%B7%20P4178%20Tree/"/>
      <url>/2021/07/22/ACM/%E3%80%90%E7%82%B9%E5%88%86%E6%B2%BB%20%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E3%80%91%E6%B4%9B%E8%B0%B7%20P4178%20Tree/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4178" target="_blank">题链</a></p><p>首先点分治；<br>由于求解的是小于等于k的个数，于是开一个树状数组维护前缀和即可；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 20009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 40009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,val;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node &gt; vc[MS];</span><br><span class="line"><span class="keyword">int</span> sz[MS],w[MS];</span><br><span class="line"><span class="keyword">int</span> rt,tr_size; </span><br><span class="line"><span class="keyword">int</span> del[MS];</span><br><span class="line"><span class="keyword">int</span> dis[MS];</span><br><span class="line"><span class="keyword">int</span> dislist[MS] ,cntd;</span><br><span class="line"><span class="keyword">int</span> ext[MAXN];</span><br><span class="line">queue&lt;<span class="keyword">int</span> &gt; Q;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="keyword">int</span> p[MAXN]; <span class="comment">// 树状数组 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;pos&lt;=<span class="number">20000</span>;pos+=<span class="built_in">lowbit</span>(pos)) p[pos] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;pos;pos-=<span class="built_in">lowbit</span>(pos)) ans += p[pos];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_rt</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">sz[u] = <span class="number">1</span>;</span><br><span class="line">w[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;nb:vc[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v = nb.to;</span><br><span class="line"><span class="keyword">if</span>(v != f &amp;&amp; !del[v])&#123;</span><br><span class="line"><span class="built_in">get_rt</span>(v,u);</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line">w[u] = <span class="built_in">max</span>(w[u],sz[v]);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">w[u] = <span class="built_in">max</span>(w[u],tr_size-sz[u]);</span><br><span class="line"><span class="keyword">if</span>(w[u] &lt; w[rt]) rt = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[u] &lt;= m) dislist[++cntd] = dis[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;nb:vc[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v = nb.to;</span><br><span class="line"><span class="keyword">int</span> val = nb.val;</span><br><span class="line"><span class="keyword">if</span>(v != f &amp;&amp; !del[v])&#123;</span><br><span class="line">dis[v] = dis[u] + val;</span><br><span class="line"><span class="built_in">get_dis</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">ext[<span class="number">0</span>]++;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>); <span class="comment">// +1方便树状数组维护 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;nb:vc[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v = nb.to;</span><br><span class="line"><span class="keyword">int</span> val = nb.val;</span><br><span class="line"><span class="keyword">if</span>(!del[v])&#123;</span><br><span class="line">cntd = <span class="number">0</span>;</span><br><span class="line">dis[v] = val;</span><br><span class="line"><span class="built_in">get_dis</span>(v,u);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cntd;i++)&#123;</span><br><span class="line">ans += <span class="built_in">get_sum</span>(m-dislist[i]+<span class="number">1</span>); <span class="comment">// 树状数组求前缀和 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cntd;i++)&#123;</span><br><span class="line">ext[dislist[i]]++;</span><br><span class="line"><span class="built_in">add</span>(dislist[i]+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">Q.<span class="built_in">push</span>(dislist[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ext[<span class="number">0</span>]--;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">ext[Q.<span class="built_in">front</span>()]--;</span><br><span class="line"><span class="built_in">add</span>(Q.<span class="built_in">front</span>()+<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">del[u] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cal</span>(u);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;nb:vc[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v = nb.to;</span><br><span class="line"><span class="keyword">if</span>(!del[v])&#123;</span><br><span class="line">w[rt = <span class="number">0</span>] = tr_size = sz[v];</span><br><span class="line"><span class="built_in">get_rt</span>(v,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">get_rt</span>(rt,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">divide</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,val;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; val;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(&#123;v,val&#125;);</span><br><span class="line">vc[v].<span class="built_in">push_back</span>(&#123;u,val&#125;); </span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line">w[rt = <span class="number">0</span>] = tr_size = n;</span><br><span class="line"><span class="built_in">get_rt</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">get_rt</span>(rt,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">divide</span>(rt);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce;</span><br><span class="line"><span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line">ce = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(ce--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 点分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【点分治】洛谷 P2634 聪聪可可</title>
      <link href="/2021/07/21/ACM/%E3%80%90%E7%82%B9%E5%88%86%E6%B2%BB%E3%80%91%E6%B4%9B%E8%B0%B7%20P2634%20%E8%81%AA%E8%81%AA%E5%8F%AF%E5%8F%AF/"/>
      <url>/2021/07/21/ACM/%E3%80%90%E7%82%B9%E5%88%86%E6%B2%BB%E3%80%91%E6%B4%9B%E8%B0%B7%20P2634%20%E8%81%AA%E8%81%AA%E5%8F%AF%E5%8F%AF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2634" target="_blank">题链</a></p><p>点分治模板题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 20009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,val;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node &gt; vc[MS];</span><br><span class="line">LL ans,sum;</span><br><span class="line"><span class="keyword">int</span> rt,tr_size;</span><br><span class="line"><span class="keyword">int</span> sz[MS],w[MS];</span><br><span class="line"><span class="keyword">int</span> del[MS];</span><br><span class="line"><span class="keyword">int</span> dis[MS];</span><br><span class="line"><span class="keyword">int</span> ext[MAXN];</span><br><span class="line"><span class="keyword">int</span> dismap[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_rt</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">sz[u] = <span class="number">1</span>;</span><br><span class="line">w[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;nb:vc[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v = nb.to;</span><br><span class="line"><span class="keyword">if</span>(v != f &amp;&amp; !del[v])&#123;</span><br><span class="line"><span class="built_in">get_rt</span>(v,u);</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line">w[u] = <span class="built_in">max</span>(w[u],sz[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">w[u] = <span class="built_in">max</span>(w[u],tr_size-sz[u]);</span><br><span class="line"><span class="keyword">if</span>(w[u] &lt; w[rt]) rt = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">dismap[dis[u]%<span class="number">3</span>]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;nb:vc[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v = nb.to;</span><br><span class="line"><span class="keyword">int</span> val = nb.val;</span><br><span class="line"><span class="keyword">if</span>(v != f &amp;&amp; !del[v])&#123;</span><br><span class="line">dis[v] = ( dis[u]+val ) % <span class="number">3</span>;</span><br><span class="line"><span class="built_in">get_dis</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">ext[<span class="number">0</span>]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;nb:vc[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v = nb.to;</span><br><span class="line"><span class="keyword">int</span> val = nb.val;</span><br><span class="line"><span class="keyword">if</span>(!del[v])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) dismap[i] = <span class="number">0</span>;</span><br><span class="line">dis[v] = val % <span class="number">3</span>;</span><br><span class="line"><span class="built_in">get_dis</span>(v,u);</span><br><span class="line"><span class="comment">// 更新答案 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">ans += dismap[i]*ext[(<span class="number">3</span>-i)%<span class="number">3</span>]*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">ext[i] += dismap[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) ext[i] = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">del[u] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cal</span>(u);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;nb:vc[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v = nb.to;</span><br><span class="line"><span class="keyword">if</span>(!del[v])&#123;</span><br><span class="line">w[rt = <span class="number">0</span>] = tr_size = sz[v];</span><br><span class="line"><span class="built_in">get_rt</span>(v,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">get_rt</span>(rt,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">divide</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,val;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; val;</span><br><span class="line">val %= <span class="number">3</span>;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(&#123;v,val&#125;);</span><br><span class="line">vc[v].<span class="built_in">push_back</span>(&#123;u,val&#125;);</span><br><span class="line">&#125;</span><br><span class="line">ans = n ,sum = n*n;</span><br><span class="line">w[rt = <span class="number">0</span>] = tr_size = n;</span><br><span class="line"><span class="built_in">get_rt</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">get_rt</span>(rt,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">divide</span>(rt);</span><br><span class="line"></span><br><span class="line">LL t = __gcd(ans,sum);</span><br><span class="line">ans /= t ,sum /= t;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; sum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce;</span><br><span class="line">ce = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line"><span class="keyword">while</span>(ce--)&#123;</span><br><span class="line"><span class="built_in">solve</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【单调栈】AcWing 131. 直方图中最大的矩形</title>
      <link href="/2021/07/21/ACM/%E3%80%90%E5%8D%95%E8%B0%83%E6%A0%88%E3%80%91AcWing%20131.%20%E7%9B%B4%E6%96%B9%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/"/>
      <url>/2021/07/21/ACM/%E3%80%90%E5%8D%95%E8%B0%83%E6%A0%88%E3%80%91AcWing%20131.%20%E7%9B%B4%E6%96%B9%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/133/" target="_blank">题链</a></p><p><a href="https://blog.csdn.net/lucky52529/article/details/89155694" target="_blank">单调栈非常好的讲解</a></p><p>#简单易懂</p><p>利用单调栈：寻找比p[i]小的下一个值的位置和上一个值的位置；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 3000009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">stack&lt;LL &gt; sta;</span><br><span class="line">LL ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">LL val;</span><br><span class="line">&#125;p[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">p[n+<span class="number">1</span>] = p[<span class="number">0</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)&#123; <span class="comment">// 寻找 p[i] 后第一个比 p[i] 小的位置 </span></span><br><span class="line"><span class="keyword">if</span>(sta.<span class="built_in">empty</span>() || p[sta.<span class="built_in">top</span>()].val &lt;= p[i].val) sta.<span class="built_in">push</span>(i);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; p[sta.<span class="built_in">top</span>()].val &gt; p[i].val)&#123;</span><br><span class="line"><span class="keyword">int</span> t = sta.<span class="built_in">top</span>();</span><br><span class="line">sta.<span class="built_in">pop</span>();</span><br><span class="line">p[t].r = i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sta.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!sta.<span class="built_in">empty</span>()) sta.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;i--)&#123; <span class="comment">// 寻找 p[i] 前第一个比 p[i] 小的位置 </span></span><br><span class="line"><span class="keyword">if</span>(sta.<span class="built_in">empty</span>() || p[sta.<span class="built_in">top</span>()].val &lt;= p[i].val) sta.<span class="built_in">push</span>(i);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; p[sta.<span class="built_in">top</span>()].val &gt; p[i].val)&#123;</span><br><span class="line"><span class="keyword">int</span> t = sta.<span class="built_in">top</span>();</span><br><span class="line">sta.<span class="built_in">pop</span>();</span><br><span class="line">p[t].l = i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sta.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!sta.<span class="built_in">empty</span>()) sta.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">// getans </span></span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans = <span class="built_in">max</span>(ans ,p[i].val*(p[i].r-p[i].l+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &amp;&amp; n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; p[i].val;</span><br><span class="line">p[i].l = p[i].r = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#小小优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 3000009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL p[MS];</span><br><span class="line">stack&lt;LL &gt; sta;</span><br><span class="line">LL ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">p[++n] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(sta.<span class="built_in">empty</span>() || p[sta.<span class="built_in">top</span>()] &lt;= p[i])&#123;</span><br><span class="line">sta.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">LL t;</span><br><span class="line"><span class="keyword">while</span>(!sta.<span class="built_in">empty</span>() &amp;&amp; p[sta.<span class="built_in">top</span>()] &gt; p[i])&#123;</span><br><span class="line">t = sta.<span class="built_in">top</span>();</span><br><span class="line">sta.<span class="built_in">pop</span>();</span><br><span class="line">ans = <span class="built_in">max</span>(ans ,(i-t)*p[t] );  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 由于p[i]这个值左边可能向左扩展</span></span><br><span class="line"><span class="comment">// 所以直接将i的位置改到它能扩展的最左位置</span></span><br><span class="line"><span class="comment">// 这样求面积遍历数组只要从左到右一遍过 </span></span><br><span class="line">sta.<span class="built_in">push</span>(t); </span><br><span class="line">p[t] = p[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!sta.<span class="built_in">empty</span>()) sta.<span class="built_in">pop</span>();</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n &amp;&amp; n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【点分治】洛谷 P3806 【模板】点分治1</title>
      <link href="/2021/07/20/ACM/%E3%80%90%E7%82%B9%E5%88%86%E6%B2%BB%E3%80%91%E6%B4%9B%E8%B0%B7%20P3806%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%82%B9%E5%88%86%E6%B2%BB1/"/>
      <url>/2021/07/20/ACM/%E3%80%90%E7%82%B9%E5%88%86%E6%B2%BB%E3%80%91%E6%B4%9B%E8%B0%B7%20P3806%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%82%B9%E5%88%86%E6%B2%BB1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3806" target="_blank">题链</a></p><p>点分治分为四步：<br>1.找到树的重心<br>2.删除树的重心<br>3.处理经过重心的路径<br>4.处理重心的子树</p><p><a href="https://www.bilibili.com/video/BV1PE41197md" target="_blank">详解来自BiliBili</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 10000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line">LL val;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node &gt; vc[MS];</span><br><span class="line"><span class="keyword">int</span> ask[MS] ,ac[MS];</span><br><span class="line"><span class="keyword">int</span> rt,tr_size;</span><br><span class="line"><span class="keyword">int</span> sz[MS],w[MS];</span><br><span class="line"><span class="keyword">int</span> del[MS];</span><br><span class="line"><span class="keyword">int</span> dis[MS];</span><br><span class="line"><span class="keyword">int</span> dislist[MS],cntd;</span><br><span class="line"><span class="keyword">int</span> ext[MAXN];</span><br><span class="line">queue&lt;<span class="keyword">int</span> &gt; tmp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_rt</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123; <span class="comment">// 找重心 </span></span><br><span class="line">sz[u] = <span class="number">1</span>;</span><br><span class="line">w[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;nb:vc[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v = nb.to;</span><br><span class="line"><span class="keyword">if</span>(v != f &amp;&amp; !del[v])&#123;</span><br><span class="line"><span class="built_in">get_rt</span>(v,u);</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line">w[u] = <span class="built_in">max</span>(w[u],sz[v]); <span class="comment">// 得到最大的子树大小 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">w[u] = <span class="built_in">max</span>(w[u] ,tr_size-sz[u]); <span class="comment">// 自己以及祖先的大小 </span></span><br><span class="line"><span class="keyword">if</span>(w[u] &lt; w[rt]) rt = u; <span class="comment">// 更新重心 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_dis</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">dislist[++cntd] = dis[u]; <span class="comment">// 记录所有距离 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;nb:vc[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v = nb.to;</span><br><span class="line">LL val = nb.val;</span><br><span class="line"><span class="keyword">if</span>(v != f &amp;&amp; !del[v])&#123;</span><br><span class="line">dis[v] = dis[u] + val;</span><br><span class="line"><span class="built_in">get_dis</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">ext[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 标记权值 0 存在 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;nb:vc[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v = nb.to;</span><br><span class="line">LL val = nb.val;</span><br><span class="line"><span class="keyword">if</span>(!del[v])&#123;</span><br><span class="line"><span class="comment">// 得到 v为根的子树到 u 的所有距离 </span></span><br><span class="line">cntd = <span class="number">0</span>;</span><br><span class="line">dis[v] = val;</span><br><span class="line"><span class="built_in">get_dis</span>(v,u);</span><br><span class="line"><span class="comment">// 处理询问 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cntd;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ask[i] &gt;= dislist[j])&#123;</span><br><span class="line">ac[i] |= ext[ ask[i] - dislist[j] ];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 记录所有距离，标记该距离存在 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cntd;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dislist[i] &lt;= <span class="number">1e7</span>)&#123;</span><br><span class="line">ext[ dislist[i] ] = <span class="number">1</span>;</span><br><span class="line">tmp.<span class="built_in">push</span>( dislist[i] );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除所有距离 </span></span><br><span class="line">ext[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!tmp.<span class="built_in">empty</span>())&#123;</span><br><span class="line">ext[ tmp.<span class="built_in">front</span>() ] = <span class="number">0</span>;</span><br><span class="line">tmp.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">del[u] = <span class="number">1</span>; <span class="comment">// 删除重心 </span></span><br><span class="line"><span class="built_in">cal</span>(u);<span class="comment">// 处理经过重心的路径 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;nb:vc[u])&#123; <span class="comment">// 对于每一个子树同样分治 </span></span><br><span class="line"><span class="keyword">int</span> v = nb.to;</span><br><span class="line"><span class="keyword">if</span>(!del[v])&#123;</span><br><span class="line"><span class="comment">// 找重心并分治 </span></span><br><span class="line">w[rt = <span class="number">0</span>] = tr_size = sz[v];</span><br><span class="line"><span class="built_in">get_rt</span>(v,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">get_rt</span>(rt,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">divide</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">LL val;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; val;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(&#123;v,val&#125;);</span><br><span class="line">vc[v].<span class="built_in">push_back</span>(&#123;u,val&#125;);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin &gt;&gt; ask[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到树的重心 </span></span><br><span class="line">w[rt = <span class="number">0</span>] = tr_size = n;</span><br><span class="line"><span class="built_in">get_rt</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">get_rt</span>(rt,<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 分治 </span></span><br><span class="line"><span class="built_in">divide</span>(rt);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ac[i]) cout &lt;&lt; <span class="string">&quot;AYE\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;NAY\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> ce;</span><br><span class="line"><span class="comment">//cin &gt;&gt; ce;</span></span><br><span class="line">ce = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(ce--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 点分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算几何】两球体积交</title>
      <link href="/2021/07/19/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E4%B8%A4%E7%90%83%E4%BD%93%E7%A7%AF%E4%BA%A4/"/>
      <url>/2021/07/19/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E4%B8%A4%E7%90%83%E4%BD%93%E7%A7%AF%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1e18</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ld pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line">ld xa,ya,za,ra,xb,yb,zb,rb;</span><br><span class="line">ld d,va,vb,ans,ha,hb;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; xa &gt;&gt; ya &gt;&gt; za &gt;&gt; ra &gt;&gt; xb &gt;&gt; yb &gt;&gt; zb &gt;&gt; rb;</span><br><span class="line"></span><br><span class="line">d = <span class="built_in">sqrt</span>( (xa-xb)*(xa-xb) + (ya-yb)*(ya-yb) + (za-zb)*(za-zb) ); <span class="comment">//圆心距离</span></span><br><span class="line">va = (<span class="number">4.0</span>/<span class="number">3.0</span>)*pi*(ra*ra*ra);   <span class="comment">// a球体积</span></span><br><span class="line">vb = (<span class="number">4.0</span>/<span class="number">3.0</span>)*pi*(rb*rb*rb);   <span class="comment">// b球体积</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(d &gt;= ra+rb) &#123;     <span class="comment">//判断相离或相切</span></span><br><span class="line">ans = va+vb;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>( d+<span class="built_in">min</span>(ra,rb) &lt;= <span class="built_in">max</span>(ra,rb) ) &#123; <span class="comment">// 包含</span></span><br><span class="line">ans = <span class="built_in">max</span>(va,vb);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;   <span class="comment">//相切</span></span><br><span class="line">ha = ra - ( ( (ra*ra) - (rb*rb) + (d*d) ) / (<span class="number">2</span>*d) ); <span class="comment">//球冠的高</span></span><br><span class="line">hb = rb - ( ( (rb*rb) - (ra*ra) + (d*d) ) / (<span class="number">2</span>*d) );</span><br><span class="line"></span><br><span class="line">ld vra = ( pi*ha*ha*( <span class="number">3</span>*ra-ha  ) ) / <span class="number">3.0</span>;     <span class="comment">//球冠体积</span></span><br><span class="line">ld vrb = ( pi*hb*hb*( <span class="number">3</span>*rb-hb  ) ) / <span class="number">3.0</span>;</span><br><span class="line"></span><br><span class="line">ans = va + vb - vra - vrb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">7</span>) &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算几何】三点求圆心和半径</title>
      <link href="/2021/07/07/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E4%B8%89%E7%82%B9%E6%B1%82%E5%9C%86%E5%BF%83%E5%92%8C%E5%8D%8A%E5%BE%84/"/>
      <url>/2021/07/07/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E4%B8%89%E7%82%B9%E6%B1%82%E5%9C%86%E5%BF%83%E5%92%8C%E5%8D%8A%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">&#125; p[MS];</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">get_center</span><span class="params">(<span class="keyword">double</span> x1,<span class="keyword">double</span> y1,<span class="keyword">double</span> x2,<span class="keyword">double</span> y2,<span class="keyword">double</span> x3,<span class="keyword">double</span> y3)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> A,B,C,D,x,y,r;</span><br><span class="line"><span class="keyword">double</span> x1x1 = x1*x1;</span><br><span class="line"><span class="keyword">double</span> y1y1 = y1*y1;</span><br><span class="line"><span class="keyword">double</span> x2x2 = x2*x2;</span><br><span class="line"><span class="keyword">double</span> y2y2 = y2*y2;</span><br><span class="line"><span class="keyword">double</span> x3x3 = x3*x3;</span><br><span class="line"><span class="keyword">double</span> y3y3 = y3*y3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> x2y3 = x2*y3;</span><br><span class="line"><span class="keyword">double</span> x3y2 = x3*y2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> x2_x3 = x2-x3;</span><br><span class="line"><span class="keyword">double</span> y2_y3 = y2-y3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> x1x1py1y1 = x1x1 + y1y1;</span><br><span class="line"><span class="keyword">double</span> x2x2py2y2 = x2x2 + y2y2;</span><br><span class="line"><span class="keyword">double</span> x3x3py3y3 = x3x3 + y3y3;</span><br><span class="line"></span><br><span class="line">A = x1 * y2_y3 - y1 * x2_x3 + x2y3 - x3y2;</span><br><span class="line">B = x1x1py1y1 * (-y2_y3) + x2x2py2y2 * (y1-y3) + x3x3py3y3 * (y2-y1);</span><br><span class="line">C = x1x1py1y1 * x2_x3 + x2x2py2y2 * (x3 - x1) + x3x3py3y3 * (x1-x2);</span><br><span class="line">D = x1x1py1y1 * (x3y2 - x2y3) + x2x2py2y2 * (x1*y3 - x3*y1) + x3x3py3y3 * (x2*y1-x1*y2);</span><br><span class="line"></span><br><span class="line">x=-B/(<span class="number">2</span>*A);</span><br><span class="line">y=-C/(<span class="number">2</span>*A);</span><br><span class="line">r=<span class="built_in">sqrt</span>((B*B+C*C<span class="number">-4</span>*A*D)/(<span class="number">4</span>*A*A));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三点一线，不存在圆</span></span><br><span class="line"><span class="keyword">if</span>(!A) <span class="keyword">return</span> &#123;MAXN,MAXN&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> &#123;x,y&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【虚树DP】 CF613D Kingdom and its Cities</title>
      <link href="/2021/07/07/ACM/%E3%80%90%E8%99%9A%E6%A0%91DP%E3%80%91%20CF613D%20Kingdom%20and%20its%20Cities/"/>
      <url>/2021/07/07/ACM/%E3%80%90%E8%99%9A%E6%A0%91DP%E3%80%91%20CF613D%20Kingdom%20and%20its%20Cities/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/CF613D" target="_blank">题链</a></p><h1 id="树形dp"><a href="#树形dp" class="headerlink" title="树形dp"></a>树形dp</h1><p>令f[u]表示以u为根的子树需要的最小点数；<br>令g[u]表示以u为根的子树未被截断的点数；</p><p>对于一个点u，其孩子节点v；<br>&emsp;f[u] = $\sum_{}$f[v];<br>&emsp;g[u] = $\sum_{}$g[v];<br>若u是关键点：<br>&emsp;则需要截断子树中未被截断的点：<br>&emsp;&emsp;f[u] += g[u];<br>&emsp;&emsp;g[u] = 1;<br>若u不是关键点：<br>&emsp;若子树中未被截断的点&gt;1，则点u需要放置：<br>&emsp;&emsp;f[u] += 1;<br>&emsp;&emsp;g[u] = 0;<br>&emsp;若子树中未被截断的点&lt;=1，不需要改动；  </p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>由于所给数据的范围对k是有限制的，所以对给出的关键点构造虚树，然后再dp；</p><p>代码lca部分采用树剖；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="comment">// 建树和树剖所用数组----------------- </span></span><br><span class="line">vector&lt;<span class="keyword">int</span> &gt; vc[MS];</span><br><span class="line"><span class="keyword">int</span> dep[MS],fa[MS],zson[MS],sz[MS];</span><br><span class="line"><span class="keyword">int</span> top[MS],val[MS],dfn[MS],tot;</span><br><span class="line"><span class="comment">// ----------------------------------- </span></span><br><span class="line"><span class="keyword">int</span> p[MS],mark[MS];</span><br><span class="line"><span class="keyword">int</span> sta[MS],stp;</span><br><span class="line"><span class="keyword">int</span> tmp[MS],cnt;</span><br><span class="line">vector&lt;<span class="keyword">int</span> &gt; vx[MS];</span><br><span class="line"><span class="keyword">int</span> ff[MS],gg[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">sz[u] = <span class="number">1</span>;</span><br><span class="line">dep[u] = dep[f]+<span class="number">1</span>;</span><br><span class="line">fa[u] = f;</span><br><span class="line">zson[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> maxnzson = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v != f)&#123;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u);</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line"><span class="keyword">if</span>(sz[v] &gt; maxnzson)&#123;</span><br><span class="line">maxnzson = sz[v];</span><br><span class="line">zson[u] = v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">top[u] = tp;</span><br><span class="line">dfn[u] = ++tot;</span><br><span class="line">val[tot] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(zson[u]) <span class="built_in">dfs2</span>(zson[u],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v != fa[u] &amp;&amp; v != zson[u])&#123;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> __lca(<span class="keyword">int</span> u,<span class="keyword">int</span> v)&#123;</span><br><span class="line"><span class="keyword">while</span>(top[u] != top[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ top[u] ] &lt; dep[ top[v] ]) <span class="built_in">swap</span>(u,v);</span><br><span class="line">u = fa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u] &lt; dep[v]) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> t1,<span class="keyword">int</span> t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> dfn[t1] &lt; dfn[t2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">// 插入点x </span></span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">1</span>) <span class="keyword">return</span>; <span class="comment">// 根节点 </span></span><br><span class="line"><span class="keyword">if</span>(stp == <span class="number">1</span>)&#123; <span class="comment">// 栈中元素只有一个 </span></span><br><span class="line">sta[++stp] = x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> lca = __lca(x,sta[stp]);</span><br><span class="line"><span class="keyword">if</span>(lca == sta[stp])&#123; <span class="comment">// 栈顶元素是x的父亲 </span></span><br><span class="line">sta[++stp] = x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 依次弹出栈中元素，使得dfn[栈顶] &lt;= dfn[x] &lt;= dfn[栈次顶]</span></span><br><span class="line"><span class="keyword">while</span>(stp&gt;<span class="number">1</span> &amp;&amp; dfn[lca] &lt;= dfn[sta[stp<span class="number">-1</span>]])&#123;</span><br><span class="line"><span class="keyword">int</span> u = sta[stp<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">int</span> v = sta[stp];</span><br><span class="line">tmp[++cnt] = v;</span><br><span class="line">vx[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">vx[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">stp--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断栈顶是不是x的父亲 </span></span><br><span class="line"><span class="keyword">if</span>(lca != sta[stp])&#123;</span><br><span class="line"><span class="keyword">int</span> u = lca;</span><br><span class="line"><span class="keyword">int</span> v = sta[stp];</span><br><span class="line">tmp[++cnt] = v;</span><br><span class="line">vx[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">vx[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">sta[stp] = lca;</span><br><span class="line">&#125;</span><br><span class="line">sta[++stp] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">stp = <span class="number">1</span>;</span><br><span class="line">sta[stp] = <span class="number">1</span>; <span class="comment">// 构建虚树所用栈，此栈存储的数永远是树上同一条链 </span></span><br><span class="line">cnt = <span class="number">1</span>;</span><br><span class="line">tmp[cnt] = <span class="number">1</span>; <span class="comment">// tmp数组存储虚树所用节点，方便清理 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="built_in">insert</span>(p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(stp&gt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> u = sta[stp<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">int</span> v = sta[stp];</span><br><span class="line">tmp[++cnt] = v;</span><br><span class="line">vx[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">vx[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">stp--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v:vx[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">cal</span>(v,u);</span><br><span class="line">ff[u] += ff[v];</span><br><span class="line">gg[u] += gg[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mark[u])&#123;</span><br><span class="line">ff[u] += gg[u];</span><br><span class="line">gg[u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(gg[u] &gt; <span class="number">1</span>)&#123;</span><br><span class="line">ff[u] += <span class="number">1</span>;</span><br><span class="line">gg[u] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">vx[tmp[i]].<span class="built_in">clear</span>();</span><br><span class="line">ff[tmp[i]] = gg[tmp[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">mark[p[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">vc[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 树剖 </span></span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">cin &gt;&gt; p[i];</span><br><span class="line">mark[p[i]] = <span class="number">1</span>; <span class="comment">// 标记关键点 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// -1的情况特判 </span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(mark[ fa[p[i]] ] &amp;&amp; fa[p[i]] != p[i])&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 所给关键点按dfs序排序 </span></span><br><span class="line"><span class="built_in">sort</span>(p+<span class="number">1</span>,p+k+<span class="number">1</span>,cmp); </span><br><span class="line"><span class="comment">// 构建虚树 </span></span><br><span class="line"><span class="built_in">build</span>();</span><br><span class="line"><span class="comment">// 树形dp </span></span><br><span class="line"><span class="built_in">cal</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; ff[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 清空所用数组 </span></span><br><span class="line"><span class="built_in">clean</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算几何】两圆面积并</title>
      <link href="/2021/06/05/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E4%B8%A4%E5%9C%86%E9%9D%A2%E7%A7%AF%E5%B9%B6/"/>
      <url>/2021/06/05/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E4%B8%A4%E5%9C%86%E9%9D%A2%E7%A7%AF%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pi acos(-1.0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line">&#125; point;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">AREA</span><span class="params">(point a, <span class="keyword">double</span> r1, point b, <span class="keyword">double</span> r2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> d = <span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y));</span><br><span class="line"><span class="keyword">if</span> (d &gt;= r1+r2)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (r1&gt;r2) &#123;</span><br><span class="line"><span class="keyword">double</span> tmp = r1;</span><br><span class="line">r1 = r2;</span><br><span class="line">r2 = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r2 - r1 &gt;= d)</span><br><span class="line"><span class="keyword">return</span> pi*r1*r1;</span><br><span class="line"><span class="keyword">double</span> ang1=<span class="built_in">acos</span>((r1*r1+d*d-r2*r2)/(<span class="number">2</span>*r1*d));</span><br><span class="line"><span class="keyword">double</span> ang2=<span class="built_in">acos</span>((r2*r2+d*d-r1*r1)/(<span class="number">2</span>*r2*d));</span><br><span class="line"><span class="keyword">return</span> ang1*r1*r1 + ang2*r2*r2 - r1*d*<span class="built_in">sin</span>(ang1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">point a, b;</span><br><span class="line">a.x=<span class="number">2</span>, a.y=<span class="number">2</span>;</span><br><span class="line">b.x=<span class="number">7</span>, b.y=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> result = <span class="built_in">AREA</span>(a, <span class="number">3</span>, b, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算几何】两圆交点</title>
      <link href="/2021/06/05/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E4%B8%A4%E5%9C%86%E4%BA%A4%E7%82%B9/"/>
      <url>/2021/06/05/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E4%B8%A4%E5%9C%86%E4%BA%A4%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;Pair&gt; <span class="title">calc</span><span class="params">(<span class="keyword">double</span> x1 , <span class="keyword">double</span> y1 , <span class="keyword">double</span> r1 , <span class="keyword">double</span> x2 , <span class="keyword">double</span> y2 , <span class="keyword">double</span> r2)</span></span>&#123;</span><br><span class="line"> x1-=x2,y1-=y2;</span><br><span class="line"> <span class="keyword">double</span> S=x1*x1+y1*y1,a=(S+r2*r2-r1*r1)/<span class="number">2</span>,D=S*r2*r2-a*a;</span><br><span class="line"> <span class="keyword">if</span>(D&lt;<span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"> <span class="keyword">double</span> A1=a*x1,B1=y1*<span class="built_in">sqrt</span>(D);</span><br><span class="line"> <span class="keyword">double</span> A2=a*y1,B2=x1*<span class="built_in">sqrt</span>(D);</span><br><span class="line"> <span class="keyword">return</span> &#123;&#123;(A1+B1)/S+x2,(A2-B2)/S+y2&#125;,&#123;(A1-B1)/S+x2,(A2+B2)/S+y2&#125;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算几何】极角排序模板</title>
      <link href="/2021/06/05/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E6%9E%81%E8%A7%92%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/"/>
      <url>/2021/06/05/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E6%9E%81%E8%A7%92%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span> <span class="comment">//存储点</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(<span class="keyword">double</span> x1,<span class="keyword">double</span> y1,<span class="keyword">double</span> x2,<span class="keyword">double</span> y2)</span></span>&#123; <span class="comment">//计算叉积</span></span><br><span class="line"><span class="keyword">return</span> (x1*y2-x2*y1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">compare</span><span class="params">(point a,point b,point c)</span> </span>&#123; <span class="comment">//计算极角</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cross</span>((b.x-a.x),(b.y-a.y),(c.x-a.x),(c.y-a.y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="atan2"><a href="#atan2" class="headerlink" title="atan2"></a>atan2</h1><p>快，精度问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(point a,point b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">atan2</span>(a.y,a.x)!=<span class="built_in">atan2</span>(b.y,b.x))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">atan2</span>(a.y,a.x)&lt;<span class="built_in">atan2</span>(b.y,b.x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="利用叉积按极角从小到大排序"><a href="#利用叉积按极角从小到大排序" class="headerlink" title="利用叉积按极角从小到大排序"></a>利用叉积按极角从小到大排序</h1><p>较atan2慢，精度高</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(point a,point b)</span> </span>&#123;</span><br><span class="line">point c;<span class="comment">//原点</span></span><br><span class="line">c.x = <span class="number">0</span>;</span><br><span class="line">c.y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">compare</span>(c,a,b)==<span class="number">0</span>)<span class="comment">//计算叉积，函数在上面有介绍，如果叉积相等，按照X从小到大排序</span></span><br><span class="line"><span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">compare</span>(c,a,b)&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="先按象限从小到大排序-再按极角从小到大排序"><a href="#先按象限从小到大排序-再按极角从小到大排序" class="headerlink" title="先按象限从小到大排序 再按极角从小到大排序"></a>先按象限从小到大排序 再按极角从小到大排序</h1><p>特殊需求的时候才会用到;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp3</span><span class="params">(point a,point b)</span> </span>&#123; <span class="comment">//先按象限从小到大排序 再按极角从小到大排序</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Quadrant</span>(a)==<span class="built_in">Quadrant</span>(b))<span class="comment">//返回值就是象限</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cmp1</span>(a,b);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Quadrant</span>(a)&lt;<span class="built_in">Quadrant</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span> <span class="comment">//存储点</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(<span class="keyword">double</span> x1,<span class="keyword">double</span> y1,<span class="keyword">double</span> x2,<span class="keyword">double</span> y2)</span> </span>&#123; <span class="comment">//计算叉积</span></span><br><span class="line"><span class="keyword">return</span> (x1*y2-x2*y1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">compare</span><span class="params">(point a,point b,point c)</span> </span>&#123; <span class="comment">//计算极角</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cross</span>((b.x-a.x),(b.y-a.y),(c.x-a.x),(c.y-a.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(point a,point b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">atan2</span>(a.y,a.x)!=<span class="built_in">atan2</span>(b.y,b.x))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">atan2</span>(a.y,a.x)&lt;<span class="built_in">atan2</span>(b.y,b.x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(point a,point b)</span> </span>&#123;</span><br><span class="line">point c;<span class="comment">//原点</span></span><br><span class="line">c.x = <span class="number">0</span>;</span><br><span class="line">c.y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">compare</span>(c,a,b)==<span class="number">0</span>)<span class="comment">//计算叉积，函数在上面有介绍，如果叉积相等，按照X从小到大排序</span></span><br><span class="line"><span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">compare</span>(c,a,b)&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quadrant</span><span class="params">(point a)</span>　　 </span>&#123; <span class="comment">//象限排序，注意包含四个坐标轴</span></span><br><span class="line"><span class="keyword">if</span>(a.x&gt;<span class="number">0</span>&amp;&amp;a.y&gt;=<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a.x&lt;=<span class="number">0</span>&amp;&amp;a.y&gt;<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(a.x&lt;<span class="number">0</span>&amp;&amp;a.y&lt;=<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(a.x&gt;=<span class="number">0</span>&amp;&amp;a.y&lt;<span class="number">0</span>)  <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp3</span><span class="params">(point a,point b)</span> </span>&#123; <span class="comment">//先按象限从小到大排序 再按极角从小到大排序</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Quadrant</span>(a)==<span class="built_in">Quadrant</span>(b))<span class="comment">//返回值就是象限</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cmp1</span>(a,b);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Quadrant</span>(a)&lt;<span class="built_in">Quadrant</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算几何】POJ.2069 最小球覆盖</title>
      <link href="/2021/06/05/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91POJ.2069%20%E6%9C%80%E5%B0%8F%E7%90%83%E8%A6%86%E7%9B%96/"/>
      <url>/2021/06/05/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91POJ.2069%20%E6%9C%80%E5%B0%8F%E7%90%83%E8%A6%86%E7%9B%96/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=2069" target="_blank">题链</a></p><h1 id="退火法"><a href="#退火法" class="headerlink" title="退火法"></a>退火法</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 50</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point3D</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y,z;</span><br><span class="line">&#125; data[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(point3D a,point3D b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y)+(a.z-b.z)*(a.z-b.z));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> step=<span class="number">100</span>,ans=<span class="number">1e30</span>,mt;</span><br><span class="line">point3D z;</span><br><span class="line">z.x=z.y=z.z=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(step&gt;eps) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dis</span>(z,data[s])&lt;<span class="built_in">dis</span>(z,data[i])) s=i;</span><br><span class="line">mt=<span class="built_in">dis</span>(z,data[s]);</span><br><span class="line">ans=<span class="built_in">min</span>(ans,mt);</span><br><span class="line">z.x+=(data[s].x-z.x)/mt*step;</span><br><span class="line">z.y+=(data[s].y-z.y)/mt*step;</span><br><span class="line">z.z+=(data[s].z-z.z)/mt*step;</span><br><span class="line">step*=<span class="number">0.98</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n),n) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf&quot;</span>,&amp;data[i].x,&amp;data[i].y,&amp;data[i].z);</span><br><span class="line">ans=<span class="built_in">solve</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.5f\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算几何】AcWing 3028. 最小圆覆盖</title>
      <link href="/2021/06/05/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91AcWing%203028.%20%E6%9C%80%E5%B0%8F%E5%9C%86%E8%A6%86%E7%9B%96/"/>
      <url>/2021/06/05/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91AcWing%203028.%20%E6%9C%80%E5%B0%8F%E5%9C%86%E8%A6%86%E7%9B%96/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/3031/" target="_blank">题链</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span><span class="comment">//O(n)，最小圆覆盖</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-12</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">&#125; s[<span class="number">500005</span>];</span><br><span class="line">node o;<span class="comment">//圆心坐标</span></span><br><span class="line"><span class="keyword">double</span> ri;<span class="comment">//半径</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(node a, node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getr</span><span class="params">(node p1, node p2, node p3)</span> </span>&#123;<span class="comment">//三个点求三角形圆心坐标和半径</span></span><br><span class="line">    <span class="keyword">double</span> a, b, c, d, e, f;</span><br><span class="line">    a = p2.y - p1.y;</span><br><span class="line">    b = p3.y - p1.y;</span><br><span class="line">    c = p2.x - p1.x;</span><br><span class="line">    d = p3.x - p1.x;</span><br><span class="line">    f = p3.x * p3.x + p3.y * p3.y - p1.x * p1.x - p1.y * p1.y;</span><br><span class="line">    e = p2.x * p2.x + p2.y * p2.y - p1.x * p1.x - p1.y * p1.y;</span><br><span class="line">    </span><br><span class="line">    o.x = (a * f - b * e) / (<span class="number">2</span> * a * d - <span class="number">2</span> * b * c);</span><br><span class="line">    o.y = (d * e - c * f) / (<span class="number">2</span> * a * d - <span class="number">2</span> * b * c);</span><br><span class="line">    ri = <span class="built_in">dis</span>(o, p1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>,&amp;s[i].x,&amp;s[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">random_shuffle</span>(s + <span class="number">1</span>, s + n + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    o = s[<span class="number">1</span>];</span><br><span class="line">    ri = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">dis</span>(s[i], o) &gt; ri + eps) &#123;</span><br><span class="line">            o = s[i];</span><br><span class="line">            ri = <span class="number">0</span>;<span class="comment">//第一个点为圆心</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">dis</span>(o, s[j]) &gt; ri + eps) &#123;</span><br><span class="line">                    o.x = (s[i].x + s[j].x) / <span class="number">2</span>;</span><br><span class="line">                    o.y = (s[i].y + s[j].y) / <span class="number">2</span>;</span><br><span class="line">                    ri = <span class="built_in">dis</span>(o, s[j]);<span class="comment">//第一个点和第二个点中点为圆心，距离为直径</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; j; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">dis</span>(o, s[k]) &gt; ri + eps) &#123;</span><br><span class="line">                            <span class="built_in">getr</span>(s[i], s[j], s[k]);<span class="comment">//三点定圆</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10f\n&quot;</span>,ri);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10f %.10f\n&quot;</span>,o.x,o.y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【最小生成树】洛谷 P2872 Building Roads S</title>
      <link href="/2021/06/04/ACM/%E3%80%90%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P2872%20Building%20Roads%20S/"/>
      <url>/2021/06/04/ACM/%E3%80%90%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P2872%20Building%20Roads%20S/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2872" target="_blank">题链</a></p><p>先求出每两个点的距离，再根据已有的边，将其赋值为0，然后跑一遍最小生成树；</p><h1 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2e6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">&#125;p[MS];</span><br><span class="line"><span class="keyword">double</span> dis[MS][MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">double</span> w;</span><br><span class="line">&#125;e[MS*MS];</span><br><span class="line"><span class="keyword">int</span> fa[MS];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(nod t1,nod t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t1.w &lt; t2.w; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">qdis</span><span class="params">(node t1,node t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>( <span class="built_in">sqr</span>(t1.x-t2.x) + <span class="built_in">sqr</span>(t1.y-t2.y) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">fa[<span class="built_in">find</span>(y)] = <span class="built_in">find</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">p[i] = &#123;x,y&#125;;</span><br><span class="line">fa[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">dis[i][j] = <span class="built_in">qdis</span>(p[i],p[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="keyword">if</span>(u &gt; v) <span class="built_in">swap</span>(u,v);</span><br><span class="line">dis[u][v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">e[++tot] = &#123;i,j,dis[i][j]&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(e+<span class="number">1</span>,e+tot+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">int</span> cc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot &amp;&amp; cc &lt; n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">nod t = e[i];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(t.u) != <span class="built_in">find</span>(t.v))&#123;</span><br><span class="line">ans += t.w;</span><br><span class="line"><span class="built_in">merge</span>(t.u,t.v);</span><br><span class="line">cc++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">&#125;a[MS];</span><br><span class="line"><span class="keyword">double</span> p[MS][MS];</span><br><span class="line"><span class="keyword">int</span> v[MS];</span><br><span class="line"><span class="keyword">double</span> dis[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> poi;</span><br><span class="line"><span class="keyword">double</span> val;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;nod &gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (nod t1,nod t2)&#123;</span><br><span class="line"><span class="keyword">return</span> t1.val &gt; t2.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">qdis</span><span class="params">(node t1,node t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>( <span class="built_in">sqr</span>(t1.x-t2.x) + <span class="built_in">sqr</span>(t1.y-t2.y) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">dis[i] = MAXN;</span><br><span class="line">&#125;</span><br><span class="line">dis[x] = <span class="number">0</span>;</span><br><span class="line">Q.<span class="built_in">push</span>(&#123;x,<span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">nod t = Q.<span class="built_in">top</span>();</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(v[t.poi]) <span class="keyword">continue</span>;</span><br><span class="line">v[t.poi] = <span class="number">1</span>;</span><br><span class="line">ans += t.val;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[i] &gt; p[t.poi][i])&#123;</span><br><span class="line">dis[i] = p[t.poi][i];</span><br><span class="line"><span class="keyword">if</span>(!v[i])&#123;</span><br><span class="line">Q.<span class="built_in">push</span>(&#123;i,p[t.poi][i]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">a[i] = &#123;x,y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">p[j][i] = p[i][j] = <span class="built_in">qdis</span>(a[i],a[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">p[v][u] = p[u][v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>,ans);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【重链剖分】洛谷 P3258 松鼠的新家</title>
      <link href="/2021/06/04/ACM/%E3%80%90%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P3258%20%E6%9D%BE%E9%BC%A0%E7%9A%84%E6%96%B0%E5%AE%B6/"/>
      <url>/2021/06/04/ACM/%E3%80%90%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P3258%20%E6%9D%BE%E9%BC%A0%E7%9A%84%E6%96%B0%E5%AE%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3605" target="_blank">题链</a></p><p>树剖板题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2e6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 300009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL a[MS];</span><br><span class="line">vector&lt;LL &gt; vc[MS];</span><br><span class="line">LL fa[MS],sz[MS],dep[MS],zson[MS];</span><br><span class="line">LL tot,top[MS],dfn[MS],w[MS];</span><br><span class="line">LL p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line">LL la[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line">LL ac[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(LL x,LL f)</span></span>&#123;</span><br><span class="line">sz[x] = <span class="number">1</span>;</span><br><span class="line">dep[x] = dep[f]+<span class="number">1</span>;</span><br><span class="line">fa[x] = f;</span><br><span class="line"><span class="keyword">int</span> maxzson = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:vc[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(i != f)&#123;</span><br><span class="line"><span class="built_in">dfs1</span>(i,x);</span><br><span class="line">sz[x] += sz[i];</span><br><span class="line"><span class="keyword">if</span>(sz[i] &gt; maxzson)&#123;</span><br><span class="line">maxzson = sz[i];</span><br><span class="line">zson[x] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(LL x,LL tp)</span></span>&#123;</span><br><span class="line">dfn[x] = ++tot;</span><br><span class="line">top[x] = tp;</span><br><span class="line">w[x] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(zson[x]) <span class="built_in">dfs2</span>(zson[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:vc[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(i != fa[x] &amp;&amp; i != zson[x])&#123;</span><br><span class="line"><span class="built_in">dfs2</span>(i,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(la[rt])&#123;</span><br><span class="line">p[ls] += la[rt];</span><br><span class="line">p[rs] += la[rt];</span><br><span class="line">la[ls] += la[rt];</span><br><span class="line">la[rs] += la[rt];</span><br><span class="line">la[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">p[rt] += val;</span><br><span class="line">la[rt] += val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> p[rt];</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) <span class="keyword">return</span> <span class="built_in">query</span>(pos,l,m,ls);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(pos,m+<span class="number">1</span>,r,rs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op</span><span class="params">(LL x,LL y)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x] != top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ top[x] ] &lt; dep[ top[y] ]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">update</span>(dfn[top[x]],dfn[x],<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x] &gt; dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">update</span>(dfn[x],dfn[y],<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">vc[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL u = a[i<span class="number">-1</span>];</span><br><span class="line">LL v = a[i];</span><br><span class="line"><span class="built_in">op</span>(u,v);</span><br><span class="line"><span class="built_in">update</span>(dfn[v],dfn[v],<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL ans = <span class="built_in">query</span>(dfn[i],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树剖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【重链剖分】洛谷 P2590 树的统计</title>
      <link href="/2021/06/04/ACM/%E3%80%90%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P2590%20%E6%A0%91%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
      <url>/2021/06/04/ACM/%E3%80%90%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P2590%20%E6%A0%91%E7%9A%84%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2590" target="_blank">题链</a></p><p>树链剖分模板题，注意ai数据范围就好</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2e6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 30009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL a[MS];</span><br><span class="line">vector&lt;LL &gt; vc[MS];</span><br><span class="line">LL sz[MS];</span><br><span class="line">LL fa[MS];</span><br><span class="line">LL dep[MS];</span><br><span class="line">LL zson[MS];</span><br><span class="line">LL tot;</span><br><span class="line">LL dfn[MS];</span><br><span class="line">LL top[MS];</span><br><span class="line">LL w[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL maxn,val;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(LL x,LL f)</span></span>&#123;</span><br><span class="line">sz[x] = <span class="number">1</span>;</span><br><span class="line">fa[x] = f;</span><br><span class="line">dep[x] = dep[f]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxzson = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:vc[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(i != f)&#123;</span><br><span class="line"><span class="built_in">dfs1</span>(i,x);</span><br><span class="line">sz[x] += sz[i];</span><br><span class="line"><span class="keyword">if</span>(sz[i] &gt;= maxzson)&#123;</span><br><span class="line">maxzson = sz[i];</span><br><span class="line">zson[x] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(LL x,LL tp)</span></span>&#123;</span><br><span class="line">dfn[x] = ++tot;</span><br><span class="line">top[x] = tp;</span><br><span class="line">w[tot] = a[x];</span><br><span class="line"><span class="keyword">if</span>(zson[x]) <span class="built_in">dfs2</span>(zson[x],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:vc[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(i != zson[x] &amp;&amp; i != fa[x])&#123;</span><br><span class="line"><span class="built_in">dfs2</span>(i,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].val = p[ls].val + p[rs].val;</span><br><span class="line">p[rt].maxn = <span class="built_in">max</span>(p[ls].maxn,p[rs].maxn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt] = &#123;w[l],w[l]&#125;;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt] = &#123;val,val&#125;;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) <span class="built_in">update</span>(pos,l,m,ls,val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(pos,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &lt; L) <span class="keyword">return</span> <span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m &gt;= R) <span class="keyword">return</span> <span class="built_in">query</span>(L,R,l,m,ls);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">node t1 = <span class="built_in">query</span>(L,R,l,m,ls);</span><br><span class="line">node t2 = <span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line">node ans;</span><br><span class="line">ans.val = t1.val + t2.val;</span><br><span class="line">ans.maxn = <span class="built_in">max</span>(t1.maxn,t2.maxn);</span><br><span class="line"><span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">op23</span><span class="params">(LL x,LL y)</span></span>&#123;</span><br><span class="line">node ans = &#123;-(LL)MAXN,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(top[x] != top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ top[x] ] &lt; dep[ top[y] ]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">node cc = <span class="built_in">query</span>(dfn[top[x]],dfn[x],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">ans.val += cc.val;</span><br><span class="line">ans.maxn = <span class="built_in">max</span>(ans.maxn,cc.maxn); </span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x] &gt; dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">node cc = <span class="built_in">query</span>(dfn[x],dfn[y],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">ans.val += cc.val;</span><br><span class="line">ans.maxn = <span class="built_in">max</span>(ans.maxn,cc.maxn);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(LL pos,LL val)</span></span>&#123;</span><br><span class="line"><span class="built_in">update</span>(dfn[pos],<span class="number">1</span>,n,<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">vc[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line">LL x,y;</span><br><span class="line">cin &gt;&gt; s &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">node ans = <span class="built_in">op23</span>(x,y);</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">1</span>] == <span class="string">&#x27;M&#x27;</span>) cout &lt;&lt; ans.maxn &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">1</span>] == <span class="string">&#x27;S&#x27;</span>) cout &lt;&lt; ans.val &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">change</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树剖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树状数组】洛谷 P3605 Promotion Counting P</title>
      <link href="/2021/06/03/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E3%80%91%E6%B4%9B%E8%B0%B7%20P3605%20Promotion%20Counting%20P/"/>
      <url>/2021/06/03/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E3%80%91%E6%B4%9B%E8%B0%B7%20P3605%20Promotion%20Counting%20P/</url>
      
        <content type="html"><![CDATA[<h1 id="—–"><a href="#—–" class="headerlink" title="—–"></a>—–</h1><p><a href="https://www.luogu.com.cn/problem/P3605" target="_blank">题链</a></p><h1 id="–解法一"><a href="#–解法一" class="headerlink" title="–解法一"></a>–解法一</h1><p>跑一边dfs序，按照权值大小对n个点从大到小排好遍历，对于第i个点只要求它子树的和就行；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL val,id;</span><br><span class="line">&#125;a[MS];</span><br><span class="line">LL b[MS],tb;</span><br><span class="line">LL dfn[MS];</span><br><span class="line">LL sz[MS];</span><br><span class="line">vector&lt;LL &gt; vc[MS];</span><br><span class="line">LL p[MS];</span><br><span class="line">queue&lt;LL &gt; Q;</span><br><span class="line">LL ac[MS];</span><br><span class="line">LL tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node t1,node t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t1.val &gt; t2.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lowbit</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL pos,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;pos&lt;=n;pos+=<span class="built_in">lowbit</span>(pos)) p[pos] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(LL pos)</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;pos;pos-=<span class="built_in">lowbit</span>(pos)) ans += p[pos];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">dfn[x] = ++tot;</span><br><span class="line">sz[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:vc[x])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">sz[x] += sz[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i].val;</span><br><span class="line">a[i].id = i;</span><br><span class="line">b[i] = a[i].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">tb = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] != b[i<span class="number">-1</span>]) b[++tb] = b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i].val = <span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+tb+<span class="number">1</span>,a[i].val) - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">vc[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">node t = a[i];</span><br><span class="line">LL tl = dfn[t.id];</span><br><span class="line">LL tr = tl+sz[t.id]<span class="number">-1</span>;</span><br><span class="line">LL ans = <span class="built_in">query</span>(tr) - <span class="built_in">query</span>(tl);</span><br><span class="line">ac[t.id] = ans;</span><br><span class="line"><span class="built_in">add</span>(dfn[t.id],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="–解法二"><a href="#–解法二" class="headerlink" title="–解法二"></a>–解法二</h1><p>离散化+树状数组，dfs求解；</p><p>dfs时，每碰到一个点就将它的权值记录在树状数组中，此时会有一个问题，有两颗子树互不影响，记两颗子树的头节点为t1,t2，dfs时会先遍历第一颗子树，此时到第二颗时，显然第二颗也就是t2的答案应该与之前维护的权值无关，此时可以两眼一闭查一下树状数组中比t2大的个数，然后把t2的子节点全部遍历完后再查一次比t2大的个数，两次的差值就是t2的答案；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL a[MS];</span><br><span class="line">LL b[MS],tb;</span><br><span class="line">vector&lt;LL &gt; vc[MS];</span><br><span class="line">LL p[MS];</span><br><span class="line">LL ac[MS];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lowbit</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL pos,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;pos&lt;=n;pos+=<span class="built_in">lowbit</span>(pos)) p[pos] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(LL pos)</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;pos;pos-=<span class="built_in">lowbit</span>(pos)) ans += p[pos];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">ac[x] = -(<span class="built_in">query</span>(n) - <span class="built_in">query</span>(a[x]));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:vc[x])&#123;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">ac[x] += <span class="built_in">query</span>(n) - <span class="built_in">query</span>(a[x]);</span><br><span class="line"><span class="built_in">add</span>(a[x],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">b[i] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">tb = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] != b[i<span class="number">-1</span>]) b[++tb] = b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i] = <span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+tb+<span class="number">1</span>,a[i]) - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">vc[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树 优先队列】洛谷 P2048 超级钢琴</title>
      <link href="/2021/06/03/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%20%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E3%80%91%E6%B4%9B%E8%B0%B7%20P2048%20%E8%B6%85%E7%BA%A7%E9%92%A2%E7%90%B4/"/>
      <url>/2021/06/03/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%20%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E3%80%91%E6%B4%9B%E8%B0%B7%20P2048%20%E8%B6%85%E7%BA%A7%E9%92%A2%E7%90%B4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2048" target="_blank">题链</a></p><p>求其前缀和，对于每一个i，可选值的范围是[i+L-1,i+R-1]，假设选了pos，那么得到的贡献就是a[pos]-a[i-1]，也就是说需要选择前m大的值相加；</p><p>如果对于一个i，我在它可选值范围内选了pos，得到贡献后，对于i的下一个最大值可能在[i-L+1,pos-1]内，或者[pos+1,i+R-1]内；</p><p>用优先队列维护元组{i,i的可选值范围,该范围内最大值的位置pos}，按a[pos] - a[i-1]的值从大到小；</p><p>考虑用线段树维护区间最大值和最大值所在位置；</p><p>一开始就将每一个i的元组存入优先队列，于是每次都从堆顶拿一个元组处理并加上贡献即可；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2e6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 500009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL cl,cr;</span><br><span class="line">LL a[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL pos,val;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line">LL o,l,r,pos,val;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;nod &gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (nod t1,nod t2)&#123;</span><br><span class="line"><span class="keyword">return</span> t1.val-a[t1.o<span class="number">-1</span>] &lt; t2.val-a[t2.o<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].val = <span class="built_in">max</span>(p[ls].val,p[rs].val);</span><br><span class="line"><span class="keyword">if</span>(p[ls].val &gt;= p[rs].val)</span><br><span class="line">p[rt].pos = p[ls].pos;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">p[rt].pos = p[rs].pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt] = &#123;l,a[l]&#125;;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &lt; L) <span class="keyword">return</span> <span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m &gt;= R) <span class="keyword">return</span> <span class="built_in">query</span>(L,R,l,m,ls);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">node ans;</span><br><span class="line">node t1 = <span class="built_in">query</span>(L,R,l,m,ls);</span><br><span class="line">node t2 = <span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line">ans.val = <span class="built_in">max</span>(t1.val,t2.val);</span><br><span class="line"><span class="keyword">if</span>(t1.val &gt;= t2.val) </span><br><span class="line">ans.pos = t1.pos;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">ans.pos = t2.pos;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; cl &gt;&gt; cr;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">a[i] += a[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+cl<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">LL tl = i+cl<span class="number">-1</span>;</span><br><span class="line">LL tr = <span class="built_in">min</span>(i+cr<span class="number">-1</span>,n);</span><br><span class="line">node t = <span class="built_in">query</span>(tl,tr,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">Q.<span class="built_in">push</span>(&#123;i,tl,tr,t.pos,t.val&#125;);</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">nod cc = Q.<span class="built_in">top</span>();</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">ans += cc.val - a[cc.o<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(cc.l &lt;= cc.pos<span class="number">-1</span>)&#123;</span><br><span class="line">node ql = <span class="built_in">query</span>(cc.l,cc.pos<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">Q.<span class="built_in">push</span>(&#123;cc.o,cc.l,cc.pos<span class="number">-1</span>,ql.pos,ql.val&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cc.pos+<span class="number">1</span> &lt;= cc.r)&#123;</span><br><span class="line">node qr = <span class="built_in">query</span>(cc.pos+<span class="number">1</span>,cc.r,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">Q.<span class="built_in">push</span>(&#123;cc.o,cc.pos+<span class="number">1</span>,cc.r,qr.pos,qr.val&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优先队列 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树状数组 线段树】洛谷 P3586 LOG</title>
      <link href="/2021/06/02/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%20%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3586%20LOG/"/>
      <url>/2021/06/02/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%20%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3586%20LOG/</url>
      
        <content type="html"><![CDATA[<h1 id="—–"><a href="#—–" class="headerlink" title="—–"></a>—–</h1><p><a href="https://www.luogu.com.cn/problem/P3586" target="_blank">题链</a></p><p>题意：判断序列能否选择c个数字同时-1并执行s次，操作单点修改；</p><p>对于序列中&gt;=s的数字，相当于那些数字就等于s，毕竟执行s次也不会把这些数字删成0；</p><p>结论就是把那些超过s的数字看作s，如果序列的总和&gt;=c*s的话，就是可行的，否则不可行；</p><p>把每个数想象成不同颜色的楼房，比如 7 9 3 2 表示四栋楼房高度，询问能否每次选择3个数字-1并执行5次，就是选择3栋楼房砍去最上层；</p><p>7 9 3 2 转化为 5 5 3 2，因为每次都得选择3个不同颜色的楼房，不妨把颜色 3，4 的楼房叠在一起，那么序列就变成 5 5 5，每次砍去最上层且最上层颜色都不同；</p><p>也就是说把后一栋楼房的高度叠到前一栋楼房上，最高高度是s，这样能保证每次选择都是c个不同颜色楼房；</p><p>所以序列总和&gt;=c*s则可行；</p><h1 id="–动态开点权值线段树"><a href="#–动态开点权值线段树" class="headerlink" title="–动态开点权值线段树"></a>–动态开点权值线段树</h1><p>吸氧才过的最后一个点…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL a[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">LL cnt,val;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> &amp;rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p[rt].l &amp;&amp; !p[rt].r)&#123;</span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!p[rt].l)&#123;</span><br><span class="line">p[rt].cnt = p[p[rt].r].cnt;</span><br><span class="line">p[rt].val = p[p[rt].r].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!p[rt].r)&#123;</span><br><span class="line">p[rt].cnt = p[p[rt].l].cnt;</span><br><span class="line">p[rt].val = p[p[rt].l].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p[rt].cnt = p[p[rt].l].cnt + p[p[rt].r].cnt;</span><br><span class="line">p[rt].val = p[p[rt].l].val + p[p[rt].r].val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> pos,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL val,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!rt) rt = ++tot;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line"><span class="keyword">if</span>(t)&#123;</span><br><span class="line">p[rt].cnt++;</span><br><span class="line">p[rt].val += val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p[rt].cnt--;</span><br><span class="line">p[rt].val -= val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[rt].cnt == <span class="number">0</span>)&#123;</span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) <span class="built_in">update</span>(p[rt].l,pos,l,m,val,t);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(p[rt].r,pos,m+<span class="number">1</span>,r,val,t);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">get_cnt</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!rt) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &lt; L) <span class="keyword">return</span> <span class="built_in">get_cnt</span>(p[rt].r,L,R,m+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m &gt;= R) <span class="keyword">return</span> <span class="built_in">get_cnt</span>(p[rt].l,L,R,l,m);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">node ans;</span><br><span class="line">node t1 = <span class="built_in">get_cnt</span>(p[rt].l,L,R,l,m);</span><br><span class="line">node t2 = <span class="built_in">get_cnt</span>(p[rt].r,L,R,m+<span class="number">1</span>,r);</span><br><span class="line">ans.cnt = t1.cnt + t2.cnt;</span><br><span class="line">ans.val = t1.val + t2.val;</span><br><span class="line">ans.l = p[rt].l;</span><br><span class="line">ans.r = p[rt].r;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LL ans = 0;</span></span><br><span class="line"><span class="comment">//if(m &gt;= L) ans += get_cnt(p[rt].l,L,R,l,m);</span></span><br><span class="line"><span class="comment">//if(m &lt;  R) ans += get_cnt(p[rt].r,L,R,m+1,r);</span></span><br><span class="line"><span class="comment">//return ans;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line">LL pos,val,c,s;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">cin &gt;&gt; pos &gt;&gt; val;</span><br><span class="line"><span class="keyword">if</span>(a[pos] != <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">update</span>(root,a[pos],<span class="number">0</span>,MAXN,a[pos],<span class="number">0</span>);</span><br><span class="line">a[pos] = val;</span><br><span class="line"><span class="built_in">update</span>(root,a[pos],<span class="number">0</span>,MAXN,a[pos],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">cin &gt;&gt; c &gt;&gt; s;</span><br><span class="line">LL sum = p[root].val;</span><br><span class="line">node tt = <span class="built_in">get_cnt</span>(root,s,MAXN,<span class="number">0</span>,MAXN);</span><br><span class="line">sum -= tt.val;</span><br><span class="line">sum += tt.cnt*s;</span><br><span class="line"><span class="keyword">if</span>(sum &gt;= c*s)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;TAK\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NIE\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="–树状数组"><a href="#–树状数组" class="headerlink" title="–树状数组"></a>–树状数组</h1><p>把操作离线，数据离散化处理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL a[MS],ta;</span><br><span class="line">LL v[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line">LL x,y;</span><br><span class="line">&#125;b[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line">LL cnt,val;</span><br><span class="line">&#125;p[MS];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lowbit</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL pos,LL val,LL t)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;pos&lt;=m;pos+=<span class="built_in">lowbit</span>(pos))&#123;</span><br><span class="line"><span class="keyword">if</span>(t)&#123;</span><br><span class="line">p[pos].cnt++;</span><br><span class="line">p[pos].val += val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p[pos].cnt--;</span><br><span class="line">p[pos].val -= val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">nod <span class="title">query</span><span class="params">(LL pos)</span></span>&#123;</span><br><span class="line">nod ans = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(;pos;pos-=<span class="built_in">lowbit</span>(pos))&#123;</span><br><span class="line">ans.cnt += p[pos].cnt;</span><br><span class="line">ans.val += p[pos].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line">LL x,y;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line">b[i] = &#123;op,x,y&#125;;</span><br><span class="line">a[i] = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>);</span><br><span class="line">ta = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] != a[i<span class="number">-1</span>]) a[++ta] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) v[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">node t = b[i];</span><br><span class="line"><span class="keyword">if</span>(t.op == <span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">LL pos;</span><br><span class="line"><span class="keyword">if</span>(v[b[i].x] != <span class="number">-1</span>)&#123;</span><br><span class="line">pos = <span class="built_in">lower_bound</span>(a+<span class="number">1</span>,a+ta+<span class="number">1</span>,v[b[i].x]) - a;</span><br><span class="line"><span class="built_in">add</span>(pos,v[b[i].x],<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">v[b[i].x] = b[i].y;</span><br><span class="line">pos = <span class="built_in">lower_bound</span>(a+<span class="number">1</span>,a+ta+<span class="number">1</span>,v[b[i].x]) - a;</span><br><span class="line"><span class="built_in">add</span>(pos,v[b[i].x],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">nod sum = <span class="built_in">query</span>(m);</span><br><span class="line">LL pos = <span class="built_in">lower_bound</span>(a+<span class="number">1</span>,a+ta+<span class="number">1</span>,b[i].y) - a;</span><br><span class="line">nod tt = <span class="built_in">query</span>(pos<span class="number">-1</span>);</span><br><span class="line">LL cc = tt.val + (sum.cnt-tt.cnt)*b[i].y;</span><br><span class="line"><span class="keyword">if</span>(cc &gt;= b[i].x*b[i].y)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;TAK\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NIE\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树状数组】洛谷 P4113 采花</title>
      <link href="/2021/06/02/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E3%80%91%E6%B4%9B%E8%B0%B7%20P4113%20%E9%87%87%E8%8A%B1/"/>
      <url>/2021/06/02/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E3%80%91%E6%B4%9B%E8%B0%B7%20P4113%20%E9%87%87%E8%8A%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="—–"><a href="#—–" class="headerlink" title="—–"></a>—–</h1><p><a href="https://www.luogu.com.cn/problem/P4113" target="_blank">题链</a></p><p>可将询问按L从小到大排序，每次将序列中花朵第二次出现的位置置为1，用树状数组维护；</p><h1 id="–树状数组"><a href="#–树状数组" class="headerlink" title="–树状数组"></a>–树状数组</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2e6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 2000009</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL a[MS];</span><br><span class="line">LL fr[MS]; <span class="comment">// 记录第一次出现的位置 </span></span><br><span class="line">LL aft[MS]; <span class="comment">// 记录后一个相同值出现的位置 </span></span><br><span class="line">LL v[MS];</span><br><span class="line">LL p[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">&#125;ask[MS];</span><br><span class="line">LL ac[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node t1,node t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t1.l &lt; t2.l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lowbit</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;pos&lt;=n;pos+=<span class="built_in">lowbit</span>(pos)) p[pos] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;pos;pos-=<span class="built_in">lowbit</span>(pos)) ans += p[pos];</span><br><span class="line"><span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">if</span>(!fr[a[i]]) fr[a[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">v[i] = n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">aft[i] = v[a[i]];</span><br><span class="line">v[a[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line">aft[n+<span class="number">1</span>] = n+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(fr[i])&#123;</span><br><span class="line"><span class="built_in">add</span>(aft[fr[i]],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">ask[i] = &#123;l,r,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(ask+<span class="number">1</span>,ask+k+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,L=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(L &lt; ask[i].l)&#123;</span><br><span class="line"><span class="built_in">add</span>(aft[L],<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">add</span>(aft[aft[L]],<span class="number">1</span>);</span><br><span class="line">L++;</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="built_in">query</span>(ask[i].r);</span><br><span class="line">ac[ask[i].id] = ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="动态开点线段树"><a href="#动态开点线段树" class="headerlink" title="动态开点线段树"></a>动态开点线段树</h1><p>额…复习一下；吸氧过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2e6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 2000009</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL a[MS];</span><br><span class="line">LL fr[MS];</span><br><span class="line">LL aft[MS];</span><br><span class="line">LL v[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">&#125;ask[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">LL val;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line">LL ac[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node t1,node t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t1.l &lt; t2.l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> &amp;rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p[rt].l &amp;&amp; !p[rt].r)&#123;</span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!p[rt].l)&#123;</span><br><span class="line">p[rt].val = p[p[rt].r].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!p[rt].r)&#123;</span><br><span class="line">p[rt].val = p[p[rt].l].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p[rt].val = p[p[rt].l].val + p[p[rt].r].val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> pos,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!rt) rt = ++tot;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt].val = val;</span><br><span class="line"><span class="keyword">if</span>(!p[rt].val) rt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) <span class="built_in">update</span>(p[rt].l,pos,l,m,val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(p[rt].r,pos,m+<span class="number">1</span>,r,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!rt) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans += <span class="built_in">query</span>(p[rt].l,L,R,l,m);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans += <span class="built_in">query</span>(p[rt].r,L,R,m+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">v[i] = n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!fr[a[i]]) fr[a[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">aft[i] = v[a[i]];</span><br><span class="line">v[a[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line">aft[n+<span class="number">1</span>] = n+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(fr[i] &amp;&amp; aft[fr[i]] != n+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">update</span>(root,aft[fr[i]],<span class="number">1</span>,MAXN,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">ask[i] = &#123;l,r,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(ask+<span class="number">1</span>,ask+k+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,L=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(L &lt; ask[i].l)&#123;</span><br><span class="line"><span class="keyword">if</span>(aft[L] != n+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">update</span>(root,aft[L],<span class="number">1</span>,MAXN,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(aft[aft[L]] != n+<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">update</span>(root,aft[aft[L]],<span class="number">1</span>,MAXN,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">L++;</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="built_in">query</span>(root,ask[i].l,ask[i].r,<span class="number">1</span>,MAXN);</span><br><span class="line">ac[ask[i].id] = ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模拟退火】洛谷 P1337 平衡点 吊打XXX</title>
      <link href="/2021/06/01/ACM/%E3%80%90%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E3%80%91%E6%B4%9B%E8%B0%B7%20P1337%20%E5%B9%B3%E8%A1%A1%E7%82%B9%20%E5%90%8A%E6%89%93XXX/"/>
      <url>/2021/06/01/ACM/%E3%80%90%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E3%80%91%E6%B4%9B%E8%B0%B7%20P1337%20%E5%B9%B3%E8%A1%A1%E7%82%B9%20%E5%90%8A%E6%89%93XXX/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1337" target="_blank">题链</a></p><p>随即确定一个点，将其他点对该点产生的力正交分解，试能越小越稳定；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y,w;</span><br><span class="line">&#125;p[MS];</span><br><span class="line">node ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">(node t)</span></span>&#123;<span class="comment">// 计算试能</span></span><br><span class="line"><span class="keyword">double</span> cc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">double</span> dx = p[i].x - t.x;</span><br><span class="line"><span class="keyword">double</span> dy = p[i].y - t.y;</span><br><span class="line">cc += <span class="built_in">sqrt</span>(dx*dx+dy*dy)*p[i].w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">simulate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">double</span> T=<span class="number">3000</span>,r=<span class="number">0.9</span>;T&gt;<span class="number">1e-15</span>;T*=r)&#123;</span><br><span class="line">node o;</span><br><span class="line">o.x = ans.x + T*(<span class="built_in">rand</span>()*<span class="number">2</span>-RAND_MAX);</span><br><span class="line">o.y = ans.y + T*(<span class="built_in">rand</span>()*<span class="number">2</span>-RAND_MAX);</span><br><span class="line">o.w = <span class="built_in">cal</span>(o);</span><br><span class="line"><span class="keyword">double</span> cha = o.w - ans.w;</span><br><span class="line"><span class="keyword">if</span>(cha &lt; <span class="number">0</span>)&#123;</span><br><span class="line">ans = o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span>(-cha/T)*RAND_MAX&gt;<span class="built_in">rand</span>())&#123;</span><br><span class="line">ans.x = o.x;</span><br><span class="line">ans.y = o.y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in"><span class="keyword">unsigned</span></span>(<span class="built_in">time</span>(<span class="number">0</span>)));</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">double</span> x,y,w;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y &gt;&gt; w;</span><br><span class="line">p[i] = &#123;x,y,w&#125;;</span><br><span class="line">ans.x += x;</span><br><span class="line">ans.y += y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ans.x /= n;</span><br><span class="line">ans.y /= n;</span><br><span class="line">ans.w = <span class="built_in">cal</span>(ans);</span><br><span class="line">LL cnt = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">while</span>(cnt--) <span class="built_in">simulate</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3f %.3f\n&quot;</span>,ans.x,ans.y);</span><br><span class="line"><span class="comment">//cout &lt;&lt; ans.x &lt;&lt; &quot; &quot; &lt;&lt; ans.y &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟退火 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树维护最大子段和】洛谷 P3582 KIN</title>
      <link href="/2021/05/30/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%E3%80%91%E6%B4%9B%E8%B0%B7%20P3582%20KIN/"/>
      <url>/2021/05/30/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%E3%80%91%E6%B4%9B%E8%B0%B7%20P3582%20KIN/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3582" target="_blank">题链</a></p><p>线段树维护区间最大字段和；</p><p><a href="https://ctz45562.github.io/2019/03/04/%E9%A2%98%E8%A7%A3-%E6%B4%9B%E8%B0%B7-P3582-%E3%80%90-POI2015-KIN%E3%80%91/" target="_blank">讲的非常好</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL a[MS];</span><br><span class="line">LL w[MS];</span><br><span class="line">LL pre[MS];</span><br><span class="line">LL v[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL lmax,rmax;</span><br><span class="line">LL maxn;</span><br><span class="line">LL sum;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].sum = p[ls].sum + p[rs].sum;</span><br><span class="line">p[rt].lmax = <span class="built_in">max</span>(p[ls].lmax ,p[ls].sum + p[rs].lmax);</span><br><span class="line">p[rt].rmax = <span class="built_in">max</span>(p[rs].rmax ,p[rs].sum + p[ls].rmax);</span><br><span class="line">p[rt].maxn = <span class="built_in">max</span>(p[rt].lmax ,p[rt].rmax);</span><br><span class="line">p[rt].maxn = <span class="built_in">max</span>(p[rt].maxn ,p[ls].rmax + p[rs].lmax);</span><br><span class="line">p[rt].maxn = <span class="built_in">max</span>(p[rt].maxn ,<span class="built_in">max</span>(p[ls].maxn ,p[rs].maxn));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt] = &#123;val,val,val,val&#125;;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) <span class="built_in">update</span>(pos,l,m,ls,val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(pos,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">pre[i] = v[a[i]];</span><br><span class="line">v[a[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line">pre[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin &gt;&gt; w[i];</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">update</span>(i,<span class="number">1</span>,n,<span class="number">1</span>,w[a[i]]);</span><br><span class="line"><span class="keyword">if</span>(pre[i] != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">update</span>(pre[i],<span class="number">1</span>,n,<span class="number">1</span>,-w[a[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pre[pre[i]] != <span class="number">0</span> &amp;&amp; pre[pre[i]] != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">update</span>(pre[pre[i]],<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,p[<span class="number">1</span>].maxn);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树维护最大子段和】ACwing 245. 你能回答这些问题吗</title>
      <link href="/2021/05/30/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%E3%80%91ACwing%20245.%20%E4%BD%A0%E8%83%BD%E5%9B%9E%E7%AD%94%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E5%90%97/"/>
      <url>/2021/05/30/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%E3%80%91ACwing%20245.%20%E4%BD%A0%E8%83%BD%E5%9B%9E%E7%AD%94%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98%E5%90%97/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.acwing.com/problem/content/246/" target="_blank">题链</a></p><p>线段树维护节点从左边最大，从右边最大，最大子段和，总和，区间最大值；</p><p>如果区间最大值小于 0，输出区间最大值；</p><p>否则输出最大子段和；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL lmax,rmax;</span><br><span class="line">LL maxn;</span><br><span class="line">LL sum;</span><br><span class="line">LL maxval;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].sum = p[ls].sum + p[rs].sum;</span><br><span class="line">p[rt].maxval = <span class="built_in">max</span>(p[ls].maxval,p[rs].maxval);</span><br><span class="line">p[rt].lmax = <span class="built_in">max</span>(p[ls].lmax ,p[ls].sum + p[rs].lmax);</span><br><span class="line">p[rt].rmax = <span class="built_in">max</span>(p[rs].rmax ,p[rs].sum + p[ls].rmax);</span><br><span class="line">p[rt].maxn = <span class="built_in">max</span>(p[rt].lmax,p[rt].rmax);</span><br><span class="line">p[rt].maxn = <span class="built_in">max</span>(p[rt].maxn,<span class="built_in">max</span>(p[ls].maxn,p[rs].maxn));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">LL x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">p[rt] = &#123;<span class="built_in">max</span>(<span class="number">0ll</span>,x),<span class="built_in">max</span>(<span class="number">0ll</span>,x),<span class="built_in">max</span>(<span class="number">0ll</span>,x),x,x&#125;;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt] = &#123;<span class="built_in">max</span>(<span class="number">0ll</span>,val),<span class="built_in">max</span>(<span class="number">0ll</span>,val),<span class="built_in">max</span>(<span class="number">0ll</span>,val),val,val&#125;;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) <span class="built_in">update</span>(pos,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  pos) <span class="built_in">update</span>(pos,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &lt; L) <span class="keyword">return</span> <span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m &gt;= R) <span class="keyword">return</span> <span class="built_in">query</span>(L,R,l,m,ls);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">node tl = <span class="built_in">query</span>(L,R,l,m,ls);</span><br><span class="line">node tr = <span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line">node ans;</span><br><span class="line">ans.sum = tl.sum + tr.sum;</span><br><span class="line">ans.maxval = <span class="built_in">max</span>(tl.maxval,tr.maxval);</span><br><span class="line">ans.lmax = <span class="built_in">max</span>(tl.lmax ,tl.sum + tr.lmax);</span><br><span class="line">ans.rmax = <span class="built_in">max</span>(tr.rmax ,tr.sum + tl.rmax);</span><br><span class="line">ans.maxn = <span class="built_in">max</span>(ans.lmax,ans.rmax);</span><br><span class="line">ans.maxn = <span class="built_in">max</span>(ans.maxn ,<span class="built_in">max</span>(tl.maxn ,tr.maxn));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> op,l,r,pos,val;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">if</span>(l &gt; r) <span class="built_in">swap</span>(l,r);</span><br><span class="line">node ans = <span class="built_in">query</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(ans.maxval &lt; <span class="number">0</span>)&#123;</span><br><span class="line">cout &lt;&lt; ans.maxval &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; ans.maxn &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">cin &gt;&gt; pos &gt;&gt; val;</span><br><span class="line"><span class="built_in">update</span>(pos,<span class="number">1</span>,n,<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算几何】洛谷 P3964 松鼠聚会</title>
      <link href="/2021/05/27/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E6%B4%9B%E8%B0%B7%20P3964%20%E6%9D%BE%E9%BC%A0%E8%81%9A%E4%BC%9A/"/>
      <url>/2021/05/27/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E6%B4%9B%E8%B0%B7%20P3964%20%E6%9D%BE%E9%BC%A0%E8%81%9A%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3964" target="_blank">题链</a></p><p>题意：给定n个点，从中选择一个点poi，使得其他点到x的切比雪夫距离之和最小；</p><p>学习有关二维坐标系上有关<a href="https://www.cnblogs.com/Tecode/p/14818577.html" target="_blank">曼哈顿距离与切比雪夫距离相互转化</a>后；</p><p>可将题给求切比雪夫距离转化成求曼哈顿距离，相当于改变题意；</p><p>也就是说题意可变成 “ 给定n个点，从中选择一个点x，使得其他点到poi的曼哈顿距离之和最小 ”；</p><p>可通过枚举每一个点作为poi，求其他点到x的曼哈顿距离之和；</p><p>由于曼哈顿距离的性质，可将x方向上的坐标和y方向上的坐标分离，分别求其他点与poi的x方向上的贡献，y方向上的贡献，然后相加记录最小值；</p><p>计算贡献时可用前缀和维护减小复杂度；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL px[MS],py[MS]; </span><br><span class="line">LL gx[MS],gy[MS];</span><br><span class="line">LL qzx[MS],qzy[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL x,y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">px[i] = gx[i] = x+y;</span><br><span class="line">py[i] = gy[i] = x-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(gx+<span class="number">1</span>,gx+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">qzx[i] = qzx[i<span class="number">-1</span>] + gx[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(gy+<span class="number">1</span>,gy+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">qzy[i] = qzy[i<span class="number">-1</span>] + gy[i];</span><br><span class="line">&#125;</span><br><span class="line">LL ans = MAXN;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">// 当前点在排序后的数组位置 </span></span><br><span class="line">LL xpos = <span class="built_in">lower_bound</span>(gx+<span class="number">1</span>,gx+n+<span class="number">1</span>,px[i]) - gx;</span><br><span class="line">LL ypos = <span class="built_in">lower_bound</span>(gy+<span class="number">1</span>,gy+n+<span class="number">1</span>,py[i]) - gy;</span><br><span class="line"><span class="comment">// 比当前点小的x值贡献 + 比当前点大的x值贡献 </span></span><br><span class="line">LL xval = px[i]*xpos-qzx[xpos] + qzx[n]-qzx[xpos]-(n-xpos)*px[i];</span><br><span class="line">LL yval = py[i]*ypos-qzy[ypos] + qzy[n]-qzy[ypos]-(n-ypos)*py[i];</span><br><span class="line">ans = <span class="built_in">min</span>(ans,xval+yval);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans/<span class="number">2</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算几何】欧几里得距离、曼哈顿距离、切比雪夫距离</title>
      <link href="/2021/05/27/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E8%B7%9D%E7%A6%BB%E3%80%81%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB%E3%80%81%E5%88%87%E6%AF%94%E9%9B%AA%E5%A4%AB%E8%B7%9D%E7%A6%BB/"/>
      <url>/2021/05/27/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E8%B7%9D%E7%A6%BB%E3%80%81%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB%E3%80%81%E5%88%87%E6%AF%94%E9%9B%AA%E5%A4%AB%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="–概述"><a href="#–概述" class="headerlink" title="–概述"></a>–概述</h1><p><img src="https://img2020.cnblogs.com/blog/2062718/202105/2062718-20210527164212430-1129404647.png"></p><h1 id="–关于转化"><a href="#–关于转化" class="headerlink" title="–关于转化"></a>–关于转化</h1><p><a href="https://www.cnblogs.com/zwfymqz/p/8253530.html" target="_blank">曼哈顿距离、切比雪夫距离相互转化</a></p><h1 id="–例题"><a href="#–例题" class="headerlink" title="–例题"></a>–例题</h1><p><a href="https://www.luogu.com.cn/problem/P3964" target="_blank">洛谷P3964 [TJOI2013]松鼠聚会</a></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【DP】The 15-th Beihang University Collegiate Programming Contest (BCPC 2020) - Final I - Poison AND^OR Affection</title>
      <link href="/2021/05/27/ACM/%E3%80%90DP%E3%80%91The%2015-th%20Beihang%20University%20Collegiate%20Programming%20Contest%20(BCPC%202020)%20-%20Final%20I%20-%20Poison%20AND%5EOR%20Affection/"/>
      <url>/2021/05/27/ACM/%E3%80%90DP%E3%80%91The%2015-th%20Beihang%20University%20Collegiate%20Programming%20Contest%20(BCPC%202020)%20-%20Final%20I%20-%20Poison%20AND%5EOR%20Affection/</url>
      
        <content type="html"><![CDATA[<p><a href="http://codeforces.com/gym/102889/problem/I" target="_blank">题链</a></p><p><img src="https://img2020.cnblogs.com/blog/2062718/202105/2062718-20210527113144801-1421840002.png"></p><p>做法1 写T了；</p><p>这是做法2；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 2009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL a[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line">LL val;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node &gt; vc[MS];</span><br><span class="line">LL dp[MS][MS]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL t = <span class="number">-1</span> ,t1 = a[i] ,t2 = a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">t1 &amp;= a[j];</span><br><span class="line">t2 |= a[j];</span><br><span class="line">LL cc = t1^t2;</span><br><span class="line"><span class="keyword">if</span>(cc != t)&#123;</span><br><span class="line">t = cc;</span><br><span class="line">vc[i].<span class="built_in">push_back</span>(&#123;j,cc&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">vc[i].<span class="built_in">push_back</span>(&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-- 初始化第 1 层信息 </span></span><br><span class="line">LL t1 = a[<span class="number">1</span>], t2 = a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">t1 &amp;= a[i];</span><br><span class="line">t2 |= a[i];</span><br><span class="line">LL cc = t1^t2;</span><br><span class="line">dp[<span class="number">1</span>][i] = cc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--  计算每一层 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123; <span class="comment">//-- (j&lt;=i)时 dp[i][j] 都设为 0 </span></span><br><span class="line">dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]; <span class="comment">//-- 将第 j 个元素作为单个一组 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;vc[j].<span class="built_in">size</span>()<span class="number">-1</span>;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vc[j][k].pos &lt;= i<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">dp[i][j] = <span class="built_in">max</span>(dp[i][j] ,dp[i<span class="number">-1</span>][vc[j][k].pos<span class="number">-1</span>] + vc[j][k].val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[m][n] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树状数组】第十八届同济大学程序设计竞赛暨高校网络友谊赛 E、不平衡的字符串</title>
      <link href="/2021/05/25/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E3%80%91%E7%AC%AC%E5%8D%81%E5%85%AB%E5%B1%8A%E5%90%8C%E6%B5%8E%E5%A4%A7%E5%AD%A6%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E6%9A%A8%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%8F%8B%E8%B0%8A%E8%B5%9B%20E%E3%80%81%E4%B8%8D%E5%B9%B3%E8%A1%A1%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/2021/05/25/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E3%80%91%E7%AC%AC%E5%8D%81%E5%85%AB%E5%B1%8A%E5%90%8C%E6%B5%8E%E5%A4%A7%E5%AD%A6%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B%E6%9A%A8%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%8F%8B%E8%B0%8A%E8%B5%9B%20E%E3%80%81%E4%B8%8D%E5%B9%B3%E8%A1%A1%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>#– 原题解</p><p><a href="https://ac.nowcoder.com/acm/contest/16832/E" target="_blank">题链</a></p><p><img src="https://img2020.cnblogs.com/blog/2062718/202105/2062718-20210525151834582-1646019613.png"></p><p>#– 对于化简后的式子的理解</p><p>p[i] 是下标 i 之前有多少个与当前询问字母相同的字母；</p><p>将 a<em>i-b</em>p[i] 记为式子① ，将 c<em>i-d</em>p[i] 记为式子②；</p><p>为这两个式子构建两颗权值树状数组一二；</p><p>对于每一个新加入的 p[i]，用式子②计算权值val2插入到第二颗树状数组中，先查找第二颗树状数组中查找 &lt;= val2 的值有多少，即为满足条件②的以 i 为结尾的子段个数；</p><p>对于每一个新加入的 p[i]，用式子①计算权值val1插入到第一颗树状数组中，再查找第一颗树状数组中查找 &lt;= val1 的值有多少，即为不满足条件①的以 i 为结尾的子段个数；</p><p>因为满足条件②的一定包含（满足或不满足）条件①的个数，所以两者相减就是 满足①②的 以 i 为结尾的字段数量；</p><p>#–代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 50009</span></span><br><span class="line"> </span><br><span class="line">LL n,m;</span><br><span class="line"><span class="keyword">char</span> s[MS]; </span><br><span class="line">LL qz[MS];</span><br><span class="line">LL ab[MS];</span><br><span class="line">LL cd[MS];</span><br><span class="line">LL tp[MS],tot;</span><br><span class="line">LL p[<span class="number">3</span>][MS];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lowbit</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL rt,LL pos,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;pos&lt;=n;pos+=<span class="built_in">lowbit</span>(pos))&#123;</span><br><span class="line">p[rt][pos] += val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(LL rt,LL pos)</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;pos;pos-=<span class="built_in">lowbit</span>(pos))&#123;</span><br><span class="line">ans += p[rt][pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">cin &gt;&gt; s+<span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">char</span> vs;</span><br><span class="line">LL a,b,c,d;</span><br><span class="line">cin &gt;&gt; vs &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">qz[i] = qz[i<span class="number">-1</span>] + (s[i] == vs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-- a*i - b*qz[i] 离散化 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ab[i] = a*i - b*qz[i];</span><br><span class="line">tp[i] = ab[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(tp,tp+n+<span class="number">1</span>);</span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tp[i] != tp[i<span class="number">-1</span>]) tp[++tot] = tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ab[i] = <span class="built_in">lower_bound</span>(tp,tp+tot+<span class="number">1</span>,ab[i]) - tp + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-- c*i - d*qz[i] 离散化</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cd[i] = c*i - d*qz[i];</span><br><span class="line">tp[i] = cd[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(tp,tp+n+<span class="number">1</span>);</span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(tp[i] != tp[i<span class="number">-1</span>]) tp[++tot] = tp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cd[i] = <span class="built_in">lower_bound</span>(tp,tp+tot+<span class="number">1</span>,cd[i]) - tp + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//--</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) p[<span class="number">1</span>][i] = p[<span class="number">2</span>][i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,ab[i],<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">2</span>,cd[i],<span class="number">1</span>);</span><br><span class="line">LL t2 = <span class="built_in">query</span>(<span class="number">2</span>,cd[i]);</span><br><span class="line">LL t1 = <span class="built_in">query</span>(<span class="number">1</span>,ab[i]);</span><br><span class="line">ans += t2-t1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树 DP】Codeforces Round 721 (Div. 2) E. Partition Game</title>
      <link href="/2021/05/24/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%20DP%E3%80%91Codeforces%20Round%20721%20(Div.%202)%20E.%20Partition%20Game/"/>
      <url>/2021/05/24/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%20DP%E3%80%91Codeforces%20Round%20721%20(Div.%202)%20E.%20Partition%20Game/</url>
      
        <content type="html"><![CDATA[<p>#—题意</p><p><a href="https://codeforces.ml/contest/1527/problem/E" target="_blank">题链</a></p><p>题意：定义一个数字 <strong>num</strong> 在一个数组中的贡献为 <strong>最后一次出现的下标</strong> 减去 <strong>第一次出现的下标</strong>；</p><p>定义一个数组的价值 <strong>cost</strong> 为该数组中出现过的数字 <strong>num</strong> 的价值总和；</p><p>如数组 [2,2,3,2,3]，<strong>cost</strong> = (4-1)+(5-3) = 5；</p><p>给定 <strong>n</strong> ,<strong>m</strong>,以及长度为 <strong>n</strong> 的数组 **a[]**；</p><p>求将 <strong>a[]</strong> 分成 <strong>m</strong> 段数组产生的最小 <strong>cost</strong> 总和；</p><p>#—瞎想</p><p>dp[i][j] 表示将前 j 个数字分为 i 段产生的最小 cost；</p><p>c[i][j] 表示数组下标 [i,j] 划分为一段的贡献；</p><p>那么 dp[i][j] = min( dp[i-1][k] + c[k+1][j] ) 其中 k 小于 j，按照这样暴力来一遍，哦吼~,T飞!；</p><p>既然 dp 方程写出来了，考虑如何优化；</p><p>#—优化</p><p>对于上面所举的例子 [2,2,3,2,3]，也可以等于 cost = (2-1)+(4-2)+(5-3)；</p><p>也就是将某个数字的 <strong>num</strong> 细分，数字 2 就是 ( 这次出现位置 - 上次出现位置 ) 的总和；</p><p>dp[i] 都是由 dp[i-1] 而来的，也就是外层 for 层数 i ；</p><p>内层 for 新加入的数字 a[j]，也就是移动 j 指针，考虑 dp 式子右侧中 dp[i-1][k] + c[k+1][j]，(k &lt; j)；</p><p>每移动一次 j 指针，记 a[j] 上一次出现的位置为 pos，如果将 [pos,j] 作为新的一段，那么 dp[i-1][ 0 ~ pos-1 ] 的值都需要加上 j-pos；</p><p>此时的 k 在 [0,j-1] 范围内，需要查找 [0,j-1] 范围内的最小值；</p><p>所以用线段树维护区间最小值来优化dp，每次移动 j 指针复杂度为logn，全局 O(nmlogn)；</p><p>#—代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,double&gt;</span></span></span><br><span class="line"><span class="comment">// notice</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 35009</span></span><br><span class="line"> </span><br><span class="line">LL n,m;</span><br><span class="line">LL a[MS]; <span class="comment">// 原数组 </span></span><br><span class="line">LL tpos[MS];</span><br><span class="line">LL pre[MS]; <span class="comment">// 记录位置 i 的上一次出现相同数字的位置 </span></span><br><span class="line">LL p[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 用于线段树 </span></span><br><span class="line">LL la[MS&lt;&lt;<span class="number">2</span>]; </span><br><span class="line">LL dp[<span class="number">109</span>][MS];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线段树这五个函数为模板，不需要为题设做任何改变 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt] = la[rt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt] = <span class="built_in">min</span>(p[ls],p[rs]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(la[rt])&#123;</span><br><span class="line">p[ls] += la[rt];</span><br><span class="line">p[rs] += la[rt];</span><br><span class="line">la[ls] += la[rt];</span><br><span class="line">la[rs] += la[rt];</span><br><span class="line">la[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">p[rt] += val;</span><br><span class="line">la[rt] += val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">LL ans = MAXN;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans = <span class="built_in">min</span>(ans,<span class="built_in">query</span>(L,R,l,m,ls));</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans = <span class="built_in">min</span>(ans,<span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,rs));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123; <span class="comment">// 求上一次出现的 pos </span></span><br><span class="line">pre[i] = tpos[a[i]];</span><br><span class="line">tpos[a[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">0</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123; <span class="comment">// 预先将上一层 dp 信息存入线段树 </span></span><br><span class="line"><span class="built_in">update</span>(j,j,<span class="number">0</span>,n,<span class="number">1</span>,dp[i<span class="number">-1</span>][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(pre[j]) <span class="built_in">update</span>(<span class="number">0</span>,pre[j]<span class="number">-1</span>,<span class="number">0</span>,n,<span class="number">1</span>,j-pre[j]);</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">1</span>) dp[i][j] = <span class="built_in">query</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,n,<span class="number">1</span>); <span class="comment">// 分为 1 段的时候需要初始化 </span></span><br><span class="line"><span class="keyword">else</span> dp[i][j] = <span class="built_in">query</span>(<span class="number">0</span>,j<span class="number">-1</span>,<span class="number">0</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;==== &quot; &lt;&lt; i &lt;&lt; &quot; ====\n&quot;;</span></span><br><span class="line"><span class="comment">//for(int j=1;j&lt;=n;j++)&#123;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; dp[i][j] &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[m][n] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【主席树】洛谷 P3919 【模板】可持久化线段树 1（可持久化数组）</title>
      <link href="/2021/05/18/ACM/%E3%80%90%E4%B8%BB%E5%B8%AD%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3919%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91%201%EF%BC%88%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E7%BB%84%EF%BC%89/"/>
      <url>/2021/05/18/ACM/%E3%80%90%E4%B8%BB%E5%B8%AD%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3919%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91%201%EF%BC%88%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E7%BB%84%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3919" target="_blank">题链</a></p><p>原来这才是可持久化的基础之基础</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;ext/rope&gt; </span></span><br><span class="line"><span class="comment">//using namespace __gnu_cxx; </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,val;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> rtpos[MS];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rt = ++tot;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt].val = a[l];</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">p[rt].l = <span class="built_in">build</span>(l,m);</span><br><span class="line">p[rt].r = <span class="built_in">build</span>(m+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> lart,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rt = ++tot;</span><br><span class="line">p[rt] = p[lart];</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt].val = val;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) p[rt].l = <span class="built_in">update</span>(pos,l,m,p[lart].l,val);</span><br><span class="line"><span class="keyword">else</span> p[rt].r = <span class="built_in">update</span>(pos,m+<span class="number">1</span>,r,p[lart].r,val);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> p[rt].val;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) <span class="keyword">return</span> <span class="built_in">query</span>(pos,l,m,p[rt].l);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(pos,m+<span class="number">1</span>,r,p[rt].r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">rtpos[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> vis,op,pos,val;</span><br><span class="line">    cin &gt;&gt; vis &gt;&gt; op &gt;&gt; pos;</span><br><span class="line">    <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">    cin &gt;&gt; val;</span><br><span class="line">    rtpos[i] = <span class="built_in">update</span>(pos,<span class="number">1</span>,n,rtpos[vis],val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">rtpos[i] = rtpos[vis];</span><br><span class="line">cout &lt;&lt; <span class="built_in">query</span>(pos,<span class="number">1</span>,n,rtpos[i]) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【重链剖分】The 15-th Beihang University Collegiate Programming Contest (BCPC 2020) - Final H、宝可梦与分支进化</title>
      <link href="/2021/05/18/ACM/%E3%80%90%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86%E3%80%91The%2015-th%20Beihang%20University%20Collegiate%20Programming%20Contest%20(BCPC%202020)%20-%20Final%20H%E3%80%81%E5%AE%9D%E5%8F%AF%E6%A2%A6%E4%B8%8E%E5%88%86%E6%94%AF%E8%BF%9B%E5%8C%96/"/>
      <url>/2021/05/18/ACM/%E3%80%90%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86%E3%80%91The%2015-th%20Beihang%20University%20Collegiate%20Programming%20Contest%20(BCPC%202020)%20-%20Final%20H%E3%80%81%E5%AE%9D%E5%8F%AF%E6%A2%A6%E4%B8%8E%E5%88%86%E6%94%AF%E8%BF%9B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><a href="https://vjudge.net/problem/Gym-102889H" target="_blank">题链</a></p><p>dp[x] 表示以 x 为进化终点能取得的最大进化次数；</p><p>可以发现 dp[x] 等于 树上x的前缀最大值 +1;</p><p>但是不可能递归寻找x的父亲直到根节点，因为会超时；</p><p>所以采用重链剖分+线段树维护前缀最大值，复杂度O(nlogn*logn)；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 500009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">vector&lt;<span class="keyword">int</span> &gt; vc[MS];</span><br><span class="line"><span class="keyword">int</span> fa[MS];</span><br><span class="line"><span class="keyword">int</span> sz[MS];</span><br><span class="line"><span class="keyword">int</span> dep[MS];</span><br><span class="line"><span class="keyword">int</span> zson[MS];</span><br><span class="line"><span class="keyword">int</span> tim;</span><br><span class="line"><span class="keyword">int</span> top[MS];</span><br><span class="line"><span class="keyword">int</span> dfn[MS];</span><br><span class="line"><span class="keyword">int</span> val[MS];</span><br><span class="line"><span class="keyword">int</span> p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">fa[u] = f;</span><br><span class="line">sz[u] = <span class="number">1</span>;</span><br><span class="line">dep[u] = dep[f]+<span class="number">1</span>;</span><br><span class="line">zson[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> maxn_zson = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u);</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line"><span class="keyword">if</span>(sz[v] &gt; maxn_zson)&#123;</span><br><span class="line">zson[u] = v;</span><br><span class="line">maxn_zson = sz[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">dfn[u] = ++tim;</span><br><span class="line">top[u] = tp;</span><br><span class="line">val[tim] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(zson[u]) <span class="built_in">dfs2</span>(zson[u],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v == fa[u] || v == zson[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt] = val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) <span class="built_in">update</span>(pos,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  pos) <span class="built_in">update</span>(pos,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line">p[rt] = <span class="built_in">max</span>(p[ls],p[rs]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans = <span class="built_in">max</span>(ans,<span class="built_in">query</span>(L,R,l,m,ls));</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans = <span class="built_in">max</span>(ans,<span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,rs));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_max</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == fa[x]) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 如果是根节点则无前缀，返回 0 </span></span><br><span class="line">x = fa[x]; <span class="comment">// 从x的父亲为起点，向上跳 </span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="built_in">query</span>(dfn[x],dfn[x],<span class="number">1</span>,n,<span class="number">1</span>); <span class="comment">// 初值为父亲的值 </span></span><br><span class="line"><span class="keyword">while</span>(x != fa[x])&#123; <span class="comment">// 一直跳到根节点 </span></span><br><span class="line">ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(dfn[top[x]],dfn[x],<span class="number">1</span>,n,<span class="number">1</span>) );</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">vc[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">int</span> cc = <span class="built_in">get_max</span>(x)+<span class="number">1</span>; <span class="comment">// 求 x 的前缀最大值（不含 x ） </span></span><br><span class="line"><span class="built_in">update</span>(dfn[x],<span class="number">1</span>,n,<span class="number">1</span>,cc);</span><br><span class="line">ans = <span class="built_in">max</span>(ans,cc);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树剖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【重链剖分】洛谷 P3379 【模板】最近公共祖先（LCA）</title>
      <link href="/2021/05/18/ACM/%E3%80%90%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P3379%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%88LCA%EF%BC%89/"/>
      <url>/2021/05/18/ACM/%E3%80%90%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P3379%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88%EF%BC%88LCA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3379" target="_blank">题链</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 500009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,rt;</span><br><span class="line">vector&lt;<span class="keyword">int</span> &gt; vc[MS]; </span><br><span class="line"><span class="keyword">int</span> fa[MS];</span><br><span class="line"><span class="keyword">int</span> sz[MS];</span><br><span class="line"><span class="keyword">int</span> zson[MS];</span><br><span class="line"><span class="keyword">int</span> dep[MS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tim;</span><br><span class="line"><span class="keyword">int</span> top[MS];</span><br><span class="line"><span class="keyword">int</span> dfn[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123; <span class="comment">// dfs1 =&gt; fa[] ,sz[] ,zson[] ,dep[]</span></span><br><span class="line">fa[u] = f;</span><br><span class="line">sz[u] = <span class="number">1</span>;</span><br><span class="line">dep[u] = dep[f]+<span class="number">1</span>;</span><br><span class="line">zson[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> maxn_zson = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u);</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line"><span class="keyword">if</span>(sz[v] &gt; maxn_zson)&#123;</span><br><span class="line">zson[u] = v;</span><br><span class="line">maxn_zson = sz[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span>&#123; <span class="comment">// dfs2 =&gt; tim ,top[] ,dfn[]</span></span><br><span class="line">dfn[u] = ++tim;</span><br><span class="line">top[u] = tp;</span><br><span class="line"><span class="keyword">if</span>(zson[u]) <span class="built_in">dfs2</span>(zson[u],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v != fa[u] &amp;&amp; v != zson[u])&#123;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[u] != top[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ top[u] ] &lt; dep[ top[v] ]) <span class="built_in">swap</span>(u,v); <span class="comment">// ***选择 *链头深度大 的向上跳 </span></span><br><span class="line">u = fa[top[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u] &lt; dep[v]) <span class="keyword">return</span> u; <span class="comment">// 深度小的为 LCA </span></span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; rt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">vc[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(rt,rt);</span><br><span class="line"><span class="built_in">dfs2</span>(rt,rt);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">cout &lt;&lt; <span class="built_in">cal</span>(u,v) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树剖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【重链剖分】洛谷 P3384 【模板】轻重链剖分</title>
      <link href="/2021/05/18/ACM/%E3%80%90%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P3384%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E8%BD%BB%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86/"/>
      <url>/2021/05/18/ACM/%E3%80%90%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P3384%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E8%BD%BB%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3384" target="_blank">题链</a></p><p>学习自<a href="https://www.bilibili.com/video/BV1Qt411u77f" target="_blank">大型同性交友网站</a>，这个B<br>站up主讲的非常好！</p><p>终于学会了第一个维护树上问题的方法，我好兴奋啊！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="comment">//#define mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"></span><br><span class="line">LL mod;</span><br><span class="line"><span class="keyword">int</span> n,m,rt,k;</span><br><span class="line">vector&lt;<span class="keyword">int</span> &gt; vc[MS];</span><br><span class="line">LL w[MS]; <span class="comment">// w[i] = 点 i 权值 </span></span><br><span class="line"><span class="keyword">int</span> fa[MS];<span class="comment">// fa[i] = 点 i 父亲 </span></span><br><span class="line"><span class="keyword">int</span> sz[MS]; <span class="comment">// sz[i] = 包含点 i 的子树大小 </span></span><br><span class="line"><span class="keyword">int</span> zson[MS]; <span class="comment">// zson[i] = 点 i 的重子节点 </span></span><br><span class="line"><span class="keyword">int</span> dep[MS];  <span class="comment">// dep[i] = 点 i 的深度 </span></span><br><span class="line"><span class="keyword">int</span> tim; <span class="comment">// dfs序时间戳 </span></span><br><span class="line"><span class="keyword">int</span> top[MS]; <span class="comment">// top[i] = 点 i 的链头 </span></span><br><span class="line"><span class="keyword">int</span> dfn[MS]; <span class="comment">// dfn[i] = 点 i 的时间戳 </span></span><br><span class="line">LL val[MS]; <span class="comment">// val[i] = 时间戳为 i 对应点的权值 </span></span><br><span class="line">LL p[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 用于线段树维护区间总和 </span></span><br><span class="line">LL la[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123; <span class="comment">// 第一遍 dfs =&gt; fa[] ,sz[] ,zson[] ,dep[] </span></span><br><span class="line">fa[u] = f;</span><br><span class="line">sz[u] = <span class="number">1</span>;</span><br><span class="line">dep[u] = dep[f] + <span class="number">1</span>;</span><br><span class="line">zson[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> maxn_zson = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v == f) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(v,u);</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line"><span class="keyword">if</span>(sz[v] &gt; maxn_zson)&#123;</span><br><span class="line">zson[u] = v;</span><br><span class="line">maxn_zson = sz[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> tp)</span></span>&#123; <span class="comment">//第二遍 dfs =&gt; top[] ,dfn[] ,val[] </span></span><br><span class="line">dfn[u] = ++tim;</span><br><span class="line">top[u] = tp;</span><br><span class="line">val[tim] = w[u];</span><br><span class="line"><span class="keyword">if</span>(zson[u]) <span class="built_in">dfs2</span>(zson[u],tp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v != fa[u] &amp;&amp; v != zson[u])&#123;</span><br><span class="line"><span class="built_in">dfs2</span>(v,v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt] = p[ls] + p[rs];</span><br><span class="line">p[rt] %= mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(la[rt])&#123;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">p[ls] += (m-l+<span class="number">1</span>)*la[rt]; p[ls] %= mod;</span><br><span class="line">p[rs] += (r-m)*la[rt];  p[rs] %= mod;</span><br><span class="line">la[ls] += la[rt]; la[ls] %= mod;</span><br><span class="line">la[rs] += la[rt]; la[rs] %= mod;</span><br><span class="line">la[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt] = val[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL tar)</span></span>&#123; <span class="comment">// 区间更新 </span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">p[rt] += (r-l+<span class="number">1</span>)*tar; p[rt] %= mod;</span><br><span class="line">la[rt] += tar; la[rt] %= mod;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update</span>(L,R,l,m,ls,tar);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update</span>(L,R,m+<span class="number">1</span>,r,rs,tar);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123; <span class="comment">// 区间查询 </span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt] % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans += <span class="built_in">query</span>(L,R,l,m,ls) ,ans %= mod;</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans += <span class="built_in">query</span>(L,R,m+<span class="number">1</span>,r,rs) ,ans %= mod;</span><br><span class="line"><span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,LL z)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(top[x] != top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ top[x] ] &lt; dep[ top[y] ]) <span class="built_in">swap</span>(x,y); <span class="comment">// ***选择 *链头深度大 的向上跳 </span></span><br><span class="line"><span class="built_in">update</span>(dfn[top[x]],dfn[x],<span class="number">1</span>,n,<span class="number">1</span>,z);</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x] &gt; dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="built_in">update</span>(dfn[x],dfn[y],<span class="number">1</span>,n,<span class="number">1</span>,z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">op2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top[x] != top[y])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ top[x] ] &lt; dep[ top[y] ]) <span class="built_in">swap</span>(x,y); <span class="comment">// ***选择 *链头深度大 的向上跳 </span></span><br><span class="line">ans += <span class="built_in">query</span>(dfn[top[x]],dfn[x],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">ans %= mod;</span><br><span class="line">x = fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[x] &gt; dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">ans += <span class="built_in">query</span>(dfn[x],dfn[y],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">op3</span><span class="params">(<span class="keyword">int</span> x,LL z)</span></span>&#123;</span><br><span class="line"><span class="built_in">update</span>(dfn[x],dfn[x]+sz[x]<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>,z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">op4</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">query</span>(dfn[x],dfn[x]+sz[x]<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; rt &gt;&gt; mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; w[i] ,w[i] %= mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123; <span class="comment">// 建图 </span></span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">vc[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(rt,rt);</span><br><span class="line"><span class="built_in">dfs2</span>(rt,rt);</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> op,x,y;</span><br><span class="line">LL z;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line"><span class="built_in">op1</span>(x,y,z);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">cout &lt;&lt; <span class="built_in">op2</span>(x,y) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>)&#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; z;</span><br><span class="line"><span class="built_in">op3</span>(x,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">4</span>)&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">cout &lt;&lt; <span class="built_in">op4</span>(x) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树剖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【字典树】洛谷 P2922 Secret Message G</title>
      <link href="/2021/05/14/ACM/%E3%80%90%E5%AD%97%E5%85%B8%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P2922%20Secret%20Message%20G/"/>
      <url>/2021/05/14/ACM/%E3%80%90%E5%AD%97%E5%85%B8%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P2922%20Secret%20Message%20G/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2922" target="_blank">题链</a></p><p>维护两个数组v1[],v2[]，v1[]用于标记，v2[]用于记录v1的后缀和，对于一个询问，如果在字典树上向下查找直到查找不到时，此时答案就是访问到的v1[]的和，如果查找完了，也就是说字典树上还有比询问更长的串，则答案也是访问到的v1[]的和，但是得加上此时的后缀和v2[]，因为当前v2[]包含v1[]，所以还得减去v1[]；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 150000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">500009</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> v1[<span class="number">500009</span>];</span><br><span class="line"><span class="keyword">int</span> v2[<span class="number">500009</span>];</span><br><span class="line"><span class="keyword">int</span> step;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span>(!p[cc][x]) p[cc][x] = ++step;</span><br><span class="line">cc = p[cc][x];</span><br><span class="line">v2[cc]++;</span><br><span class="line">&#125;</span><br><span class="line">v1[cc]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span>(!p[cc][x])&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">continue</span>;</span><br><span class="line">cc = p[cc][x];</span><br><span class="line">ans += v1[cc];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br><span class="line">ans += v2[cc];</span><br><span class="line">ans -= v1[cc];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">cin &gt;&gt; len;</span><br><span class="line"><span class="built_in">insert</span>(len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">cin &gt;&gt; len;</span><br><span class="line">cout &lt;&lt; <span class="built_in">find</span>(len) &lt;&lt; <span class="string">&quot;\n&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【字典树】洛谷 P3879 阅读理解</title>
      <link href="/2021/05/14/ACM/%E3%80%90%E5%AD%97%E5%85%B8%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3879%20%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3/"/>
      <url>/2021/05/14/ACM/%E3%80%90%E5%AD%97%E5%85%B8%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3879%20%E9%98%85%E8%AF%BB%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3879" target="_blank">题链</a></p><p>字典树模板题；</p><p>总结：字典树数组长度应大于等于所有字符串总和长度，数组最后一维取决于字符集的大小；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 150000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">1009</span>][<span class="number">5009</span>];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">1009</span>][<span class="number">5009</span>][<span class="number">30</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> step;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> cc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=h;k++)&#123;</span><br><span class="line"><span class="keyword">int</span> x = s[k]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!p[i][cc][x]) p[i][cc][x] = ++step;</span><br><span class="line">cc = p[i][cc][x];</span><br><span class="line">&#125;</span><br><span class="line">v[i][cc]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> h = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> cc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=h;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> x = s[j]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!p[i][cc][x])&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cc = p[i][cc][x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!v[i][cc]) flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line">step = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin &gt;&gt; s+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">insert</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin &gt;&gt; s+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">find</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【分块】洛古 P3396 哈希冲突</title>
      <link href="/2021/05/12/ACM/%E3%80%90%E5%88%86%E5%9D%97%E3%80%91%E6%B4%9B%E5%8F%A4%20P3396%20%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81/"/>
      <url>/2021/05/12/ACM/%E3%80%90%E5%88%86%E5%9D%97%E3%80%91%E6%B4%9B%E5%8F%A4%20P3396%20%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3396" target="_blank">题链</a></p><p>p[i][j] 表示 mod 为 i,池子为 j 的总和，可以预处理 mod 在 [1,1000] 范围内的答案，O(1)回答每个询问；</p><p>如果询问的范围超过了 1000，则暴力跑一边即可；</p><p>复杂度顶得住…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 150009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[MS];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">1009</span>][<span class="number">1009</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">1001</span>;j++)&#123;</span><br><span class="line">p[j][i%j] += a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1001</span>;i++)&#123;</span><br><span class="line">p[i][pos%i] -= a[pos];</span><br><span class="line">p[i][pos%i] += val;</span><br><span class="line">&#125;</span><br><span class="line">a[pos] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"><span class="keyword">int</span> x,tar;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; x &gt;&gt; tar;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= <span class="number">1001</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=tar;i&lt;=n;i+=x)&#123;</span><br><span class="line">ans += a[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; p[x][tar] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">update</span>(x,tar);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【莫队】洛谷 P4168 蒲公英</title>
      <link href="/2021/05/12/ACM/%E3%80%90%E8%8E%AB%E9%98%9F%E3%80%91%E6%B4%9B%E8%B0%B7%20P4168%20%E8%92%B2%E5%85%AC%E8%8B%B1/"/>
      <url>/2021/05/12/ACM/%E3%80%90%E8%8E%AB%E9%98%9F%E3%80%91%E6%B4%9B%E8%B0%B7%20P4168%20%E8%92%B2%E5%85%AC%E8%8B%B1/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4168" target="_blank">题链</a></p><h1 id="——"><a href="#——" class="headerlink" title="——"></a>——</h1><p>题意在线求区间众数，若有多个输出权值最小的那个；</p><p>离线可采用莫队，在线由于区间众数不满足区间可加性（或许我不知道，不会维护），所以采用分块方式来写；</p><h1 id="——-1"><a href="#——-1" class="headerlink" title="——"></a>——</h1><p>对于数据范围首先离散化，对长度为 n 的数组分为 sqrt(n) 块，预处理出第 i 块到第 j 块的区间众数答案；</p><p>预处理出数组每一个不同值的位置，vector存储；</p><p>对于一个询问[l,r]，若 l 所在的块和 r 所在的块距离 &lt;= 1，则暴力求解 [l,r] 的答案；</p><p>否则可以将 [l,r] 划分为 [l,L),[L,R],(R,r] 三个块，其中 [L,R] 是指 [l,r] 之间所有的块；</p><p>可以发现ans要么是预处理出的 [L,R] 的答案，要么ans是在，[l,L),(R,r] 之中，对于这两个区间，遍历每个值，用刚才存位置的 vector 二分查找出现次数；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 40009</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> sqMS = <span class="built_in">sqrt</span>(MS)+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[MS]; <span class="comment">// 原数组 </span></span><br><span class="line"><span class="keyword">int</span> b[MS],tb;</span><br><span class="line"><span class="keyword">int</span> c[MS]; <span class="comment">// 离散化数组 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size,bknum; <span class="comment">// 块大小，块数 </span></span><br><span class="line"><span class="keyword">int</span> bkl[MS],bkr[MS]; <span class="comment">// 第 i 块左右区间 </span></span><br><span class="line"><span class="keyword">int</span> belong[MS]; <span class="comment">// i 位置所属块号 </span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span> &gt; vc[MS]; <span class="comment">// 存 c[i] 位置 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt[MS]; <span class="comment">// 计数 </span></span><br><span class="line"><span class="keyword">int</span> p[sqMS][sqMS]; <span class="comment">// i 块 ~ j 块 的区间众数 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">a_hash_c</span><span class="params">()</span></span>&#123; <span class="comment">// 离散化 </span></span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">tb = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] != b[i<span class="number">-1</span>]) b[++tb] = b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">c[i] = <span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+tb+<span class="number">1</span>,a[i]) - b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_bk</span><span class="params">()</span></span>&#123; <span class="comment">// 预处理块 </span></span><br><span class="line">size = <span class="built_in">sqrt</span>(n);</span><br><span class="line">bknum = n/size;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bknum;i++)&#123;</span><br><span class="line">bkl[i] = (i<span class="number">-1</span>)*size+<span class="number">1</span>;</span><br><span class="line">bkr[i] = i*size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(bkr[bknum] &lt; n)&#123;</span><br><span class="line">bknum++;</span><br><span class="line">bkl[bknum] = bkr[bknum<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">bkr[bknum] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bknum;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=bkl[i];j&lt;=bkr[i];j++)&#123;</span><br><span class="line">belong[j] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_numpos</span><span class="params">()</span></span>&#123; <span class="comment">// 存每个数位置 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">vc[c[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_p</span><span class="params">()</span></span>&#123; <span class="comment">// 预处理 i 块 ~ j 块 的区间众数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bknum;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cntans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=bkl[i];j&lt;=n;j++)&#123;</span><br><span class="line">cnt[c[j]]++;</span><br><span class="line"><span class="keyword">if</span>(cntans &lt; cnt[c[j]] || (cntans == cnt[c[j]] &amp;&amp; ans &gt; c[j]))&#123;</span><br><span class="line">ans = c[j];</span><br><span class="line">cntans = cnt[c[j]];</span><br><span class="line">&#125;</span><br><span class="line">p[i][belong[j]] = ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">b[i] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">a_hash_c</span>();</span><br><span class="line"><span class="built_in">init_bk</span>();</span><br><span class="line"><span class="built_in">init_numpos</span>();</span><br><span class="line"><span class="built_in">init_p</span>();</span><br><span class="line"><span class="keyword">int</span> lastans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">l = (l+lastans<span class="number">-1</span>)%n+<span class="number">1</span>;</span><br><span class="line">r = (r+lastans<span class="number">-1</span>)%n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l &gt; r) <span class="built_in">swap</span>(l,r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(belong[r] - belong[l] &lt;= <span class="number">1</span>)&#123; <span class="comment">// l,r之间没有完整块 </span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cntans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> lpos = <span class="built_in">lower_bound</span>(vc[c[i]].<span class="built_in">begin</span>(),vc[c[i]].<span class="built_in">end</span>(),l) - vc[c[i]].<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">int</span> rpos = <span class="built_in">upper_bound</span>(vc[c[i]].<span class="built_in">begin</span>(),vc[c[i]].<span class="built_in">end</span>(),r) - vc[c[i]].<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">int</span> cc = rpos - lpos;</span><br><span class="line"><span class="keyword">if</span>(cc &gt; cntans || (cc == cntans &amp;&amp; c[i] &lt; ans))&#123;</span><br><span class="line">ans = c[i];</span><br><span class="line">cntans = cc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; b[ans] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">lastans = b[ans];</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> L = belong[l]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> R = belong[r]<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> ans = p[L][R]; <span class="comment">// 初始化为 l,r 之间的块的区间众数 </span></span><br><span class="line"><span class="keyword">int</span> lanspos = <span class="built_in">lower_bound</span>(vc[ans].<span class="built_in">begin</span>(),vc[ans].<span class="built_in">end</span>(),l) - vc[ans].<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">int</span> ranspos = <span class="built_in">lower_bound</span>(vc[ans].<span class="built_in">begin</span>(),vc[ans].<span class="built_in">end</span>(),r) - vc[ans].<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">int</span> cntans = ranspos - lanspos; <span class="comment">// [l,r] 区间内 ans 出现次数 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=bkl[L]<span class="number">-1</span>;i++)&#123; <span class="comment">// 暴力处理左边不完整块 </span></span><br><span class="line"><span class="keyword">int</span> lpos = <span class="built_in">lower_bound</span>(vc[c[i]].<span class="built_in">begin</span>(),vc[c[i]].<span class="built_in">end</span>(),l) - vc[c[i]].<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">int</span> rpos = <span class="built_in">upper_bound</span>(vc[c[i]].<span class="built_in">begin</span>(),vc[c[i]].<span class="built_in">end</span>(),r) - vc[c[i]].<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">int</span> cc = rpos - lpos;</span><br><span class="line"><span class="keyword">if</span>(cc &gt; cntans || (cc == cntans &amp;&amp; c[i] &lt; ans))&#123;</span><br><span class="line">ans = c[i];</span><br><span class="line">cntans = cc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=bkr[R]+<span class="number">1</span>;i&lt;=r;i++)&#123; <span class="comment">// 暴力处理右边不完整块</span></span><br><span class="line"><span class="keyword">int</span> lpos = <span class="built_in">lower_bound</span>(vc[c[i]].<span class="built_in">begin</span>(),vc[c[i]].<span class="built_in">end</span>(),l) - vc[c[i]].<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">int</span> rpos = <span class="built_in">upper_bound</span>(vc[c[i]].<span class="built_in">begin</span>(),vc[c[i]].<span class="built_in">end</span>(),r) - vc[c[i]].<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">int</span> cc = rpos - lpos;</span><br><span class="line"><span class="keyword">if</span>(cc &gt; cntans || (cc == cntans &amp;&amp; c[i] &lt; ans))&#123;</span><br><span class="line">ans = c[i];</span><br><span class="line">cntans = cc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; b[ans] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">lastans = b[ans];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Manacher】洛谷 P3805 【模板】manacher算法</title>
      <link href="/2021/05/12/ACM/%E3%80%90Manacher%E3%80%91%E6%B4%9B%E8%B0%B7%20P3805%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91manacher%E7%AE%97%E6%B3%95/"/>
      <url>/2021/05/12/ACM/%E3%80%90Manacher%E3%80%91%E6%B4%9B%E8%B0%B7%20P3805%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91manacher%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3805" target="_blank">题链</a></p><p><a href="https://oi-wiki.org/string/manacher/" target="_blank">OI-wiki</a></p><p>字符串以 1 为开头写的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 22000009 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> mnc[MS];</span><br><span class="line"><span class="keyword">char</span> t[MS];</span><br><span class="line"><span class="keyword">char</span> s[MS];</span><br><span class="line"><span class="keyword">int</span> tot,hs; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; t+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> h = <span class="built_in">strlen</span>(t+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=h;i++)&#123; <span class="comment">// 预处理原串 </span></span><br><span class="line">s[++tot] = <span class="number">0</span>;</span><br><span class="line">s[++tot] = t[i];</span><br><span class="line">&#125;</span><br><span class="line">s[++tot] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,l=<span class="number">1</span>,r=<span class="number">0</span>;i&lt;=tot;i++)&#123; <span class="comment">// manacher </span></span><br><span class="line"><span class="keyword">int</span> cc = i &gt; r? <span class="number">1</span> : <span class="built_in">min</span>(mnc[l+(r-i)] , r-i);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>&lt;=i-cc &amp;&amp; i+cc&lt;=tot &amp;&amp; s[i-cc] == s[i+cc]) cc++;</span><br><span class="line">mnc[i] = --cc; <span class="comment">// mnc[i]表示s[i]这个点向右最多能扩充几个 </span></span><br><span class="line"><span class="keyword">if</span>(i+cc &gt; r)&#123;</span><br><span class="line">r = i+cc;</span><br><span class="line">l = i-cc;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,mnc[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树形DP】2021年东华大学金马程序设计联赛 G. IDEA&#39;s Tree</title>
      <link href="/2021/05/11/ACM/%E3%80%90%E6%A0%91%E5%BD%A2DP%E3%80%912021%E5%B9%B4%E4%B8%9C%E5%8D%8E%E5%A4%A7%E5%AD%A6%E9%87%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%81%94%E8%B5%9B%20G.%20IDEA&#39;s%20Tree/"/>
      <url>/2021/05/11/ACM/%E3%80%90%E6%A0%91%E5%BD%A2DP%E3%80%912021%E5%B9%B4%E4%B8%9C%E5%8D%8E%E5%A4%A7%E5%AD%A6%E9%87%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%81%94%E8%B5%9B%20G.%20IDEA&#39;s%20Tree/</url>
      
        <content type="html"><![CDATA[<p><a href="https://acm.ecnu.edu.cn/contest/405/problem/G/" target="_blank">题链</a></p><p>dp[u][j]表示 包含u这个节点 不包含u节点父亲 大小为j的连通块方案数；</p><p>设v是u的一个子节点，并且递归求解出dp[v][j]，递归终点就是dp[v][1] = 1，然后类似背包方法合并dp[u][]，dp[v][]；</p><p>记cnt[i]表示大小为i的连通块数量；</p><p>cnt[i]就是dp[ [1~n] ][i]的和；</p><p>tot = cnt[ [1~n] ]之和；</p><p>sum = i*cnt[ [1~n] ]之和；</p><p>求期望 ans = （sum/tot）%mod；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 5009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">vector&lt;<span class="keyword">int</span> &gt; vc[MS]; </span><br><span class="line">LL dp[MS][MS];</span><br><span class="line"><span class="keyword">int</span> sz[MS];</span><br><span class="line">LL cnt[MS];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x,LL y)</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans = (ans*x)%mod;</span><br><span class="line">x = (x*x)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL x,LL y)</span></span>&#123; <span class="comment">// x/y;</span></span><br><span class="line"><span class="keyword">return</span>  ( (x%mod)*<span class="built_in">qpow</span>(y,mod<span class="number">-2</span>)%mod )%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">dp[u][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">sz[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v,u);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=sz[u];i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=sz[v];j++)&#123;</span><br><span class="line">dp[u][i+j] = (dp[u][i+j] + dp[u][i]*dp[v][j])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">vc[i].<span class="built_in">push_back</span>(x);</span><br><span class="line">vc[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=sz[i];j++)&#123;</span><br><span class="line">cnt[j] = (cnt[j] + dp[i][j]) % mod;</span><br><span class="line">dp[i][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL sum = <span class="number">0</span> ,tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">sum = (sum + cnt[i]*i) % mod;</span><br><span class="line">tot = (tot + cnt[i]) % mod;</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="built_in">inv</span>(sum,tot);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; n)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) vc[i].<span class="built_in">clear</span>() ,sz[i] = cnt[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树形DP】洛谷 P2014 选课</title>
      <link href="/2021/05/11/ACM/%E3%80%90%E6%A0%91%E5%BD%A2DP%E3%80%91%E6%B4%9B%E8%B0%B7%20P2014%20%E9%80%89%E8%AF%BE/"/>
      <url>/2021/05/11/ACM/%E3%80%90%E6%A0%91%E5%BD%A2DP%E3%80%91%E6%B4%9B%E8%B0%B7%20P2014%20%E9%80%89%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2014" target="_blank">题链</a></p><p>dp[u][j]表示u这个节点取j个物品的最大值（包含u点）；</p><p>设v是u的一个子节点，并且递归求解出dp[v][j]，递归终点就是dp[v][1] = val[v]（val[v] 表示点v的权值），然后合并u，v；</p><p>答案就是dp[0][m+1]，从0号点选取m+1个物品的最大值（0号物品val[0] = 0）；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 309</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">vector&lt;<span class="keyword">int</span> &gt; vc[MS];</span><br><span class="line"><span class="keyword">int</span> val[MS];</span><br><span class="line"><span class="keyword">int</span> dp[MS][MS];</span><br><span class="line"><span class="keyword">int</span> sz[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span>&#123;</span><br><span class="line">dp[u][<span class="number">1</span>] = val[u];</span><br><span class="line">sz[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v:vc[u])&#123;</span><br><span class="line"><span class="keyword">if</span>(v == fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v,u);</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=sz[u];i&gt;=<span class="number">2</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=sz[v];j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i-j&gt;=<span class="number">1</span>) dp[u][i] = <span class="built_in">max</span>(dp[u][i] , dp[u][i-j]+dp[v][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x,w;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; w;</span><br><span class="line">vc[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">val[i] = w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">cout &lt;&lt; dp[<span class="number">0</span>][m+<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】求逆元</title>
      <link href="/2021/05/11/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E6%B1%82%E9%80%86%E5%85%83/"/>
      <url>/2021/05/11/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E6%B1%82%E9%80%86%E5%85%83/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL x,LL y)</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;y;y&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(y&amp;<span class="number">1</span>) ans = (ans*x)%mod;</span><br><span class="line">x = (x*x)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL x,LL y)</span></span>&#123; <span class="comment">// x/y;</span></span><br><span class="line"><span class="keyword">return</span>  ( (x%mod)*<span class="built_in">qpow</span>(y,mod<span class="number">-2</span>)%mod )%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【回滚莫队】mex</title>
      <link href="/2021/05/11/ACM/%E3%80%90%E5%9B%9E%E6%BB%9A%E8%8E%AB%E9%98%9F%E3%80%91mex/"/>
      <url>/2021/05/11/ACM/%E3%80%90%E5%9B%9E%E6%BB%9A%E8%8E%AB%E9%98%9F%E3%80%91mex/</url>
      
        <content type="html"><![CDATA[<p><a href="https://vjudge.net/problem/%E9%BB%91%E6%9A%97%E7%88%86%E7%82%B8-3585" target="_blank">题链</a></p><p>多次询问一个区间内最小没有出现过的自然数</p><p>回滚莫队：发现添加一个数难以维护，故只用删除操作来维护答案。用cnt[]来计数，一开始把[1,n]全部塞进去，记录全局答案ANS，只有新的询问所属的块与上次询问不同时更新ANS（因为该询问前面的块已经没有用了）；</p><p>什么时候更新答案ans呢？一开始ans = ANS的，每一次删除的时候，判断cnt[x]是否等于0，因为一开始cnt[]数组是记录了 [ 询问左区间的块的左区间,n] 之间的所有数字的，所以删着删着如果cnt[x] == 0了，那么ans = min(ans,x)；</p><p>详细看代码；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f1 first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f2 second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL a[MS]; <span class="comment">// 原数组 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125;ask[MS];</span><br><span class="line">LL size,bknum; <span class="comment">// 每一块的位置，总块数 </span></span><br><span class="line">LL bkl[MS],bkr[MS]; <span class="comment">// 分别记录第i块的左右区间 </span></span><br><span class="line">LL belong[MS]; <span class="comment">// 表示下标pos位置所属块号 </span></span><br><span class="line"></span><br><span class="line">LL ANS;</span><br><span class="line">LL cnp[MS]; <span class="comment">// 临时计数数组 用于暴力处理 cnp[i]表示i出现次数 </span></span><br><span class="line">LL cnt[MS]; <span class="comment">// 用于计数数组 cnt[i]表示i出现次数 </span></span><br><span class="line"></span><br><span class="line">LL ac[MS]; <span class="comment">// 记录答案 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_ANS</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt; n+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">cnt[a[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(cnt[ANS]) ANS++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_bk</span><span class="params">()</span></span>&#123;</span><br><span class="line">size = <span class="built_in">sqrt</span>(n);</span><br><span class="line">bknum = n/size;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bknum;i++)&#123;</span><br><span class="line">bkl[i] = (i<span class="number">-1</span>)*size+<span class="number">1</span>;</span><br><span class="line">bkr[i] = i*size; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(bkr[bknum] &lt; n)&#123;</span><br><span class="line">bknum++;</span><br><span class="line">bkl[bknum] = bkr[bknum<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">bkr[bknum] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bknum;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=bkl[i];j&lt;=bkr[i];j++)&#123;</span><br><span class="line">belong[j] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node t1,node t2)</span></span>&#123; <span class="comment">// 按块排序，左区间从小到大，右区间从大到小 </span></span><br><span class="line"><span class="keyword">if</span>(belong[t1.l] != belong[t2.l]) <span class="keyword">return</span> t1.l &lt; t2.l;</span><br><span class="line"><span class="keyword">return</span> t1.r &gt; t2.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123; </span><br><span class="line"><span class="keyword">if</span>(a[pos] &gt; n+<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">cnt[a[pos]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> pos,LL &amp;ans)</span></span>&#123; <span class="comment">// 删除时更新答案 </span></span><br><span class="line"><span class="keyword">if</span>(a[pos] &gt; n+<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">cnt[a[pos]]--;</span><br><span class="line"><span class="keyword">if</span>(cnt[a[pos]] == <span class="number">0</span>) ans = <span class="built_in">min</span>(ans,a[pos]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init_ANS</span>(); <span class="comment">// 初始化全局答案 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">ask[i] = &#123;l,r,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init_bk</span>(); <span class="comment">// 初始化 块 </span></span><br><span class="line"><span class="built_in">sort</span>(ask+<span class="number">1</span>,ask+m+<span class="number">1</span>,cmp); <span class="comment">// 对询问按 块 排序 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L = <span class="number">1</span> ,R = n;</span><br><span class="line"><span class="keyword">int</span> lastbk = <span class="number">0</span>;</span><br><span class="line">LL ans = ANS;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(belong[ask[i].l] == belong[ask[i].r])&#123; <span class="comment">// 属于同一块 暴力处理 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=ask[i].l;j&lt;=ask[i].r;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt; n+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">cnp[a[j]]++;</span><br><span class="line">&#125;</span><br><span class="line">LL tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cnp[tmp]) tmp++;</span><br><span class="line">ac[ask[i].id] = tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=ask[i].l;j&lt;=ask[i].r;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt; n+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">cnp[a[j]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(belong[ask[i].l] != lastbk)&#123; <span class="comment">// 新的左区间与上次的左区间块不同 </span></span><br><span class="line"><span class="keyword">while</span>(R &lt; n) <span class="built_in">add</span>(++R);</span><br><span class="line"><span class="keyword">while</span>(L &lt; bkl[belong[ask[i].l]]) <span class="built_in">remove</span>(L++,ANS); <span class="comment">// ***更新全局ANS </span></span><br><span class="line">lastbk = belong[ask[i].l];</span><br><span class="line">ans = ANS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(R &gt; ask[i].r)&#123;</span><br><span class="line"><span class="built_in">remove</span>(R--,ans);</span><br><span class="line">&#125;</span><br><span class="line">LL tmp = ans; <span class="comment">// 左区间可能是乱序的，tmp作为临时记录 </span></span><br><span class="line"><span class="keyword">while</span>(L &lt; ask[i].l)&#123;</span><br><span class="line"><span class="built_in">remove</span>(L++,tmp);</span><br><span class="line">&#125;</span><br><span class="line">ac[ask[i].id] = tmp;</span><br><span class="line"><span class="comment">// 回滚 </span></span><br><span class="line"><span class="keyword">while</span>(L &gt; bkl[belong[ask[i].l]]) <span class="built_in">add</span>(--L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【回滚莫队】洛谷 P3709 大爷的字符串题</title>
      <link href="/2021/05/10/ACM/%E3%80%90%E5%9B%9E%E6%BB%9A%E8%8E%AB%E9%98%9F%E3%80%91%E6%B4%9B%E8%B0%B7%20P3709%20%E5%A4%A7%E7%88%B7%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98/"/>
      <url>/2021/05/10/ACM/%E3%80%90%E5%9B%9E%E6%BB%9A%E8%8E%AB%E9%98%9F%E3%80%91%E6%B4%9B%E8%B0%B7%20P3709%20%E5%A4%A7%E7%88%B7%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="——"><a href="#——" class="headerlink" title="——-"></a>——-</h1><p><a href="https://www.luogu.com.cn/problem/P3709" target="_blank">题链</a></p><p>1.普通莫队：维护两个数组v[i]与cnt[i]，v[i]表示i出现次数，cnt[i]表示出现i次的数有多少个；</p><p>对于新加入的数很好更新，ans = max(ans,v[x])，对于删除的数x，若这个的数被删之前v[x] = 1了，删完后就没了，并且出现ans次的数的个数cnt[ans] = 1，那么x就是此时的众数，删了它，那么ans–；</p><p>2.回滚莫队：发现新增一个数字可以很好的维护ans，但是删除一个数字不好维护，所以使用回滚莫队；</p><h1 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h1><p>1.普通莫队：维护两个数组v[i]与cnt[i]，v[i]表示i出现次数，cnt[i]表示出现i次的数有多少个；</p><p>对于新加入的数很好更新，ans = max(ans,v[x])，对于删除的数x，若这个的数被删之前v[x] = 1了，删完后就没了，并且出现ans次的数的个数cnt[ans] = 1，那么x就是此时的众数，删了它，那么ans–；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"><span class="keyword">int</span> a[MS];</span><br><span class="line"><span class="keyword">int</span> b[MS],tb;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125;ask[MS];</span><br><span class="line"><span class="keyword">int</span> unit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[MS];</span><br><span class="line"><span class="keyword">int</span> cnt[MS];</span><br><span class="line"><span class="keyword">int</span> ac[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node t1,node t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t1.l/unit != t2.l/unit) <span class="keyword">return</span> t1.l &lt; t2.l;</span><br><span class="line"><span class="keyword">return</span> t1.r &lt; t2.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">b[i] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">tb = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] != b[i<span class="number">-1</span>]) b[++tb] = b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i] = <span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+tb+<span class="number">1</span>,a[i])-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">ask[i] = &#123;l,r,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line">unit = <span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="built_in">sort</span>(ask+<span class="number">1</span>,ask+m+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> L = <span class="number">1</span> ,R = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l = ask[i].l;</span><br><span class="line"><span class="keyword">int</span> r = ask[i].r;</span><br><span class="line"><span class="keyword">int</span> id = ask[i].id;</span><br><span class="line"><span class="keyword">while</span>(L &lt; l)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans == v[a[L]] &amp;&amp; cnt[v[a[L]]] == <span class="number">1</span>) ans--;</span><br><span class="line">cnt[v[a[L]]]--;</span><br><span class="line">v[a[L]]--;</span><br><span class="line">cnt[v[a[L]]]++;</span><br><span class="line">L++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(L &gt; l)&#123;</span><br><span class="line">L--;</span><br><span class="line">cnt[v[a[L]]]--;</span><br><span class="line">v[a[L]]++;</span><br><span class="line">cnt[v[a[L]]]++;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,v[a[L]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(R &lt; r)&#123;</span><br><span class="line">R++;</span><br><span class="line">cnt[v[a[R]]]--;</span><br><span class="line">v[a[ R]]++;</span><br><span class="line">cnt[v[a[R]]]++;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,v[a[R]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(R &gt; r)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans == v[a[R]] &amp;&amp; cnt[v[a[R]]] == <span class="number">1</span>) ans--;</span><br><span class="line">cnt[v[a[R]]]--;</span><br><span class="line">v[a[R]]--;</span><br><span class="line">cnt[v[a[R]]]++;</span><br><span class="line">R--;</span><br><span class="line">&#125;</span><br><span class="line">ac[id] = ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cout &lt;&lt; -ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h1><p>2.回滚莫队：发现新增一个数字可以很好的维护ans，但是删除一个数字不好维护，所以使用回滚莫队；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f1 first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> f2 second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL a[MS];</span><br><span class="line">LL b[MS],tb;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125;ask[MS];</span><br><span class="line">LL size,bknum;</span><br><span class="line">LL bkl[MS],bkr[MS];</span><br><span class="line">LL belong[MS];</span><br><span class="line"></span><br><span class="line">LL cnt[MS];</span><br><span class="line">LL cnp[MS];</span><br><span class="line">LL ac[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_bk</span><span class="params">()</span></span>&#123;</span><br><span class="line">size = <span class="built_in">sqrt</span>(n);</span><br><span class="line">bknum = n/size;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bknum;i++)&#123;</span><br><span class="line">bkl[i] = (i<span class="number">-1</span>)*size+<span class="number">1</span>;</span><br><span class="line">bkr[i] = i*size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(bkr[bknum] &lt; n)&#123;</span><br><span class="line">bknum++;</span><br><span class="line">bkl[bknum] = bkr[bknum<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">bkr[bknum] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bknum;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=bkl[i];j&lt;=bkr[i];j++)&#123;</span><br><span class="line">belong[j] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node t1,node t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(belong[t1.l] != belong[t2.l]) <span class="keyword">return</span> t1.l &lt; t2.l;</span><br><span class="line"><span class="keyword">return</span> t1.r &lt; t2.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">b[i] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">tb = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] != b[i<span class="number">-1</span>]) b[++tb] = b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i] = <span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+tb+<span class="number">1</span>,a[i]) - b;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">ask[i] = &#123;l,r,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init_bk</span>();</span><br><span class="line"><span class="built_in">sort</span>(ask+<span class="number">1</span>,ask+m+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">int</span> L = <span class="number">1</span> ,R = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lastbk = <span class="number">0</span>;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(belong[ask[i].l] == belong[ask[i].r])&#123;</span><br><span class="line">LL tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=ask[i].l;j&lt;=ask[i].r;j++)&#123;</span><br><span class="line">cnp[a[j]]++;</span><br><span class="line">tmp = <span class="built_in">max</span>(tmp,cnp[a[j]]);</span><br><span class="line">&#125;</span><br><span class="line">ac[ask[i].id] = tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=ask[i].l;j&lt;=ask[i].r;j++)&#123;</span><br><span class="line">cnp[a[j]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(belong[ask[i].l] != lastbk)&#123;</span><br><span class="line"><span class="keyword">for</span>(;L&lt;=bkr[belong[ask[i].l]];L++) cnt[a[L]]--;</span><br><span class="line"><span class="keyword">for</span>(;R&gt; bkr[belong[ask[i].l]];R--) cnt[a[R]]--;</span><br><span class="line">lastbk = belong[ask[i].l];</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(R &lt; ask[i].r)&#123;</span><br><span class="line">cnt[a[++R]]++;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,cnt[a[R]]);</span><br><span class="line">&#125;</span><br><span class="line">LL tmp = ans;</span><br><span class="line"><span class="keyword">while</span>(L &gt; ask[i].l)&#123;</span><br><span class="line">cnt[a[--L]]++;</span><br><span class="line">tmp = <span class="built_in">max</span>(tmp,cnt[a[L]]);</span><br><span class="line">&#125;</span><br><span class="line">ac[ask[i].id] = tmp;</span><br><span class="line"><span class="keyword">for</span>(;L&lt;=bkr[belong[ask[i].l]];L++) cnt[a[L]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cout &lt;&lt; -ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【回滚莫队】AT1219 歴史の研究</title>
      <link href="/2021/05/10/ACM/%E3%80%90%E5%9B%9E%E6%BB%9A%E8%8E%AB%E9%98%9F%E3%80%91AT1219%20%E6%AD%B4%E5%8F%B2%E3%81%AE%E7%A0%94%E7%A9%B6/"/>
      <url>/2021/05/10/ACM/%E3%80%90%E5%9B%9E%E6%BB%9A%E8%8E%AB%E9%98%9F%E3%80%91AT1219%20%E6%AD%B4%E5%8F%B2%E3%81%AE%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://vjudge.net/problem/AtCoder-joisc2014_c" target="_blank">题链</a></p><p>题意询问区间最大价值，最大价值指区间中 a[i]出现次数*a[i] 的最大值；</p><p>莫队解决：发现新增一个数字很好维护最大值（计数就行），但是删除一个数字困难，所以用到回滚莫队</p><p>这篇博客看的通俗易懂，代码也是~</p><p><a href="https://blog.csdn.net/weixin_34195364/article/details/93092669" target="_blank">回滚莫队</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL a[MS]; <span class="comment">// 原数组 </span></span><br><span class="line">LL b[MS],tb;<span class="comment">// 离散化所用临时数组 </span></span><br><span class="line">LL c[MS];<span class="comment">// 离散化后的数组 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125;ask[MS];</span><br><span class="line">LL sizee,bknum; <span class="comment">// 每块大小，总块数 </span></span><br><span class="line">LL belong[MS]; <span class="comment">// 下标 i 所属区块标号 </span></span><br><span class="line">LL bkl[MS],bkr[MS]; <span class="comment">// 区块 i 的左右区间 </span></span><br><span class="line"></span><br><span class="line">LL cnp[MS]; <span class="comment">// 询问的左右区间所属同一块时暴力处理所用临时数组 </span></span><br><span class="line">LL cnt[MS]; <span class="comment">// cnt[i]表示 i 出现次数 </span></span><br><span class="line">LL ac[MS];  <span class="comment">// 记录答案 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node t1,node t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(belong[t1.l] ^ belong[t2.l]) <span class="keyword">return</span> t1.l &lt; t2.l;</span><br><span class="line"><span class="keyword">return</span> t1.r &lt; t2.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_block</span><span class="params">()</span></span>&#123;</span><br><span class="line">sizee = <span class="built_in">sqrt</span>(n);</span><br><span class="line">bknum = n/sizee;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bknum;i++)&#123;</span><br><span class="line">bkl[i] = (i<span class="number">-1</span>)*sizee+<span class="number">1</span>;</span><br><span class="line">bkr[i] = i*sizee;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(bkr[bknum] &lt; n)&#123;</span><br><span class="line">bknum++;</span><br><span class="line">bkl[bknum] = bkr[bknum<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">bkr[bknum] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=bknum;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=bkl[i];j&lt;=bkr[i];j++)&#123;</span><br><span class="line">belong[j] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">b[i] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 离散化 c[]为离散化后处理数组，a[]为原数组 </span></span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>);</span><br><span class="line">tb = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] != b[i<span class="number">-1</span>]) b[++tb] = b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;  </span><br><span class="line">c[i] = <span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+tb+<span class="number">1</span>,a[i]) - b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 离线处理询问，分块排序 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">ask[i] = &#123;l,r,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init_block</span>(); <span class="comment">// 预处理下标所属的块，每块的区间 </span></span><br><span class="line"><span class="built_in">sort</span>(ask+<span class="number">1</span>,ask+m+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="comment">// 回滚莫队 </span></span><br><span class="line"><span class="keyword">int</span> L = <span class="number">1</span>,R = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> lastbk = <span class="number">0</span>;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123; </span><br><span class="line"><span class="keyword">if</span>(belong[ask[i].l] == belong[ask[i].r])&#123; <span class="comment">// 所属同一块的情况暴力处理 </span></span><br><span class="line">LL tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=ask[i].l;j&lt;=ask[i].r;j++)&#123;</span><br><span class="line">cnp[c[j]]++;</span><br><span class="line">tmp = <span class="built_in">max</span>(tmp,cnp[c[j]]*a[j]);</span><br><span class="line">&#125; </span><br><span class="line">ac[ask[i].id] = tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=ask[i].l;j&lt;=ask[i].r;j++)&#123;</span><br><span class="line">cnp[c[j]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(belong[ask[i].l] != lastbk)&#123; <span class="comment">// 询问的左区间 与上一次询问左区间不同时 更新左右指针 </span></span><br><span class="line"><span class="keyword">for</span>(;L&lt;=bkr[belong[ask[i].l]];L++) cnt[c[L]]--; <span class="comment">// L 更新到区块右区间+1 </span></span><br><span class="line"><span class="keyword">for</span>(;R&gt; bkr[belong[ask[i].l]];R--) cnt[c[R]]--; <span class="comment">// R 更新到区块右区间 </span></span><br><span class="line">lastbk = belong[ask[i].l]; <span class="comment">// 更新区块 </span></span><br><span class="line">ans = <span class="number">0</span>; <span class="comment">// 记录ans归零 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 右指针直接右移，因为询问左区间同属于一个块的时，对于右区间排序是按照从小到大 </span></span><br><span class="line"><span class="keyword">while</span>(R &lt; ask[i].r)&#123;</span><br><span class="line">cnt[c[++R]]++;</span><br><span class="line">ans = <span class="built_in">max</span>(ans,cnt[c[R]]*a[R]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 由于询问的左区间同属于一个块，但可能不是有序的，所以临时记录答案，之后左指针得归位 </span></span><br><span class="line">LL tmp = ans;</span><br><span class="line"><span class="keyword">while</span>(L &gt; ask[i].l)&#123;</span><br><span class="line">cnt[c[--L]]++;</span><br><span class="line">tmp = <span class="built_in">max</span>(tmp,cnt[c[L]]*a[L]);</span><br><span class="line">&#125;</span><br><span class="line">ac[ask[i].id] = tmp;</span><br><span class="line"><span class="comment">// 回滚 </span></span><br><span class="line"><span class="keyword">while</span>(L &lt;= bkr[belong[ask[i].l]]) cnt[c[L++]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【带修莫队】洛谷P1903 数颜色 维护队列</title>
      <link href="/2021/05/07/ACM/%E3%80%90%E5%B8%A6%E4%BF%AE%E8%8E%AB%E9%98%9F%E3%80%91%E6%B4%9B%E8%B0%B7P1903%20%E6%95%B0%E9%A2%9C%E8%89%B2%20%E7%BB%B4%E6%8A%A4%E9%98%9F%E5%88%97/"/>
      <url>/2021/05/07/ACM/%E3%80%90%E5%B8%A6%E4%BF%AE%E8%8E%AB%E9%98%9F%E3%80%91%E6%B4%9B%E8%B0%B7P1903%20%E6%95%B0%E9%A2%9C%E8%89%B2%20%E7%BB%B4%E6%8A%A4%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1903" target="_blank">题链</a></p><p>1、 Q L R代表询问你从第L支画笔到第R支画笔中共有几种不同颜色的画笔。</p><p>2、 R P Col 把第P支画笔替换为颜色Col。</p><p>带修改莫队；</p><p>学玩普通莫队再看带修改莫队，<a href="https://oi-wiki.org/misc/modifiable-mo-algo/" target="_blank">OI-wiki</a>上讲的通俗易懂；</p><p>对比主要是这几点：</p><p>1.分块unit = pow(n,2.0/3.0);</p><p>2.对询问排序是先排左区间是否在同一个块，再排右区间，然后是时间</p><p>3.将询问和修改划分成两个数组，莫队将左右指针移动到询问区间过后再考虑修改问题，已知本次询问的time，然后在修改数组上将time之前的修改都跑一遍，其中修改值与被修改值是swap相互替换，因为可能要回退，也就是换回来。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"><span class="keyword">int</span> a[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125;ask[MS];</span><br><span class="line"><span class="keyword">int</span> asknum;</span><br><span class="line"><span class="keyword">int</span> unit;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> pos,tar,id;</span><br><span class="line">&#125;alt[MS];</span><br><span class="line"><span class="keyword">int</span> altnum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> v[MS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ac[MS]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node t1,node t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t1.l/unit != t2.l/unit) <span class="keyword">return</span> t1.l &lt; t2.l;</span><br><span class="line"><span class="keyword">if</span>(t1.r/unit != t2.r/unit) <span class="keyword">return</span> t1.r &lt; t2.r;</span><br><span class="line"><span class="keyword">return</span> t1.id &lt; t2.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">ask[++asknum] = &#123;l,r,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> pos,tar;</span><br><span class="line">cin &gt;&gt; pos &gt;&gt; tar;</span><br><span class="line">alt[++altnum] = &#123;pos,tar,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">unit = <span class="built_in">pow</span>(n,<span class="number">2.0</span>/<span class="number">3.0</span>);</span><br><span class="line"><span class="built_in">sort</span>(ask+<span class="number">1</span>,ask+asknum+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> L = <span class="number">1</span> ,R = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=asknum;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l = ask[i].l;</span><br><span class="line"><span class="keyword">int</span> r = ask[i].r;</span><br><span class="line"><span class="keyword">int</span> id = ask[i].id;</span><br><span class="line"><span class="keyword">while</span>(L &lt; l)&#123;</span><br><span class="line">v[a[L]]--;</span><br><span class="line"><span class="keyword">if</span>(v[a[L]] == <span class="number">0</span>) ans--;</span><br><span class="line">L++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(L &gt; l)&#123;</span><br><span class="line">L--;</span><br><span class="line">v[a[L]]++;</span><br><span class="line"><span class="keyword">if</span>(v[a[L]] == <span class="number">1</span>) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(R &lt; r)&#123;</span><br><span class="line">R++;</span><br><span class="line">v[a[R]]++;</span><br><span class="line"><span class="keyword">if</span>(v[a[R]] == <span class="number">1</span>) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(R &gt; r)&#123;</span><br><span class="line">v[a[R]]--;</span><br><span class="line"><span class="keyword">if</span>(v[a[R]] == <span class="number">0</span>) ans--;</span><br><span class="line">R--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(alt[time+<span class="number">1</span>].id &lt; id &amp;&amp; time+<span class="number">1</span> &lt;= altnum)&#123;</span><br><span class="line">time++;</span><br><span class="line"><span class="keyword">int</span> altpos = alt[time].pos;</span><br><span class="line"><span class="keyword">int</span> alttar = alt[time].tar;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= altpos &amp;&amp; altpos &lt;= R)&#123;</span><br><span class="line">v[a[altpos]]--;</span><br><span class="line"><span class="keyword">if</span>(v[a[altpos]] == <span class="number">0</span>) ans--;</span><br><span class="line"><span class="built_in">swap</span>(a[altpos],alt[time].tar);</span><br><span class="line">v[a[altpos]]++;</span><br><span class="line"><span class="keyword">if</span>(v[a[altpos]] == <span class="number">1</span>) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(a[altpos],alt[time].tar);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(alt[time].id &gt; id)&#123;</span><br><span class="line"><span class="keyword">int</span> altpos = alt[time].pos;</span><br><span class="line"><span class="keyword">int</span> alttar = alt[time].tar;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= altpos &amp;&amp; altpos &lt;= R)&#123;</span><br><span class="line">v[a[altpos]]--;</span><br><span class="line"><span class="keyword">if</span>(v[a[altpos]] == <span class="number">0</span>) ans--;</span><br><span class="line"><span class="built_in">swap</span>(a[altpos],alt[time].tar);</span><br><span class="line">v[a[altpos]]++;</span><br><span class="line"><span class="keyword">if</span>(v[a[altpos]] == <span class="number">1</span>) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(a[altpos],alt[time].tar);</span><br><span class="line">&#125;</span><br><span class="line">time--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ac[ask[i].id] = ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ac[i])&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树状数组】SPOJ D-query</title>
      <link href="/2021/05/07/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E3%80%91SPOJ%20D-query/"/>
      <url>/2021/05/07/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E3%80%91SPOJ%20D-query/</url>
      
        <content type="html"><![CDATA[<h1 id="——"><a href="#——" class="headerlink" title="——-"></a>——-</h1><p><a href="https://vjudge.net/problem/SPOJ-DQUERY" target="_blank">题链</a></p><p>对于每一个a[i]可以记录它上一次出现的位置；</p><p>1.可以用树状数组解（离线）：对询问排序（询问的r从小到大），右指针移动则add(R,1)，然后对a[R]上一次出现的位置add(pos,-1)，对于一个询问则是query(r)-query(l-1)；</p><p>2.可以主席树记录原数组下标方式解（在线）：对于新加入的a[i]，在i这个位置+1，在a[i]上一次出现的位置-1，对于主席树的每一棵树p[root]就是[1,r]的种类数，对于每一个询问[l,r]，就是先得知插入r的版本号root，在这一棵树上求[l,r]的权值和；</p><p>3.可以主席树记录权值（在线）：对于每一个元素a[i]，记录这个元素下一次出现的位置aft[i]，对aft[i]建立主席树，此时问题就变成在[l,r]范围内查找大于r的数字个数。对于新加入的一个aft[i]，新建树链在aft[i]这个权值点++，询问就是普通主席树询问方式；</p><h1 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h1><p>1.可以用树状数组解（离线）：对询问排序（询问的r从小到大），右指针移动则add(R,1)，然后对a[R]上一次出现的位置add(pos,-1)，对于一个询问则是query(r)-query(l-1)；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL pos,l,r;</span><br><span class="line">&#125;cp[MS];</span><br><span class="line">LL ac[MS];</span><br><span class="line">LL a[MS];</span><br><span class="line">LL p[MS];</span><br><span class="line">LL lapos[MS]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LL x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">x = (x&lt;&lt;<span class="number">1</span>) + (x&lt;&lt;<span class="number">3</span>) + (ch^<span class="number">48</span>);</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lowbit</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.r == b.r) <span class="keyword">return</span> a.l &lt; b.l;</span><br><span class="line"><span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL pos,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;pos&lt;=n;pos+=<span class="built_in">lowbit</span>(pos)) p[pos] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(LL pos)</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;pos;pos-=<span class="built_in">lowbit</span>(pos)) ans += p[pos];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line">m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cp[i].l = <span class="built_in">read</span>();</span><br><span class="line">cp[i].r = <span class="built_in">read</span>();</span><br><span class="line">cp[i].pos = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(cp+<span class="number">1</span>,cp+m+<span class="number">1</span>,cmp);</span><br><span class="line">LL apos = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(;apos&lt;=cp[i].r;apos++)&#123;</span><br><span class="line"><span class="keyword">if</span>(lapos[a[apos]])</span><br><span class="line"><span class="built_in">add</span>(lapos[a[apos]],<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">add</span>(apos,<span class="number">1</span>);</span><br><span class="line">lapos[a[apos]] = apos;</span><br><span class="line">&#125;</span><br><span class="line">ac[cp[i].pos] = <span class="built_in">get_sum</span>(cp[i].r) - <span class="built_in">get_sum</span>(cp[i].l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h1><p>2.可以主席树记录原数组下标方式解（在线）：对于新加入的a[i]，在i这个位置+1，在a[i]上一次出现的位置-1，对于主席树的每一棵树p[root]就是[1,r]的种类数，对于每一个询问[l,r]，就是先得知插入r的版本号root，在这一棵树上求[l,r]的权值和；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 20000000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,val;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> a[MS];</span><br><span class="line"><span class="keyword">int</span> pre[MS];</span><br><span class="line"><span class="keyword">int</span> rtpos[MS*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">x = (x&lt;&lt;<span class="number">1</span>) + (x&lt;&lt;<span class="number">3</span>) + (ch^<span class="number">48</span>);</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rt = ++tot;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> rt;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">p[rt].l = <span class="built_in">build</span>(l,m);</span><br><span class="line">p[rt].r = <span class="built_in">build</span>(m+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].val = p[p[rt].l].val + p[p[rt].r].val;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> lart,<span class="keyword">int</span> pos,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rt = ++tot;</span><br><span class="line">p[rt] = p[lart];</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt].val += val;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) p[rt].l = <span class="built_in">update</span>(p[lart].l,pos,l,m,val);</span><br><span class="line"><span class="keyword">else</span> p[rt].r = <span class="built_in">update</span>(p[lart].r,pos,m+<span class="number">1</span>,r,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> p[rt].val;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans += <span class="built_in">query</span>(p[rt].l,L,R,l,m);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans += <span class="built_in">query</span>(p[rt].r,L,R,m+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i] = <span class="built_in">read</span>(); </span><br><span class="line">&#125;</span><br><span class="line">rtpos[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(pre[a[i]] == <span class="number">0</span>)&#123;</span><br><span class="line">rtpos[i] = <span class="built_in">update</span>(rtpos[i<span class="number">-1</span>],i,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="built_in">update</span>(rtpos[i<span class="number">-1</span>],pre[a[i]],<span class="number">1</span>,n,<span class="number">-1</span>);</span><br><span class="line">rtpos[i] = <span class="built_in">update</span>(tmp,i,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">pre[a[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line">m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">l = <span class="built_in">read</span>();</span><br><span class="line">r = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">query</span>(rtpos[r],l,r,<span class="number">1</span>,n));</span><br><span class="line"><span class="comment">//cout &lt;&lt; query(rtpos[r],l,r,1,n) &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h1><p>3.可以主席树记录权值（在线）：对于每一个元素a[i]，记录这个元素下一次出现的位置aft[i]，对aft[i]建立主席树，此时问题就变成在[l,r]范围内查找大于r的数字个数。对于新加入的一个aft[i]，新建树链在aft[i]这个权值点++，询问就是普通主席树询问方式；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 20000000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,val;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> a[MS];</span><br><span class="line"><span class="keyword">int</span> aft[MS];</span><br><span class="line"><span class="keyword">int</span> pre[MS];</span><br><span class="line"><span class="keyword">int</span> rtpos[MS];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rt = ++tot;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> rt;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">p[rt].l = <span class="built_in">build</span>(l,m);</span><br><span class="line">p[rt].r = <span class="built_in">build</span>(m+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].val = p[p[rt].l].val + p[p[rt].r].val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> lart,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rt = ++tot;</span><br><span class="line">p[rt] = p[lart];</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt].val++;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos &lt;= m) p[rt].l = <span class="built_in">update</span>(p[lart].l,l,m,pos);</span><br><span class="line"><span class="keyword">else</span> p[rt].r = <span class="built_in">update</span>(p[lart].r,m+<span class="number">1</span>,r,pos);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> tar)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> p[R].val-p[L].val;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tar &lt;= m)&#123;</span><br><span class="line"><span class="keyword">int</span> x = p[p[R].r].val - p[p[L].r].val;</span><br><span class="line">ans += x + <span class="built_in">query</span>(p[L].l,p[R].l,l,m,tar);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans += <span class="built_in">query</span>(p[L].r,p[R].r,m+<span class="number">1</span>,r,tar);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">if</span>(pre[a[i]]) aft[pre[a[i]]] = i;</span><br><span class="line">pre[a[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!aft[i]) aft[i] = n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rtpos[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>,n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">rtpos[i] = <span class="built_in">update</span>(rtpos[i<span class="number">-1</span>],<span class="number">1</span>,n+<span class="number">1</span>,aft[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">cout &lt;&lt; <span class="built_in">query</span>(rtpos[l<span class="number">-1</span>],rtpos[r],<span class="number">1</span>,n+<span class="number">1</span>,r+<span class="number">1</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树状数组 莫队】2019CCPC湖南全国邀请赛 C - Chika and Friendly Pairs</title>
      <link href="/2021/05/06/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%20%E8%8E%AB%E9%98%9F%E3%80%912019CCPC%E6%B9%96%E5%8D%97%E5%85%A8%E5%9B%BD%E9%82%80%E8%AF%B7%E8%B5%9B%20C%20-%20Chika%20and%20Friendly%20Pairs/"/>
      <url>/2021/05/06/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%20%E8%8E%AB%E9%98%9F%E3%80%912019CCPC%E6%B9%96%E5%8D%97%E5%85%A8%E5%9B%BD%E9%82%80%E8%AF%B7%E8%B5%9B%20C%20-%20Chika%20and%20Friendly%20Pairs/</url>
      
        <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6534" target="_blank">题链</a></p><p>给你一个长度为n的序列，有m次查询操作，每次查询[L,R]区间的友好对的个数。</p><p>友好对的定义：满足i &lt; j,且|ai-aj|&lt;=K。</p><p>考虑每添加一个元素，计算该元素范围内[x-k,x+k]有多少个数（对树状数组来一发询问即可 query(r) - query(l-1) ），加上该贡献；</p><p>离散所给数组，将a[i]-k和a[i]+k也加入，也离散；</p><p>用树状数组以及莫队解决</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 27009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 20000000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL p[MS*<span class="number">3</span>]; </span><br><span class="line">LL a[MS];</span><br><span class="line">LL b[MS*<span class="number">3</span>],tb;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,id;</span><br><span class="line">&#125;ask[MS];</span><br><span class="line">LL unit;</span><br><span class="line">LL ac[MS];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> pos,posl,posr;</span><br><span class="line">&#125;apos[MS];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lowbit</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node t1,node t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t1.l/unit == t2.l/unit) <span class="keyword">return</span> t1.r &lt; t2.r;</span><br><span class="line"><span class="keyword">return</span> t1.l/unit &lt; t2.l/unit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getposb</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">lower_bound</span>(b+<span class="number">1</span>,b+tb+<span class="number">1</span>,x)-b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> pos,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;pos&lt;=tb;pos+=<span class="built_in">lowbit</span>(pos)) p[pos] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">getnum</span><span class="params">(<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">LL ansl = <span class="number">0</span>;</span><br><span class="line">LL ansr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> posl = apos[pos].posl<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> posr = apos[pos].posr;</span><br><span class="line"><span class="keyword">for</span>(;posl&gt;<span class="number">0</span>;posl-=<span class="built_in">lowbit</span>(posl)) ansl += p[posl];</span><br><span class="line"><span class="keyword">for</span>(;posr&gt;<span class="number">0</span>;posr-=<span class="built_in">lowbit</span>(posr)) ansr += p[posr];</span><br><span class="line"><span class="keyword">return</span> ansr - ansl - <span class="number">1ll</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">b[++tb] = a[i];</span><br><span class="line"><span class="keyword">if</span>(a[i]-k&gt;<span class="number">0</span>) b[++tb] = a[i]-k;</span><br><span class="line">b[++tb] = a[i]+k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b+<span class="number">1</span>,b+tb+<span class="number">1</span>);</span><br><span class="line">LL h = tb;</span><br><span class="line">tb = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=h;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] != b[i<span class="number">-1</span>]) b[++tb] = b[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="built_in">getposb</span>(a[i]);</span><br><span class="line"><span class="keyword">int</span> posl = <span class="built_in">getposb</span>(a[i]-k);</span><br><span class="line"><span class="keyword">int</span> posr = <span class="built_in">getposb</span>(a[i]+k);</span><br><span class="line">apos[i] = &#123;pos,posl,posr&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">ask[i] = &#123;l,r,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line">unit = <span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="built_in">sort</span>(ask+<span class="number">1</span>,ask+m+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> L = <span class="number">1</span>,R = <span class="number">0</span>;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l = ask[i].l;</span><br><span class="line"><span class="keyword">int</span> r = ask[i].r;</span><br><span class="line"><span class="keyword">while</span>(L &lt; l)&#123;</span><br><span class="line">ans -= <span class="built_in">getnum</span>(L);</span><br><span class="line"><span class="built_in">add</span>(apos[L].pos,<span class="number">-1</span>);</span><br><span class="line">L++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(L &gt; l)&#123;</span><br><span class="line">L--;</span><br><span class="line"><span class="built_in">add</span>(apos[L].pos,<span class="number">1</span>);</span><br><span class="line">ans += <span class="built_in">getnum</span>(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(R &lt; r)&#123;</span><br><span class="line">R++;</span><br><span class="line"><span class="built_in">add</span>(apos[R].pos,<span class="number">1</span>);</span><br><span class="line">ans += <span class="built_in">getnum</span>(R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(R &gt; r)&#123;</span><br><span class="line">ans -= <span class="built_in">getnum</span>(R);</span><br><span class="line"><span class="built_in">add</span>(apos[R].pos,<span class="number">-1</span>);</span><br><span class="line">R--;</span><br><span class="line">&#125;</span><br><span class="line">ac[ask[i].id] = ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莫队 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【最小生成树】洛谷 P3366 【模板】最小生成树</title>
      <link href="/2021/04/15/ACM/%E3%80%90%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3366%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2021/04/15/ACM/%E3%80%90%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3366%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3366" target="_blank">题链</a></p><h2 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 200009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,val;</span><br><span class="line">&#125;p[MS];</span><br><span class="line"><span class="keyword">int</span> fa[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">fa[<span class="built_in">find</span>(y)] = <span class="built_in">find</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node t1,node t2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t1.val &lt; t2.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin &gt;&gt; p[i].u &gt;&gt; p[i].v &gt;&gt; p[i].val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(p+<span class="number">1</span>,p+m+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(p[i].u) != <span class="built_in">find</span>(p[i].v))&#123;</span><br><span class="line"><span class="built_in">merge</span>(p[i].u,p[i].v);</span><br><span class="line">ans += p[i].val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(i) != <span class="built_in">find</span>(<span class="number">1</span>)) flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;orz\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 5009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,val;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node &gt; vc[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> poi,val;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;nod &gt; Q;</span><br><span class="line"><span class="keyword">int</span> dis[MS];</span><br><span class="line"><span class="keyword">int</span> v[MS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (nod t1,nod t2)&#123;</span><br><span class="line"><span class="keyword">return</span> t1.val &gt; t2.val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(&#123;v,w&#125;);</span><br><span class="line">vc[v].<span class="built_in">push_back</span>(&#123;u,w&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i] = MAXN;</span><br><span class="line">dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">Q.<span class="built_in">push</span>(&#123;<span class="number">1</span>,<span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">nod x = Q.<span class="built_in">top</span>();</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(v[x.poi]) <span class="keyword">continue</span>;</span><br><span class="line">v[x.poi] = <span class="number">1</span>;</span><br><span class="line">ans += x.val; <span class="comment">// 答案 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it:vc[x.poi])&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[it.to] &gt; it.val)&#123; <span class="comment">// 相比 Dijkstra 少了源点到 x.poi 的距离 </span></span><br><span class="line">dis[it.to] = it.val;</span><br><span class="line"><span class="keyword">if</span>(!v[it.to])&#123;</span><br><span class="line">Q.<span class="built_in">push</span>(&#123;it.to,dis[it.to]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【最短路】洛谷 P1346 电车</title>
      <link href="/2021/04/15/ACM/%E3%80%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E3%80%91%E6%B4%9B%E8%B0%B7%20P1346%20%E7%94%B5%E8%BD%A6/"/>
      <url>/2021/04/15/ACM/%E3%80%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E3%80%91%E6%B4%9B%E8%B0%B7%20P1346%20%E7%94%B5%E8%BD%A6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1346" target="_blank">题链</a></p><p>floyd</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 0x3f3f3f3f</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> st,ed;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">109</span>][<span class="number">109</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; st &gt;&gt; ed;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line">p[i][j] = MAXN;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) p[i][i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span>(j == <span class="number">1</span>) p[i][x] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> p[i][x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line">p[i][j] = <span class="built_in">min</span>(p[i][j],p[i][k]+p[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(p[st][ed] == MAXN) cout &lt;&lt; <span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; p[st][ed] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【最短路】洛谷 P4779 【模板】单源最短路径（标准版）</title>
      <link href="/2021/04/15/ACM/%E3%80%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E3%80%91%E6%B4%9B%E8%B0%B7%20P4779%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%EF%BC%88%E6%A0%87%E5%87%86%E7%89%88%EF%BC%89/"/>
      <url>/2021/04/15/ACM/%E3%80%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E3%80%91%E6%B4%9B%E8%B0%B7%20P4779%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%EF%BC%88%E6%A0%87%E5%87%86%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4779" target="_blank">题链</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2147483647</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> st;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,val;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node &gt; vc[MS];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> poi,val;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;nod &gt; Q;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (nod t1,nod t2)&#123;</span><br><span class="line"><span class="keyword">return</span> t1.val &gt; t2.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dis[MS];</span><br><span class="line"><span class="keyword">bool</span> v[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 除了源点，其余初值为 MAXN </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">v[i] = <span class="number">0</span>;</span><br><span class="line">dis[i] = MAXN;</span><br><span class="line">&#125; </span><br><span class="line">dis[st] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">Q.<span class="built_in">push</span>(&#123;st,<span class="number">0</span>&#125;);</span><br><span class="line"><span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123; <span class="comment">// 选定权值最小的点，松弛其指向的点 </span></span><br><span class="line">nod x = Q.<span class="built_in">top</span>();</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(v[x.poi]) <span class="keyword">continue</span>; </span><br><span class="line">v[x.poi] = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it:vc[x.poi])&#123; <span class="comment">//松弛 </span></span><br><span class="line"><span class="keyword">if</span>(dis[it.to] &gt; dis[x.poi] + it.val)&#123;</span><br><span class="line">dis[it.to] = dis[x.poi] + it.val;</span><br><span class="line"><span class="keyword">if</span>(!v[it.to])&#123; <span class="comment">// 未被访问 </span></span><br><span class="line">Q.<span class="built_in">push</span>(&#123;it.to,dis[it.to]&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; st;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(&#123;v,w&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dijkstra</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout &lt;&lt; dis[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【最短路】洛谷 P3371 【模板】单源最短路径（弱化版）</title>
      <link href="/2021/04/15/ACM/%E3%80%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E3%80%91%E6%B4%9B%E8%B0%B7%20P3371%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%EF%BC%88%E5%BC%B1%E5%8C%96%E7%89%88%EF%BC%89/"/>
      <url>/2021/04/15/ACM/%E3%80%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E3%80%91%E6%B4%9B%E8%B0%B7%20P3371%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%EF%BC%88%E5%BC%B1%E5%8C%96%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3371" target="_blank">题链</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 10009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 2147483647</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> st;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,val;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;node &gt; vc[MS];</span><br><span class="line"><span class="keyword">int</span> dis[MS];</span><br><span class="line"><span class="keyword">bool</span> v[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 除了源点，其余初值为 MAXN </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">v[i] = <span class="number">0</span>;</span><br><span class="line">dis[i] = MAXN;</span><br><span class="line">&#125; </span><br><span class="line">dis[st] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!v[st])&#123;</span><br><span class="line"><span class="keyword">int</span> minn = MAXN;</span><br><span class="line">v[st] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:vc[st])&#123; <span class="comment">// 松弛 </span></span><br><span class="line"><span class="keyword">if</span>(!v[i.to] &amp;&amp; dis[st]+i.val &lt; dis[i.to])&#123;</span><br><span class="line">dis[i.to] = dis[st] + i.val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123; <span class="comment">// 取未被访问的最近的点 </span></span><br><span class="line"><span class="keyword">if</span>(!v[i] &amp;&amp; dis[i] &lt; minn)&#123;</span><br><span class="line">minn = dis[i];</span><br><span class="line">st = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; st;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">vc[u].<span class="built_in">push_back</span>(&#123;v,w&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dijkstra</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout &lt;&lt; dis[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【主席树】2021 ICPC 昆明 M.Stone Games</title>
      <link href="/2021/04/12/ACM/%E3%80%90%E4%B8%BB%E5%B8%AD%E6%A0%91%E3%80%912021%20ICPC%20%E6%98%86%E6%98%8E%20M.Stone%20Games/"/>
      <url>/2021/04/12/ACM/%E3%80%90%E4%B8%BB%E5%B8%AD%E6%A0%91%E3%80%912021%20ICPC%20%E6%98%86%E6%98%8E%20M.Stone%20Games/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img2020.cnblogs.com/blog/2062718/202104/2062718-20210412181419317-790440584.png"></p><p><img src="https://img2020.cnblogs.com/blog/2062718/202104/2062718-20210412181434210-69591723.png"></p><p><img src="https://img2020.cnblogs.com/blog/2062718/202104/2062718-20210412181643354-526938537.png"></p><p>答案是对着这段区间 [L,R] 不断询问直到不存在 x+1 得来的；</p><p>例如一个区间有为 1，2，4，4；</p><p>首先询问 1，发现存在 1，ans = 1；</p><p>然后询问 ans+1 = 2，发现存在 2，则 [1,3] 都能凑出，ans = 3；</p><p>接着询问 ans+1 = 4，发现存在两个 4，则 [1,11] 都能凑出，ans = 11；</p><p>实际上 “发现存在” 这一步操作就是查找区间 [1,ans+1] 的和 sum 为多少，然后更新 ans = sum；</p><p>答案就是 ++ans；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> rtpos[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">LL val;</span><br><span class="line">&#125;p[MS*<span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].val = p[p[rt].l].val + p[p[rt].r].val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> lart,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rt = ++tot;</span><br><span class="line">p[rt] = p[lart];</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">p[rt].val += pos;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) p[rt].l = <span class="built_in">update</span>(p[lart].l,l,m,pos);</span><br><span class="line"><span class="keyword">else</span> p[rt].r = <span class="built_in">update</span>(p[lart].r,m+<span class="number">1</span>,r,pos);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL tar)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> p[R].val - p[L].val;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= tar) <span class="keyword">return</span> <span class="built_in">getsum</span>(p[L].l,p[R].l,l,m,tar);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> p[p[R].l].val - p[p[L].l].val + <span class="built_in">getsum</span>(p[L].r,p[R].r,m+<span class="number">1</span>,r,tar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">rtpos[i] = <span class="built_in">update</span>(rtpos[i<span class="number">-1</span>],<span class="number">1</span>,MAXN,x);</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> L,R;</span><br><span class="line">cin &gt;&gt; L &gt;&gt; R;</span><br><span class="line">L = (L+ans)%n+<span class="number">1</span>;</span><br><span class="line">R = (R+ans)%n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(L &gt; R) <span class="built_in">swap</span>(L,R);</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">LL tmp = <span class="built_in">getsum</span>(rtpos[L<span class="number">-1</span>],rtpos[R],<span class="number">1</span>,MAXN,ans+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(tmp == ans) <span class="keyword">break</span>;</span><br><span class="line">ans = tmp;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ++ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【主席树】洛谷 P2468 粟粟的书架</title>
      <link href="/2021/04/12/ACM/%E3%80%90%E4%B8%BB%E5%B8%AD%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P2468%20%E7%B2%9F%E7%B2%9F%E7%9A%84%E4%B9%A6%E6%9E%B6/"/>
      <url>/2021/04/12/ACM/%E3%80%90%E4%B8%BB%E5%B8%AD%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P2468%20%E7%B2%9F%E7%B2%9F%E7%9A%84%E4%B9%A6%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2468" target="_blank">题链</a></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="前50-的数据"><a href="#前50-的数据" class="headerlink" title="前50%的数据"></a>前50%的数据</h2><p>val[i][j][k] 表示 [1,1]<del>[i,j] 大于等于 k 的值 的总和；<br>size[i][j][k] 表示 [1,1]</del>[i,j] 大于等于 k 的值 的个数；<br>在 [1,1000] 之内二分查找；</p><h2 id="后50-的数据"><a href="#后50-的数据" class="headerlink" title="后50%的数据"></a>后50%的数据</h2><p>建立主席树（可持久化权值线段树），节点信息除了左右子节点还有 区间个数size 与 区间和val;<br>当插入一个值 pos 时，递归到末节点，size++，val+=pos；</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>若所给数字都是没有重复的，那查找就很好做；<br>但是题目说明有重复，假设题给目标值 tar，应当查找在所给区间从大到小选择数字，一选就是一打（一打意思就是选择一个数字 num，无论 num 有几个都选上），选择直到刚刚好小于目标值，再选一个就超过目标值了；<br>记录现在已经选的数字总和 sum，数字个数 size，最小数字 minn 和 再选择一个数字 num 就超过题给目标值；<br>由于 num 可能不止一个，所以得一次次选择 num 直到达到目标值；  </p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 500009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 20000009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> rtpos[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line">&#125;p[MS*<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].size = p[p[rt].l].size + p[p[rt].r].size;</span><br><span class="line">p[rt].val = p[p[rt].l].val + p[p[rt].r].val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rt = ++tot;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">p[rt].l = <span class="built_in">build</span>(l,m);</span><br><span class="line">p[rt].r = <span class="built_in">build</span>(m+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> lart,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rt = ++tot;</span><br><span class="line">p[rt] = p[lart];</span><br><span class="line"><span class="keyword">if</span>(l == r &amp;&amp; l == pos)&#123;</span><br><span class="line">p[rt].size++;</span><br><span class="line">p[rt].val += pos;</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) p[rt].l = <span class="built_in">update</span>(p[lart].l,l,m,pos);</span><br><span class="line"><span class="keyword">else</span> p[rt].r = <span class="built_in">update</span>(p[lart].r,m+<span class="number">1</span>,r,pos);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCnt</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> tar)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line"><span class="keyword">if</span>(tar &gt; <span class="number">0</span>) <span class="keyword">return</span> (tar<span class="number">-1</span>)/l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = p[p[R].r].val - p[p[L].r].val;</span><br><span class="line"><span class="keyword">int</span> y = p[p[R].r].size - p[p[L].r].size;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= tar) <span class="keyword">return</span> <span class="built_in">getCnt</span>(p[L].r,p[R].r,m+<span class="number">1</span>,r,tar);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> y + <span class="built_in">getCnt</span>(p[L].l,p[R].l,l,m,tar-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve1</span><span class="params">()</span></span>&#123;</span><br><span class="line">rtpos[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">rtpos[i] = <span class="built_in">update</span>(rtpos[i<span class="number">-1</span>],<span class="number">1</span>,<span class="number">1000</span>,x);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line"><span class="keyword">int</span> L,R;</span><br><span class="line"><span class="keyword">int</span> tar;</span><br><span class="line">cin &gt;&gt; L &gt;&gt; L &gt;&gt; R &gt;&gt; R &gt;&gt; tar;</span><br><span class="line">L = rtpos[L<span class="number">-1</span>];</span><br><span class="line">R = rtpos[R];</span><br><span class="line"><span class="keyword">if</span>(p[R].val - p[L].val &lt; tar) cout &lt;&lt; <span class="string">&quot;Poor QLW\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="built_in">getCnt</span>(L,R,<span class="number">1</span>,<span class="number">1000</span>,tar) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">209</span>][<span class="number">209</span>];</span><br><span class="line"><span class="keyword">int</span> val[<span class="number">209</span>][<span class="number">209</span>][<span class="number">1009</span>];</span><br><span class="line"><span class="keyword">int</span> size[<span class="number">209</span>][<span class="number">209</span>][<span class="number">1009</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> o=<span class="number">1</span>;o&lt;=<span class="number">1000</span>;o++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">val[i][j][o] = val[i<span class="number">-1</span>][j][o]+val[i][j<span class="number">-1</span>][o]-val[i<span class="number">-1</span>][j<span class="number">-1</span>][o];</span><br><span class="line">val[i][j][o] += (a[i][j] &gt;= o? a[i][j] : <span class="number">0</span>);</span><br><span class="line">size[i][j][o] = size[i<span class="number">-1</span>][j][o]+size[i][j<span class="number">-1</span>][o]-size[i<span class="number">-1</span>][j<span class="number">-1</span>][o];</span><br><span class="line">size[i][j][o] += (a[i][j] &gt;= o? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line"><span class="keyword">int</span> l1,r1,l2,r2;</span><br><span class="line"><span class="keyword">int</span> tar;</span><br><span class="line">cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2 &gt;&gt; tar;</span><br><span class="line"><span class="keyword">int</span> sumlr = val[l2][r2][<span class="number">1</span>]-val[l1<span class="number">-1</span>][r2][<span class="number">1</span>]-val[l2][r1<span class="number">-1</span>][<span class="number">1</span>]+val[l1<span class="number">-1</span>][r1<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(sumlr &lt; tar)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Poor QLW\n&quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">1001</span>;</span><br><span class="line"><span class="keyword">int</span> ansval,anssize;</span><br><span class="line"><span class="keyword">int</span> sumval;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> x = val[l2][r2][mid]-val[l1<span class="number">-1</span>][r2][mid]-val[l2][r1<span class="number">-1</span>][mid]+val[l1<span class="number">-1</span>][r1<span class="number">-1</span>][mid];</span><br><span class="line"><span class="keyword">int</span> y = size[l2][r2][mid]-size[l1<span class="number">-1</span>][r2][mid]-size[l2][r1<span class="number">-1</span>][mid]+size[l1<span class="number">-1</span>][r1<span class="number">-1</span>][mid];</span><br><span class="line"><span class="keyword">if</span>(x &gt;= tar) l = mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">sumval = x;</span><br><span class="line">ansval = mid;</span><br><span class="line">anssize = y;</span><br><span class="line">r = mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">anssize += (tar-sumval<span class="number">-1</span>)/(ansval<span class="number">-1</span>)+<span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; anssize &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>) <span class="built_in">solve1</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">solve2</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【权值线段树】洛谷 P3369 【模板】普通平衡树</title>
      <link href="/2021/04/11/ACM/%E3%80%90%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3369%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%99%AE%E9%80%9A%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
      <url>/2021/04/11/ACM/%E3%80%90%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3369%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%99%AE%E9%80%9A%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>本题使用动态开点权值线段树…</p><p>数据范围是 [-1e7,1e7] ，所以将其 +(1e7+1) 让范围映射到 [1,2e7+1] ,这样就在 [1,2e7+1] 构建权值线段树，记 2e7+1 为 MAXN；</p><p>先考虑前面 4 种操作</p><p>插入和删除操作就是在线段树的叶子节点（递归的最底层）的位置 +-1，表示该点的个数，向上 push_up 维护区间 [L,R] 拥有的数字个数</p><p>根据所给数字，这里记作tar，求排名：就是求区间 [1,tar-1] 有多少个数字，求出来要记得 +1，因为是 tar 的排名</p><p>根据排名求数字，可以通过二分数字，对于每一个数字求排名，这样就可以用到步骤三写的函数</p><p>找前驱后继，这里记 tar 为所要找的数字：</p><p>  除了以上维护的区间数字个数 cnt，再维护两个信息区间最大值 maxn 和区间最小值 minn</p><p>  找前驱就是 [1,tar-1] 找一个最大值，找后继就是 [tar+1,MAXN] 找一个最小值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 20000009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">int</span> maxn,minn;</span><br><span class="line">&#125;p[MS*<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> &amp;rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p[rt].l &amp;&amp; !p[rt].r)&#123; <span class="comment">// 无左右子节点，删除本节点 </span></span><br><span class="line">rt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!p[rt].l)&#123; <span class="comment">// 无左节点 </span></span><br><span class="line">p[rt].maxn = p[p[rt].r].maxn;</span><br><span class="line">p[rt].minn = p[p[rt].r].minn;</span><br><span class="line">p[rt].cnt = p[p[rt].r].cnt;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!p[rt].r)&#123; <span class="comment">// 无右节点 </span></span><br><span class="line">p[rt].maxn = p[p[rt].l].maxn;</span><br><span class="line">p[rt].minn = p[p[rt].l].minn;</span><br><span class="line">p[rt].cnt = p[p[rt].l].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">// 左右节点都存在  </span></span><br><span class="line">p[rt].maxn = <span class="built_in">max</span>(p[p[rt].l].maxn,p[p[rt].r].maxn);</span><br><span class="line">p[rt].minn = <span class="built_in">min</span>(p[p[rt].l].minn,p[p[rt].r].minn);</span><br><span class="line">p[rt].cnt = p[p[rt].l].cnt + p[p[rt].r].cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!rt) rt = ++tot; <span class="comment">// 动态开点 </span></span><br><span class="line"><span class="keyword">if</span>(l == r &amp;&amp; l == pos)&#123; </span><br><span class="line">p[rt].cnt += val; <span class="comment">// val对应 +-1 表示插入或删除 </span></span><br><span class="line"><span class="keyword">if</span>(p[rt].cnt &gt; <span class="number">0</span>) <span class="comment">// 本节点存在值 </span></span><br><span class="line">p[rt].maxn = p[rt].minn = l;</span><br><span class="line"><span class="keyword">else</span> rt = <span class="number">0</span>; <span class="comment">// 删除  </span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) <span class="built_in">update</span>(p[rt].l,l,m,pos,val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(p[rt].r,m+<span class="number">1</span>,r,pos,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getRank</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123; <span class="comment">// 其实就是求 [L,R] 存在的节点总和 </span></span><br><span class="line"><span class="keyword">if</span>(!rt) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 不存在该节点 </span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans += <span class="built_in">getRank</span>(L,R,l,m,p[rt].l);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans += <span class="built_in">getRank</span>(L,R,m+<span class="number">1</span>,r,p[rt].r);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFront</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123; <span class="comment">// 就是求 [L,R] 最大值 </span></span><br><span class="line"><span class="keyword">if</span>(!rt) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 不存在该节点 </span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt].maxn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans = <span class="built_in">max</span>(ans,<span class="built_in">getFront</span>(L,R,l,m,p[rt].l)); </span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans = <span class="built_in">max</span>(ans,<span class="built_in">getFront</span>(L,R,m+<span class="number">1</span>,r,p[rt].r));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLater</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123; <span class="comment">//  就是求 [L,R] 最小值 </span></span><br><span class="line"><span class="keyword">if</span>(!rt) <span class="keyword">return</span> MAXN; <span class="comment">// 不存在该节点 </span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt].minn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = MAXN;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans = <span class="built_in">min</span>(ans,<span class="built_in">getLater</span>(L,R,l,m,p[rt].l));</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans = <span class="built_in">min</span>(ans,<span class="built_in">getLater</span>(L,R,m+<span class="number">1</span>,r,p[rt].r));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="keyword">int</span> op,tar,rank;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; tar;</span><br><span class="line">rank = tar;</span><br><span class="line">tar += <span class="number">10000001</span>; <span class="comment">// [1,2e7+1]</span></span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">update</span>(root,<span class="number">1</span>,MAXN,tar,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">update</span>(root,<span class="number">1</span>,MAXN,tar,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(tar == <span class="number">1</span>) cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="built_in">getRank</span>(<span class="number">1</span>,tar<span class="number">-1</span>,<span class="number">1</span>,MAXN,root)+<span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=<span class="number">20000001</span>;</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="built_in">getRank</span>(<span class="number">1</span>,mid,<span class="number">1</span>,MAXN,root);</span><br><span class="line"><span class="keyword">if</span>(num &gt;= rank) ans = mid ,r = mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans<span class="number">-10000001</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">5</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="built_in">getFront</span>(<span class="number">1</span>,tar<span class="number">-1</span>,<span class="number">1</span>,MAXN,root);</span><br><span class="line">cout &lt;&lt; ans<span class="number">-10000001</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">6</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="built_in">getLater</span>(tar+<span class="number">1</span>,MAXN,<span class="number">1</span>,MAXN,root);</span><br><span class="line">cout &lt;&lt; ans<span class="number">-10000001</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关于各函数调用： </span></span><br><span class="line"><span class="comment">// rt位置，一定要填 root，而不是单纯的 1；</span></span><br><span class="line"><span class="comment">// 因为当一个数插入又删除导致整棵树为空后，再次插入时树根节点不再是 1 </span></span><br><span class="line"><span class="comment">// 相当于之前的空树都不要了； </span></span><br><span class="line"><span class="comment">// root 始终指向线段树的根节点；</span></span><br><span class="line"><span class="comment">// 每一次树空了 root就会变化； </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input： </span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">1 9508226</span></span><br><span class="line"><span class="comment">1 -9775935</span></span><br><span class="line"><span class="comment">2 9508226</span></span><br><span class="line"><span class="comment">2 -9775935</span></span><br><span class="line"><span class="comment">1 -6414629</span></span><br><span class="line"><span class="comment">3 -6414629</span></span><br><span class="line"><span class="comment">2 -6414629</span></span><br><span class="line"><span class="comment">1 -1847925</span></span><br><span class="line"><span class="comment">5 3248500</span></span><br><span class="line"><span class="comment">2 -1847925</span></span><br><span class="line"><span class="comment">1 -2757289</span></span><br><span class="line"><span class="comment">1 -7942063</span></span><br><span class="line"><span class="comment">1 -5545399</span></span><br><span class="line"><span class="comment">2 -7942063</span></span><br><span class="line"><span class="comment">1 6169408</span></span><br><span class="line"><span class="comment">5 -648755</span></span><br><span class="line"><span class="comment">1 -275474</span></span><br><span class="line"><span class="comment">1 -9836404</span></span><br><span class="line"><span class="comment">1 -3389358</span></span><br><span class="line"><span class="comment">1 -8467606</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output：</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">-1847925</span></span><br><span class="line"><span class="comment">-2757289</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【权值线段树】求逆序对</title>
      <link href="/2021/04/11/ACM/%E3%80%90%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B1%82%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
      <url>/2021/04/11/ACM/%E3%80%90%E6%9D%83%E5%80%BC%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B1%82%E9%80%86%E5%BA%8F%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[<p>普通线段树是预先处理出值域的范围。像二叉树一样建树，有时通过将所给序列离线离散化以减小普通线段树的值域。</p><p>当所给序列不允许离线而且值域比较大时，动态开点线段树可以 O(nlogm) 维护线段树，m 是值域，假象一开始有一颗 [1,m] 的线段树，当然是不去建它的。</p><p>对于普通线段树都有修改操作，则如将 a[x] 加上 val，x 对应原数组下标，就去递归这颗 [1,m] 的线段树直到下标 x，只有递归过程中碰到未建立的节点就新建节点。</p><p>例如求逆序对：</p><p><a href="https://www.luogu.com.cn/problem/P1908" target="_blank">题链</a></p><p>一步步遍历所给序列 a[x]，将 [1,m] 的线段树第 x 位上加上 1，然后 push_up，每一步都求当前 a[x] 前面有几个比 a[x] 大的，相当于求线段树上 [ a[x]+1,m ]（m是值域）的和，递归求解就好。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 500009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000000009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">LL sum;</span><br><span class="line">&#125;p[MS*<span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> a[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].sum = p[p[rt].l].sum + p[p[rt].r].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!rt) rt = ++tot;</span><br><span class="line"><span class="keyword">if</span>(l == r &amp;&amp; l == pos)&#123;</span><br><span class="line">p[rt].sum++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) <span class="built_in">update</span>(p[rt].l,l,m,pos);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(p[rt].r,m+<span class="number">1</span>,r,pos);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans += <span class="built_in">get_sum</span>(L,R,l,m,p[rt].l);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans += <span class="built_in">get_sum</span>(L,R,m+<span class="number">1</span>,r,p[rt].r);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line"><span class="built_in">update</span>(root,<span class="number">1</span>,MAXN,a[i]);</span><br><span class="line">ans += <span class="built_in">get_sum</span>(a[i]+<span class="number">1</span>,MAXN,<span class="number">1</span>,MAXN,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【优先队列】洛谷 P2827 蚯蚓</title>
      <link href="/2021/03/31/ACM/%E3%80%90%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E3%80%91%E6%B4%9B%E8%B0%B7%20P2827%20%E8%9A%AF%E8%9A%93/"/>
      <url>/2021/03/31/ACM/%E3%80%90%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E3%80%91%E6%B4%9B%E8%B0%B7%20P2827%20%E8%9A%AF%E8%9A%93/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2827" target="_blank">题链</a></p><p>最长的蚯蚓被砍两截之后，其余的蚯蚓长度会增加，与其加其余蚯蚓不如对这两只蚯蚓操作，可定义一个buff表示其余蚯蚓需要增加多少长度，当拿出最长的那只蚯蚓时，就需要加上buff，当然被剪断的变成两条就需要减去当前buff再压入队列，保证下次拿出来时加上buff是应有的长度；</p><p>一个队列存原数组，另外两个队列分别存砍断的蚯蚓的两部分，可知这两个队列是递减的，所以普通队列就行；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//#include&lt;ext/rope&gt;</span></span><br><span class="line"><span class="comment">//using namespace __gnu_cxx;</span></span><br><span class="line"><span class="comment">//#include &lt;ext/pb_ds/priority_queue.hpp&gt;</span></span><br><span class="line"><span class="comment">//using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 7000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod1 39989</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod2 1000000000</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL ac[MS];</span><br><span class="line">LL p[MS];</span><br><span class="line">priority_queue&lt;LL,vector&lt;LL&gt;,less&lt;LL&gt; &gt; QQ;</span><br><span class="line">queue&lt;LL&gt; Q[<span class="number">3</span>];</span><br><span class="line">stack&lt;LL &gt; sta;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">which</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q[<span class="number">1</span>].<span class="built_in">empty</span>() &amp;&amp; Q[<span class="number">2</span>].<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!Q[<span class="number">0</span>].<span class="built_in">empty</span>() &amp;&amp; Q[<span class="number">0</span>].<span class="built_in">front</span>() &gt;= <span class="built_in">max</span>(Q[<span class="number">2</span>].<span class="built_in">front</span>(),Q[<span class="number">1</span>].<span class="built_in">front</span>())) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Q[<span class="number">1</span>].<span class="built_in">front</span>() &gt;= Q[<span class="number">2</span>].<span class="built_in">front</span>()) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">LL num,u,v,t;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; num &gt;&gt; u &gt;&gt; v &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">Q[<span class="number">0</span>].<span class="built_in">push</span>(p[i]);</span><br><span class="line">&#125;</span><br><span class="line">LL buff = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> wh = <span class="built_in">which</span>();</span><br><span class="line">ac[i] = Q[wh].<span class="built_in">front</span>()+buff;</span><br><span class="line">LL t1 = ac[i]*u/v;</span><br><span class="line">LL t2 = ac[i]-t1;</span><br><span class="line">Q[wh].<span class="built_in">pop</span>();</span><br><span class="line">buff += num;</span><br><span class="line">Q[<span class="number">1</span>].<span class="built_in">push</span>(t2-buff);</span><br><span class="line">Q[<span class="number">2</span>].<span class="built_in">push</span>(t1-buff);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%t == <span class="number">0</span>) cout &lt;&lt; ac[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)</span><br><span class="line"><span class="keyword">while</span>(!Q[i].<span class="built_in">empty</span>())&#123;</span><br><span class="line">QQ.<span class="built_in">push</span>(Q[i].<span class="built_in">front</span>());</span><br><span class="line">Q[i].<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;!QQ.<span class="built_in">empty</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i%t == <span class="number">0</span>) cout &lt;&lt; QQ.<span class="built_in">top</span>()+buff &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">QQ.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优先队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【并查集】洛谷 P4185 MooTube G</title>
      <link href="/2021/03/31/ACM/%E3%80%90%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P4185%20MooTube%20G/"/>
      <url>/2021/03/31/ACM/%E3%80%90%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P4185%20MooTube%20G/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4185" target="_blank">题链</a></p><p>利用并查集，只有当该边的权值大于等于k值时才合并；</p><p>将输入扒下来按相关度从大到小排序，一个个更新即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//#include&lt;ext/rope&gt;</span></span><br><span class="line"><span class="comment">//using namespace __gnu_cxx;</span></span><br><span class="line"><span class="comment">//#include &lt;ext/pb_ds/priority_queue.hpp&gt;</span></span><br><span class="line"><span class="comment">//using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod1 39989</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod2 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> fa[MS];</span><br><span class="line"><span class="keyword">int</span> size[MS];</span><br><span class="line"><span class="keyword">int</span> ac[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,val;</span><br><span class="line">&#125;p[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> k,poi,pos;</span><br><span class="line">&#125;a[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line"><span class="keyword">int</span> fy = <span class="built_in">find</span>(y);</span><br><span class="line">fa[fy] = fx;</span><br><span class="line">size[fx] += size[fy];</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">cin &gt;&gt; p[i].u &gt;&gt; p[i].v &gt;&gt; p[i].val;</span><br><span class="line"><span class="keyword">if</span>(p[i].u &gt; p[i].v) <span class="built_in">swap</span>(p[i].u,p[i].v);</span><br><span class="line">fa[i] = i;</span><br><span class="line">size[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">size[n] = <span class="number">1</span>;</span><br><span class="line">fa[n] = n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>,[](node t1,node t2)&#123;<span class="keyword">return</span> t1.val &gt; t2.val;&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i].k &gt;&gt; a[i].poi;</span><br><span class="line">a[i].pos = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+m+<span class="number">1</span>,[](nod t1,nod t2)&#123;<span class="keyword">return</span> t1.k &gt; t2.k;&#125;);</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(;j&lt;=n &amp;&amp; p[j].val&gt;=a[i].k;j++)&#123;</span><br><span class="line"><span class="built_in">merge</span>(p[j].u,p[j].v);</span><br><span class="line">&#125;</span><br><span class="line">ac[a[i].pos] = size[<span class="built_in">find</span>(a[i].poi)] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rope】洛谷 P3391 【模板】文艺平衡树</title>
      <link href="/2021/03/29/ACM/%E3%80%90Rope%E3%80%91%E6%B4%9B%E8%B0%B7%20P3391%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
      <url>/2021/03/29/ACM/%E3%80%90Rope%E3%80%91%E6%B4%9B%E8%B0%B7%20P3391%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%96%87%E8%89%BA%E5%B9%B3%E8%A1%A1%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3391" target="_blank">题链</a></p><p>用的是 STL rope</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span> <span class="comment">//用 tree</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span> <span class="comment">//用 hash</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/trie_policy.hpp&gt;</span> <span class="comment">//用 trie 字典树 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span> <span class="comment">//用 priority_queue</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/rope&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod1 39989</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod2 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">rope&lt;<span class="keyword">int</span>&gt; rp[<span class="number">3</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">rp[<span class="number">0</span>].<span class="built_in">push_back</span>(i);</span><br><span class="line">rp[<span class="number">1</span>].<span class="built_in">push_front</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">rp[<span class="number">2</span>] = rp[<span class="number">0</span>];</span><br><span class="line">rp[<span class="number">0</span>].<span class="built_in">replace</span>(l<span class="number">-1</span>,r-l+<span class="number">1</span>,rp[<span class="number">1</span>].<span class="built_in">substr</span>(n-r,r-l+<span class="number">1</span>));</span><br><span class="line">rp[<span class="number">1</span>].<span class="built_in">replace</span>(n-r,r-l+<span class="number">1</span>,rp[<span class="number">2</span>].<span class="built_in">substr</span>(l<span class="number">-1</span>,r-l+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;rp[<span class="number">0</span>].<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">cout &lt;&lt; rp[<span class="number">0</span>][i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Treap平衡树】洛谷 P3369 【模板】普通平衡树（Treap）</title>
      <link href="/2021/03/29/ACM/%E3%80%90Treap%E5%B9%B3%E8%A1%A1%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3369%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%99%AE%E9%80%9A%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Treap%EF%BC%89/"/>
      <url>/2021/03/29/ACM/%E3%80%90Treap%E5%B9%B3%E8%A1%A1%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3369%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%99%AE%E9%80%9A%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%88Treap%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3369" target="_blank">题链</a></p><p>Treap平衡树</p><p>zw:别把线段树宏定义的ls rs用在平衡树上… 没发现难找</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;ext/pb_ds/priority_queue.hpp&gt;</span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod1 39989</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod2 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r; <span class="comment">// 左右孩子编号 </span></span><br><span class="line"><span class="keyword">int</span> val,dat; <span class="comment">// 键值，用于模仿堆的权值 </span></span><br><span class="line"><span class="keyword">int</span> size,cnt;<span class="comment">// 以该节点为根的树的大小，该节点的数的数量 </span></span><br><span class="line">&#125;p[MS];</span><br><span class="line"><span class="keyword">int</span> tot,root; <span class="comment">// 总编号，根节点编号 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123; <span class="comment">// 新增节点返回节点编号 </span></span><br><span class="line">p[++tot] = &#123;<span class="number">0</span>,<span class="number">0</span>,val,<span class="built_in">rand</span>(),<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123; <span class="comment">// 设置初始两个节点，正负无穷 </span></span><br><span class="line">root = <span class="built_in">add</span>(-INF);</span><br><span class="line">p[root].r = <span class="built_in">add</span>(INF);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123; <span class="comment">// 更新 </span></span><br><span class="line">p[rt].size = p[p[rt].l].size + p[p[rt].r].size + p[rt].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rank_val</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> rank)</span></span>&#123; <span class="comment">// 排名 -&gt; 值 </span></span><br><span class="line"><span class="keyword">if</span>(rt == <span class="number">0</span>) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="keyword">if</span>(p[p[rt].l].size &gt;= rank) <span class="keyword">return</span> <span class="built_in">rank_val</span>(p[rt].l,rank);</span><br><span class="line"><span class="keyword">if</span>(p[p[rt].l].size + p[rt].cnt &gt;= rank) <span class="keyword">return</span> p[rt].val;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">rank_val</span>(p[rt].r,rank - p[p[rt].l].size - p[rt].cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">val_rank</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> val)</span></span>&#123; <span class="comment">// 值 -&gt; 排名 </span></span><br><span class="line"><span class="keyword">if</span>(rt == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(p[rt].val == val) <span class="keyword">return</span> p[p[rt].l].size + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p[rt].val &gt; val) <span class="keyword">return</span> <span class="built_in">val_rank</span>(p[rt].l,val);</span><br><span class="line"><span class="keyword">return</span> p[p[rt].l].size + p[rt].cnt + <span class="built_in">val_rank</span>(p[rt].r,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left_rotate</span><span class="params">(<span class="keyword">int</span> &amp;rt)</span></span>&#123; <span class="comment">// 左旋 逆时针 </span></span><br><span class="line"><span class="keyword">int</span> rrs = p[rt].r;</span><br><span class="line">p[rt].r = p[rrs].l;</span><br><span class="line">p[rrs].l = rt;</span><br><span class="line">rt = rrs;</span><br><span class="line"><span class="built_in">push_up</span>(p[rt].l);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">right_rotate</span><span class="params">(<span class="keyword">int</span> &amp;rt)</span></span>&#123; <span class="comment">// 右旋 顺时针 </span></span><br><span class="line"><span class="keyword">int</span> lls = p[rt].l;</span><br><span class="line">p[rt].l = p[lls].r;</span><br><span class="line">p[lls].r = rt;</span><br><span class="line">rt = lls;</span><br><span class="line"><span class="built_in">push_up</span>(p[rt].r);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> val)</span></span>&#123; <span class="comment">// 插入 rt为引用 根节点的位置可能会变</span></span><br><span class="line"><span class="keyword">if</span>(rt == <span class="number">0</span>)&#123; <span class="comment">// 无该值则新增 </span></span><br><span class="line">rt = <span class="built_in">add</span>(val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[rt].val == val)&#123; <span class="comment">// 有该值则数量++ </span></span><br><span class="line">p[rt].cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(val &lt; p[rt].val)&#123;</span><br><span class="line"><span class="built_in">insert</span>(p[rt].l,val);</span><br><span class="line"><span class="keyword">if</span>(p[p[rt].l].dat &gt; p[rt].dat) <span class="built_in">right_rotate</span>(rt); <span class="comment">// 右旋以满足大根堆性质 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">insert</span>(p[rt].r,val);</span><br><span class="line"><span class="keyword">if</span>(p[p[rt].r].dat &gt; p[rt].dat) <span class="built_in">left_rotate</span>(rt); <span class="comment">// 左旋以满足大根堆性质 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_up</span>(rt); <span class="comment">// 不忘更新 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfront</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> val)</span></span>&#123; <span class="comment">//前驱 </span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>; <span class="comment">// p[1].val  = -INF;</span></span><br><span class="line"><span class="keyword">while</span>(rt)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[rt].val == val)&#123; <span class="comment">// 找到对应值 </span></span><br><span class="line"><span class="keyword">if</span>(p[rt].l != <span class="number">0</span>)&#123; <span class="comment">// 寻找左子树最大值 </span></span><br><span class="line">rt = p[rt].l;</span><br><span class="line"><span class="keyword">while</span>(p[rt].r != <span class="number">0</span>) rt = p[rt].r;</span><br><span class="line">ans = rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[ans].val &lt; p[rt].val &amp;&amp; p[rt].val &lt; val) ans = rt; <span class="comment">// 边查找边更新 </span></span><br><span class="line"><span class="keyword">if</span>(val &lt; p[rt].val) rt = p[rt].l;</span><br><span class="line"><span class="keyword">else</span> rt = p[rt].r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p[ans].val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getnext</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> val)</span></span>&#123; <span class="comment">// 后继 </span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(rt)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[rt].val == val)&#123; <span class="comment">// 找到对应值 </span></span><br><span class="line"><span class="keyword">if</span>(p[rt].r != <span class="number">0</span>)&#123; <span class="comment">// 寻找右子树最小值 </span></span><br><span class="line">rt = p[rt].r;</span><br><span class="line"><span class="keyword">while</span>(p[rt].l != <span class="number">0</span>) rt = p[rt].l;</span><br><span class="line">ans = rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(val &lt; p[rt].val &amp;&amp; p[rt].val &lt; p[ans].val) ans = rt; <span class="comment">// 边查找边更新 </span></span><br><span class="line"><span class="keyword">if</span>(val &lt; p[rt].val) rt = p[rt].l;</span><br><span class="line"><span class="keyword">else</span> rt = p[rt].r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p[ans].val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> val)</span></span>&#123; <span class="comment">//删除 rt为引用 根节点的位置可能会变 </span></span><br><span class="line"><span class="keyword">if</span>(rt == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(p[rt].val == val)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[rt].cnt &gt; <span class="number">1</span>)&#123; <span class="comment">// 若有多个值则删数量即可 </span></span><br><span class="line">p[rt].cnt--;</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[rt].l || p[rt].r)&#123; <span class="comment">// 使需要被删除的数向下旋 到达叶子节点即可直接删除 左右旋保持堆性质 </span></span><br><span class="line"><span class="keyword">if</span>(p[rt].r == <span class="number">0</span> || p[p[rt].l].dat &gt; p[p[rt].r].dat)&#123;</span><br><span class="line"><span class="built_in">right_rotate</span>(rt);</span><br><span class="line"><span class="built_in">remove</span>(p[rt].r,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">left_rotate</span>(rt);</span><br><span class="line"><span class="built_in">remove</span>(p[rt].l,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> rt = <span class="number">0</span>; <span class="comment">// 直接删除叶子节点 </span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(val &lt; p[rt].val) <span class="built_in">remove</span>(p[rt].l,val);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">remove</span>(p[rt].r,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">build</span>();</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="keyword">int</span> op,x;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>) <span class="built_in">insert</span>(root,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) <span class="built_in">remove</span>(root,x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>) cout &lt;&lt; <span class="built_in">val_rank</span>(root,x)<span class="number">-1</span> &lt;&lt; endl; <span class="comment">// 初始时有一个无穷小 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">4</span>) cout &lt;&lt; <span class="built_in">rank_val</span>(root,x+<span class="number">1</span>) &lt;&lt; endl; <span class="comment">// 初始时有一个无穷小 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">5</span>) cout &lt;&lt; <span class="built_in">getfront</span>(root,x) &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="built_in">getnext</span>(root,x) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【二叉树】基础</title>
      <link href="/2021/03/29/ACM/%E3%80%90%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%91%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/03/29/ACM/%E3%80%90%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%91%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>在没有重复权值的基础上建立的二叉搜索树；</p><p>这是不平衡的；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;ext/pb_ds/priority_queue.hpp&gt;</span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod1 39989</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod2 1000000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125;p[MS];</span><br><span class="line"><span class="keyword">int</span> tot,root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123; <span class="comment">// 返回节点编号 </span></span><br><span class="line">p[++tot] = &#123;<span class="number">0</span>,<span class="number">0</span>,val&#125;; <span class="comment">// 新建节点左右孩子为 0 </span></span><br><span class="line"><span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123; <span class="comment">// 初始化两个节点，正负无穷大 </span></span><br><span class="line">root = <span class="built_in">add</span>(-INF);</span><br><span class="line">p[root].r = <span class="built_in">add</span>(INF);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> val)</span></span>&#123; <span class="comment">// 递归搜索返回节点编号 </span></span><br><span class="line"><span class="keyword">if</span>(rt == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(p[rt].val == val) <span class="keyword">return</span> rt;</span><br><span class="line"><span class="keyword">if</span>(val &lt; p[rt].val) <span class="keyword">return</span> <span class="built_in">search</span>(p[rt].l,val);</span><br><span class="line"><span class="keyword">if</span>(val &gt; p[rt].val) <span class="keyword">return</span> <span class="built_in">search</span>(p[rt].r,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rt == <span class="number">0</span>)&#123; <span class="comment">// 无该节点则新建 </span></span><br><span class="line">rt = <span class="built_in">add</span>(val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(val == p[rt].val) <span class="keyword">return</span>; <span class="comment">// 存在则无操作 </span></span><br><span class="line"><span class="keyword">if</span>(val &gt; p[rt].val) <span class="built_in">insert</span>(p[rt].r,val);</span><br><span class="line"><span class="keyword">if</span>(val &lt; p[rt].val) <span class="built_in">insert</span>(p[rt].l,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfront</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> val)</span></span>&#123; <span class="comment">// 查询前驱节点编号 </span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(rt)&#123;</span><br><span class="line"><span class="keyword">if</span>(val == p[rt].val)&#123; <span class="comment">// 若查到该值 </span></span><br><span class="line"><span class="keyword">if</span>(p[rt].l != <span class="number">0</span>)&#123; <span class="comment">// 寻找该点左子树最大值 </span></span><br><span class="line">rt = p[rt].l;</span><br><span class="line"><span class="keyword">while</span>(p[rt].r != <span class="number">0</span>) rt = p[rt].r;</span><br><span class="line">ans = rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p[ans].val &lt; p[rt].val &amp;&amp; p[rt].val &lt; val) ans = rt; <span class="comment">// 一边递归一边更新 </span></span><br><span class="line"><span class="keyword">if</span>(val &lt; p[rt].val) rt = p[rt].l;</span><br><span class="line"><span class="keyword">else</span> rt = p[rt].r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getnext</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> val)</span></span>&#123; <span class="comment">// 查询后继节点编号 </span></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(rt)&#123;</span><br><span class="line"><span class="keyword">if</span>(val == p[rt].val)&#123; <span class="comment">// 若查到该值 </span></span><br><span class="line"><span class="keyword">if</span>(p[rt].r != <span class="number">0</span>)&#123; <span class="comment">// 寻找该点右子树最小值 </span></span><br><span class="line">rt = p[rt].r;</span><br><span class="line"><span class="keyword">while</span>(p[rt].l != <span class="number">0</span>) rt = p[rt].l;</span><br><span class="line">ans = rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(val &lt; p[rt].val &amp;&amp; p[rt].val &lt; p[ans].val) ans = rt;<span class="comment">// 一边递归一边更新 </span></span><br><span class="line"><span class="keyword">if</span>(val &lt; p[rt].val) rt = p[rt].l;</span><br><span class="line"><span class="keyword">else</span> rt = p[rt].r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rt == <span class="number">0</span>) <span class="keyword">return</span>; <span class="comment">// 若不存在则无操作 </span></span><br><span class="line"><span class="keyword">if</span>(p[rt].val == val)&#123; <span class="comment">// 找到该值 </span></span><br><span class="line"><span class="keyword">if</span>(p[rt].l == <span class="number">0</span>) rt = p[rt].r; <span class="comment">// 无左子树则 fa[rt]的左或右指针 指向 右子树 （rt为引用则可看作 fa[rt]） </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p[rt].r == <span class="number">0</span>) rt = p[rt].l; <span class="comment">// 同理 </span></span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">// 左右子树同时存在，这里寻找右子树的最小值代替被删节点 </span></span><br><span class="line"><span class="keyword">int</span> nxt = p[rt].r;</span><br><span class="line"><span class="keyword">while</span>(p[nxt].l != <span class="number">0</span>) nxt = p[nxt].l; <span class="comment">// 找到最小节点 </span></span><br><span class="line"><span class="built_in">remove</span>(p[rt].r,val); <span class="comment">// 移除最小节点 </span></span><br><span class="line"><span class="comment">// 令节点nxt代替rt的位置 </span></span><br><span class="line">p[nxt].l = p[rt].l; </span><br><span class="line">p[nxt].r = p[rt].r;</span><br><span class="line">rt = nxt; <span class="comment">//fa[rt]的左或右指针 指向 右子树 （rt为引用则可看作 fa[rt]） </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(val &lt; p[rt].val) <span class="built_in">remove</span>(p[rt].l,val);</span><br><span class="line"><span class="keyword">if</span>(val &gt; p[rt].val) <span class="built_in">remove</span>(p[rt].r,val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mid_order</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123; <span class="comment">// 中序遍历 </span></span><br><span class="line"><span class="keyword">if</span>(rt == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">mid_order</span>(p[rt].l);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[rt].val);</span><br><span class="line"><span class="built_in">mid_order</span>(p[rt].r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">build</span>();</span><br><span class="line"><span class="keyword">int</span> ert;</span><br><span class="line"><span class="built_in">insert</span>(ert = root,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">insert</span>(ert = root,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">insert</span>(ert = root,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">insert</span>(ert = root,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">insert</span>(ert = root,<span class="number">4</span>);</span><br><span class="line"><span class="built_in">insert</span>(ert = root,<span class="number">8</span>);</span><br><span class="line"><span class="built_in">mid_order</span>(ert = root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p[<span class="built_in">getfront</span>(ert = root,<span class="number">4</span>)].val);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,p[<span class="built_in">getnext</span>(ert = root,<span class="number">4</span>)].val);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 平衡树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树】李超线段树 P4097 Segment</title>
      <link href="/2021/03/28/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91%20P4097%20Segment/"/>
      <url>/2021/03/28/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%9D%8E%E8%B6%85%E7%BA%BF%E6%AE%B5%E6%A0%91%20P4097%20Segment/</url>
      
        <content type="html"><![CDATA[<p><a href="https://oi-wiki.org/ds/li-chao-tree/" target="_blank">OI-wiki</a></p><p><a href="https://www.luogu.com.cn/problem/P4097" target="_blank">题链</a></p><p><img src="https://img2020.cnblogs.com/blog/2062718/202103/2062718-20210328222504031-618159763.png"></p><p>向下推的时候是类似向下推懒惰标记的方式，没理解导致吃了一整页的WA</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;ext/pb_ds/priority_queue.hpp&gt;</span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod1 39989</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod2 1000000000</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> k,b;</span><br><span class="line">&#125; line[MS];</span><br><span class="line"><span class="keyword">int</span> tli;</span><br><span class="line"><span class="keyword">int</span> p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> line[i].k*x+line[i].b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = p[rt];</span><br><span class="line"><span class="keyword">double</span> ci = <span class="built_in">calc</span>(i,m);</span><br><span class="line"><span class="keyword">double</span> cj = <span class="built_in">calc</span>(j,m);</span><br><span class="line"><span class="keyword">if</span>(!j)&#123;</span><br><span class="line">p[rt] = i;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line"><span class="keyword">if</span>(ci &gt; cj) p[rt] = i;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(line[i].k &gt; line[j].k) &#123;</span><br><span class="line"><span class="keyword">if</span>(ci &gt; cj) p[rt] = i ,<span class="built_in">push_down</span>(ls,l,m,j); <span class="comment">// 将原线段向下推 吃了一整页的 WA </span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">push_down</span>(rs,m+<span class="number">1</span>,r,i); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(line[i].k &lt; line[j].k) &#123;</span><br><span class="line"><span class="keyword">if</span>(ci &gt; cj) p[rt] = i ,<span class="built_in">push_down</span>(rs,m+<span class="number">1</span>,r,j); <span class="comment">// 将原线段向下推 </span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">push_down</span>(ls,l,m,i);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(line[i].b &gt; line[j].b) p[rt] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r,i);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update</span>(L,R,l,m,ls,i);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update</span>(L,R,m+<span class="number">1</span>,r,rs,i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Pair <span class="title">pmax</span><span class="params">(Pair t1,Pair t2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t1.one &gt; t2.one) <span class="keyword">return</span> t1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t1.one &lt; t2.one) <span class="keyword">return</span> t2;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> t1.two &lt; t2.two ? t1:t2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Pair <span class="title">get_line</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">int</span> tar)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tar &lt; l || tar &gt; r) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> cc = <span class="built_in">calc</span>(p[rt],tar);</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> &#123;cc,p[rt]&#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">pmax</span>(&#123;cc,p[rt]&#125;,<span class="built_in">pmax</span>(<span class="built_in">get_line</span>(l,m,ls,tar),<span class="built_in">get_line</span>(m+<span class="number">1</span>,r,rs,tar)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">int</span> lastans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span>(n--) &#123;</span><br><span class="line"><span class="keyword">int</span> op,tar;</span><br><span class="line"><span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op) &#123;</span><br><span class="line">cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">x1 = (x1+lastans<span class="number">-1</span>+mod1)%mod1+<span class="number">1</span>;</span><br><span class="line">y1 = (y1+lastans<span class="number">-1</span>+mod2)%mod2+<span class="number">1</span>;</span><br><span class="line">x2 = (x2+lastans<span class="number">-1</span>+mod1)%mod1+<span class="number">1</span>;</span><br><span class="line">y2 = (y2+lastans<span class="number">-1</span>+mod2)%mod2+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x1 &gt; x2) <span class="built_in">swap</span>(x1,x2) ,<span class="built_in">swap</span>(y1,y2);</span><br><span class="line">++tli;</span><br><span class="line"><span class="keyword">if</span>(x1 == x2)&#123;</span><br><span class="line">line[tli].k = <span class="number">0</span>;</span><br><span class="line">line[tli].b = <span class="built_in">max</span>(y1,y2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">line[tli].k = <span class="number">1.0</span>*(y2-y1)/(x2-x1),</span><br><span class="line">line[tli].b = y1 - line[tli].k*x1; <span class="comment">// 换一种写法会 WA... </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">update</span>(x1,x2,<span class="number">1</span>,mod1,<span class="number">1</span>,tli);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cin &gt;&gt; tar;</span><br><span class="line">tar = (tar+lastans<span class="number">-1</span>+mod1)%mod1+<span class="number">1</span>;</span><br><span class="line">lastans = <span class="built_in">get_line</span>(<span class="number">1</span>,mod1,<span class="number">1</span>,tar).two;</span><br><span class="line">cout &lt;&lt; lastans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树】洛谷 P4198 楼房重建</title>
      <link href="/2021/03/28/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P4198%20%E6%A5%BC%E6%88%BF%E9%87%8D%E5%BB%BA/"/>
      <url>/2021/03/28/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P4198%20%E6%A5%BC%E6%88%BF%E9%87%8D%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4198" target="_blank">题链</a></p><p>解：带修改的查询包含第一个值的[1，n]的最长上升子序列；</p><p>线段树维护节点区间最大值以及区间包含最左值的最长上升子序列，则询问的答案就是根节点的信息</p><p>区间最大值p[rt].maxn很好维护，主要是维护 区间包含最左值的最长上升子序列 这里记为p[rt].upcnt;</p><p>显然对于每一个叶子节点（[i,i]）节点信息就是 { maxn = 本身的值，upcnt = 1} ;</p><p>更新p[rt].upcnt时，左孩子[l,m]区间p[ls].upcnt都是需要加上的，毕竟是从前往后看，右孩子[m+1,r]则需要查找大于左孩子最大值的数目，把左孩子的最大值当作目标然后递归查找；</p><p>现在开始递归查找，如果左孩子[l,m]的最大值小于等于目标值，那么就去查找右孩子[m+1,r]，如果左孩子[l,m]的最大值大于目标值，则右孩子的贡献就是 整个区间[l,r].upcnt - 左孩子[l,m].upcnt + 递归左孩子的值；</p><p>终点就是当 l == r 时，当前值大于目标值返回 1 ，否则 0；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> maxn;</span><br><span class="line"><span class="keyword">int</span> upcnt;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">double</span> tar)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> p[rt].maxn &gt; tar;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p[ls].maxn &lt;= tar) <span class="keyword">return</span> <span class="built_in">cal</span>(rs,m+<span class="number">1</span>,r,tar);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> p[rt].upcnt - p[ls].upcnt + <span class="built_in">cal</span>(ls,l,m,tar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">p[rt].maxn = <span class="built_in">max</span>(p[ls].maxn,p[rs].maxn);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">p[rt].upcnt = p[ls].upcnt + <span class="built_in">cal</span>(rs,m+<span class="number">1</span>,r,p[ls].maxn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,<span class="keyword">double</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">p[rt].maxn = val;</span><br><span class="line">p[rt].upcnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt,l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">double</span> k = y/x;</span><br><span class="line"><span class="built_in">update</span>(x,x,<span class="number">1</span>,n,<span class="number">1</span>,k);</span><br><span class="line"><span class="keyword">int</span> ans = p[<span class="number">1</span>].upcnt;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【主席树】可持久化线段树模板学习</title>
      <link href="/2021/03/27/ACM/%E3%80%90%E4%B8%BB%E5%B8%AD%E6%A0%91%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/03/27/ACM/%E3%80%90%E4%B8%BB%E5%B8%AD%E6%A0%91%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><a href="https://oi-wiki.org/ds/persistent-seg/" target="_blank">OI-wiki</a></p><p><a href="https://blog.csdn.net/regina8023/article/details/41910615" target="_blank">有个手绘图</a></p><p><a href="https://blog.csdn.net/oranges_c/article/details/54773561" target="_blank">三道模板题（同求第k小）</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;ext/pb_ds/priority_queue.hpp&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//using namespace __gnu_pbds;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="keyword">int</span> lls,rrs;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> rtpos[MS];</span><br><span class="line"><span class="keyword">int</span> a[MS],ta;</span><br><span class="line"><span class="keyword">int</span> b[MS];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rt = ++tot;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> rt;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">p[rt].lls = <span class="built_in">build</span>(l,m);</span><br><span class="line">p[rt].rrs = <span class="built_in">build</span>(m+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> lart,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rt = ++tot;</span><br><span class="line">p[rt] = p[lart];</span><br><span class="line">p[rt].count++;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> rt;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= pos) p[rt].lls = <span class="built_in">update</span>(p[lart].lls,l,m,pos);</span><br><span class="line"><span class="keyword">else</span> p[rt].rrs = <span class="built_in">update</span>(p[lart].rrs,m+<span class="number">1</span>,r,pos);</span><br><span class="line"><span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_kth</span><span class="params">(<span class="keyword">int</span> lrt,<span class="keyword">int</span> rrt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">int</span> x = p[p[rrt].lls].count - p[p[lrt].lls].count;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(k &lt;= x) <span class="keyword">return</span> <span class="built_in">get_kth</span>(p[lrt].lls,p[rrt].lls,l,m,k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">get_kth</span>(p[lrt].rrs,p[rrt].rrs,m+<span class="number">1</span>,r,k-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">b[i] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">ta = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] != a[i<span class="number">-1</span>]) a[++ta] = a[i];</span><br><span class="line">&#125;</span><br><span class="line">rtpos[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>,ta);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="built_in">lower_bound</span>(a+<span class="number">1</span>,a+ta+<span class="number">1</span>,b[i]) - a;</span><br><span class="line">rtpos[i] = <span class="built_in">update</span>(rtpos[i<span class="number">-1</span>],<span class="number">1</span>,ta,pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>,&amp;l,&amp;r,&amp;k);</span><br><span class="line"><span class="comment">//k = r-l+1-k+1;</span></span><br><span class="line"><span class="keyword">int</span> cc = <span class="built_in">get_kth</span>(rtpos[l<span class="number">-1</span>],rtpos[r],<span class="number">1</span>,ta,k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[cc]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="keyword">int</span> ca;</span><br><span class="line">cin &gt;&gt; ca;</span><br><span class="line"><span class="keyword">while</span>(ca--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树状数组维护区间种类数】洛谷 P1972 HH的项链</title>
      <link href="/2021/03/25/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E7%A7%8D%E7%B1%BB%E6%95%B0%E3%80%91%E6%B4%9B%E8%B0%B7%20P1972%20HH%E7%9A%84%E9%A1%B9%E9%93%BE/"/>
      <url>/2021/03/25/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E7%A7%8D%E7%B1%BB%E6%95%B0%E3%80%91%E6%B4%9B%E8%B0%B7%20P1972%20HH%E7%9A%84%E9%A1%B9%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1972" target="_blank">题链</a></p><p>询问区间种类不能直接通过类似 get_sum(r)-get_sum(l-1) 的方式去得出答案</p><p>如何使得上述方式可以求解成为关键，可以将m个询问按照右区间r从小到大排列，不试图将所有数据（题给的一串贝壳数组）一起建立树状数组，通过一个个将数组中的元素加入树状数组时，对于该种类上一次出现的位置lastpos可以去掉，这一次出现时记录现在位置，由于对m个询问排序离线操作，就可通过 get_sum(r)-get_sum(l-1) 的方式去得出答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL pos,l,r;</span><br><span class="line">&#125;cp[MS];</span><br><span class="line">LL ac[MS];</span><br><span class="line">LL a[MS];</span><br><span class="line">LL p[MS];</span><br><span class="line">LL lapos[MS]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LL x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">x = (x&lt;&lt;<span class="number">1</span>) + (x&lt;&lt;<span class="number">3</span>) + (ch^<span class="number">48</span>);</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lowbit</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.r == b.r) <span class="keyword">return</span> a.l &lt; b.l;</span><br><span class="line"><span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL pos,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;pos&lt;=n;pos+=<span class="built_in">lowbit</span>(pos)) p[pos] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(LL pos)</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;pos;pos-=<span class="built_in">lowbit</span>(pos)) ans += p[pos];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = <span class="built_in">read</span>();</span><br><span class="line">m = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cp[i].l = <span class="built_in">read</span>();</span><br><span class="line">cp[i].r = <span class="built_in">read</span>();</span><br><span class="line">cp[i].pos = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(cp+<span class="number">1</span>,cp+m+<span class="number">1</span>,cmp);</span><br><span class="line">LL apos = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(;apos&lt;=cp[i].r;apos++)&#123;</span><br><span class="line"><span class="keyword">if</span>(lapos[a[apos]])</span><br><span class="line"><span class="built_in">add</span>(lapos[a[apos]],<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">add</span>(apos,<span class="number">1</span>);</span><br><span class="line">lapos[a[apos]] = apos;</span><br><span class="line">&#125;</span><br><span class="line">ac[cp[i].pos] = <span class="built_in">get_sum</span>(cp[i].r) - <span class="built_in">get_sum</span>(cp[i].l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树 二分】洛谷 P2824 排序</title>
      <link href="/2021/03/25/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%20%E4%BA%8C%E5%88%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P2824%20%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/03/25/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%20%E4%BA%8C%E5%88%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P2824%20%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2824" target="_blank">题链</a></p><p>二分答案，将原数组中小于二分值的置0，大于等于的置1，则区间排序问题则可变为区间赋值问题</p><p>线段树维护区间和，记cnt为[l,r]区间的1的个数，区间升序排序[l,r]可以转为对[r-cnt+1,r]区间值变为1，[l,r-cnt]区间值变为0，区间降序同理</p><p>若所求pos的值为1，说明经过一轮排序后该点的值是大于等于二分的答案的，可知单调性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL mid;</span><br><span class="line">LL a[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL op,l,r;</span><br><span class="line">&#125;cp[MS];</span><br><span class="line">LL p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line">LL la[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt] = p[ls] + p[rs];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(la[rt] != <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">p[ls] = (m-l+<span class="number">1</span>)*la[rt];</span><br><span class="line">p[rs] = (r-m)*la[rt];</span><br><span class="line">la[ls] = la[rt];</span><br><span class="line">la[rs] = la[rt];</span><br><span class="line">la[rt] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">la[rt] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[l] &lt; mid) p[rt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> p[rt] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">p[rt] = (r-l+<span class="number">1</span>)*val;</span><br><span class="line">la[rt] = val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans += <span class="built_in">get_sum</span>(L,R,l,m,ls);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans += <span class="built_in">get_sum</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin &gt;&gt; cp[i].op &gt;&gt; cp[i].l &gt;&gt; cp[i].r;</span><br><span class="line">&#125;</span><br><span class="line">LL pos,ans;</span><br><span class="line">cin &gt;&gt; pos;</span><br><span class="line">LL l = <span class="number">1</span> ,r = n;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">LL cnt = <span class="built_in">get_sum</span>(cp[i].l,cp[i].r,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!cnt || cnt == cp[i].r-cp[i].l+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!cp[i].op)&#123;</span><br><span class="line"><span class="built_in">update</span>(cp[i].l,cp[i].r-cnt,<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">update</span>(cp[i].r-cnt+<span class="number">1</span>,cp[i].r,<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">update</span>(cp[i].l,cp[i].l+cnt<span class="number">-1</span>,<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">update</span>(cp[i].l+cnt,cp[i].r,<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL tar = <span class="built_in">get_sum</span>(pos,pos,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(tar) ans = mid ,l = mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【KMP】洛谷 P2375 动物园</title>
      <link href="/2021/03/25/ACM/%E3%80%90KMP%E3%80%91%E6%B4%9B%E8%B0%B7%20P2375%20%E5%8A%A8%E7%89%A9%E5%9B%AD/"/>
      <url>/2021/03/25/ACM/%E3%80%90KMP%E3%80%91%E6%B4%9B%E8%B0%B7%20P2375%20%E5%8A%A8%E7%89%A9%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2375" target="_blank">题链</a></p><p>暴力想法就是求前缀数组，然后倒着一步步得跳j指针直到长度小于当前总长一半，最后把j指针跳到0的次数总和就是答案，当然会T，例如全是’a’</p><p>在求前缀数组时可以递推记录当前长度有多少个相同前后缀的个数，此时不管前后缀区间是否重叠</p><p>用与求前缀数组同样的想法去跳指针j，每次都得出不超过长度一半的最长前后缀的长度j，不更新j的值就能保证每次j值都在i/2的左边</p><p>为何第0个字符要等于1，ac数组记录的相同前后缀个数而不是真前后缀个数</p><p>因为在跳j指针的时候，当j长度小于当前总长一半时，ans若乘上真前后缀个数，则会少一个当前s[0…j-1]这个本体..</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line"><span class="keyword">char</span> s[MS];</span><br><span class="line">LL kp[MS];</span><br><span class="line">LL ac[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line">cin &gt;&gt; s; <span class="comment">// 字符串以0开始 </span></span><br><span class="line">LL hs = <span class="built_in">strlen</span>(s);</span><br><span class="line">kp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">ac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;hs;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; s[i] != s[j]) j = kp[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(s[i] == s[j]) j++; <span class="comment">// 前两步得出以 i 为结尾匹配的最长真前后缀的长度 j </span></span><br><span class="line">kp[i] = j; <span class="comment">// 记录这个长度 j </span></span><br><span class="line"><span class="keyword">if</span>(j) ac[i] = ac[j<span class="number">-1</span>]+<span class="number">1</span>; <span class="comment">// ac[i]表示以 i 结尾 相同的前后缀的个数</span></span><br><span class="line"><span class="keyword">else</span> ac[i] = <span class="number">1</span>; </span><br><span class="line">&#125; </span><br><span class="line">LL ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;hs;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; s[i] != s[j]) j = kp[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(s[i] == s[j]) j++;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">2</span>*j&gt;i+<span class="number">1</span>) j = kp[j<span class="number">-1</span>]; <span class="comment">// 得出不超过长度一半的最长前后缀的长度 j  </span></span><br><span class="line"><span class="keyword">if</span>(j) ans *= (ac[j<span class="number">-1</span>]+<span class="number">1</span>);</span><br><span class="line">ans %= mod;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树 扫描线】洛谷 P1502 窗口的星星</title>
      <link href="/2021/03/25/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%20%E6%89%AB%E6%8F%8F%E7%BA%BF%E3%80%91%E6%B4%9B%E8%B0%B7%20P1502%20%E7%AA%97%E5%8F%A3%E7%9A%84%E6%98%9F%E6%98%9F/"/>
      <url>/2021/03/25/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%20%E6%89%AB%E6%8F%8F%E7%BA%BF%E3%80%91%E6%B4%9B%E8%B0%B7%20P1502%20%E7%AA%97%E5%8F%A3%E7%9A%84%E6%98%9F%E6%98%9F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1502" target="_blank">题链</a></p><p>扫描线模板题</p><p>将每个星星扩展为一个矩形，长w-1，宽h-1，扩展的长度不同维护的东西也不同。</p><p>这样扩展结果是维护一个个点，如图</p><p><img src="https://img2020.cnblogs.com/blog/2062718/202103/2062718-20210325150404843-511878071.jpg"></p><p>而后维护区间max，操作只有区间加减。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL w,h;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL xl,xr,y,g;</span><br><span class="line">&#125;line[MS*<span class="number">2</span>];</span><br><span class="line">LL hx[MS*<span class="number">2</span>]; </span><br><span class="line">LL p[MS&lt;&lt;<span class="number">3</span>];</span><br><span class="line">LL la[MS&lt;&lt;<span class="number">3</span>];</span><br><span class="line">LL tli,thx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a.y == b.y) <span class="keyword">return</span> a.g &gt; b.g;</span><br><span class="line"><span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(la[rt])&#123;</span><br><span class="line">p[ls] += la[rt];</span><br><span class="line">p[rs] += la[rt];</span><br><span class="line">la[ls] += la[rt];</span><br><span class="line">la[rs] += la[rt];</span><br><span class="line">la[rt] = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">p[rt] = <span class="built_in">max</span>(p[ls],p[rs]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">la[rt] = p[rt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">la[rt] += val;</span><br><span class="line">p[rt] += val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt,l,r); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">LL ce;</span><br><span class="line">cin &gt;&gt; ce;</span><br><span class="line"><span class="keyword">while</span>(ce--)&#123;</span><br><span class="line">thx = <span class="number">0</span>;</span><br><span class="line">tli = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; w &gt;&gt; h;</span><br><span class="line">w-- ,h--;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL x,y,g;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y &gt;&gt; g;</span><br><span class="line">hx[++tli] = x;</span><br><span class="line">line[tli] = &#123;x,x+w,y,g&#125;;</span><br><span class="line">hx[++tli] = x+w;</span><br><span class="line">line[tli] = &#123;x,x+w,y+h,-g&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(hx+<span class="number">1</span>,hx+tli+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">sort</span>(line+<span class="number">1</span>,line+tli+<span class="number">1</span>,cmp);</span><br><span class="line">thx = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tli;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(hx[i] != hx[i<span class="number">-1</span>]) hx[++thx] = hx[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,thx,<span class="number">1</span>);</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tli;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="built_in">lower_bound</span>(hx+<span class="number">1</span>,hx+thx+<span class="number">1</span>,line[i].xl) - hx;</span><br><span class="line"><span class="keyword">int</span> r = <span class="built_in">lower_bound</span>(hx+<span class="number">1</span>,hx+thx+<span class="number">1</span>,line[i].xr) - hx;</span><br><span class="line"><span class="built_in">update</span>(l,r,<span class="number">1</span>,thx,<span class="number">1</span>,line[i].g);</span><br><span class="line">ans = <span class="built_in">max</span>(ans,p[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【KMP】洛谷 P4824 Censoring S</title>
      <link href="/2021/03/25/ACM/%E3%80%90KMP%E3%80%91%E6%B4%9B%E8%B0%B7%20P4824%20Censoring%20S/"/>
      <url>/2021/03/25/ACM/%E3%80%90KMP%E3%80%91%E6%B4%9B%E8%B0%B7%20P4824%20Censoring%20S/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4824" target="_blank">题链</a></p><p>求出模式串的前缀数组后，一个个读入文本串字符，遇到与模式串相同的字串（前缀值与模式串长度len相等），弹出栈顶len个前缀函数值，相当于消去这len个长度的字符的影响，以栈的形式存储答案与文本串的前缀数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line"><span class="keyword">char</span> s[MS];</span><br><span class="line"><span class="keyword">char</span> e[MS]; </span><br><span class="line">LL ac[MS];</span><br><span class="line">LL kpe[MS];</span><br><span class="line">LL kps[MS];</span><br><span class="line">LL hs,he,tac;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp_e</span><span class="params">()</span></span>&#123;</span><br><span class="line">he = <span class="built_in">strlen</span>(e);</span><br><span class="line">kpe[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;he;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> j=kpe[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; e[i] != e[j]) j = kpe[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(e[i] == e[j]) j++;</span><br><span class="line">kpe[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; s; <span class="comment">// 文本串 </span></span><br><span class="line">cin &gt;&gt; e; <span class="comment">// 模式串 </span></span><br><span class="line"><span class="built_in">kmp_e</span>();</span><br><span class="line">hs = <span class="built_in">strlen</span>(s);</span><br><span class="line">tac = <span class="number">0</span>; <span class="comment">// 栈指针 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;hs;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; s[i] != e[j]) j = kpe[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(s[i] == e[j]) j++;</span><br><span class="line">kps[i] = j; <span class="comment">// 前缀函数值 </span></span><br><span class="line"><span class="comment">/******************************************/</span> </span><br><span class="line">ac[tac] = i; <span class="comment">// 存储文本串位置i </span></span><br><span class="line"><span class="keyword">if</span>(j == he)&#123; <span class="comment">// 若相符 </span></span><br><span class="line">tac -= he; <span class="comment">// 栈顶弹出 长度与模式串同等数量 </span></span><br><span class="line">j = kps[ac[tac]]; <span class="comment">// 跳到上次位置 </span></span><br><span class="line">&#125;</span><br><span class="line">tac++;</span><br><span class="line"><span class="comment">/******************************************/</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tac;i++)&#123;</span><br><span class="line">cout &lt;&lt; s[ac[i]];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【左偏树】洛谷 P3377 【模板】左偏树（可并堆）</title>
      <link href="/2021/03/24/ACM/%E3%80%90%E5%B7%A6%E5%81%8F%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3377%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%B7%A6%E5%81%8F%E6%A0%91%EF%BC%88%E5%8F%AF%E5%B9%B6%E5%A0%86%EF%BC%89/"/>
      <url>/2021/03/24/ACM/%E3%80%90%E5%B7%A6%E5%81%8F%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3377%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%B7%A6%E5%81%8F%E6%A0%91%EF%BC%88%E5%8F%AF%E5%B9%B6%E5%A0%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3377" target="_blank">题链</a></p><h1 id="运用STL"><a href="#运用STL" class="headerlink" title="运用STL"></a>运用STL</h1><p><a href="https://blog.csdn.net/Khasehemwy/article/details/113828044" target="_blank">STL详解</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line">LL fa[MS];</span><br><span class="line">LL v[MS];</span><br><span class="line">__gnu_pbds::priority_queue&lt;Combine&gt; Q[MS];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">find</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(LL x,LL y)</span></span>&#123;</span><br><span class="line">fa[<span class="built_in">find</span>(y)] = <span class="built_in">find</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">Q[i].<span class="built_in">push</span>(&#123;x,i&#125;);</span><br><span class="line">fa[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">LL op,x,y;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">LL fx = <span class="built_in">find</span>(x);</span><br><span class="line">LL fy = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(fx &gt; fy) <span class="built_in">swap</span>(fx,fy);</span><br><span class="line"><span class="keyword">if</span>(fx == fy || v[x] || v[y]) <span class="keyword">continue</span>;</span><br><span class="line">Q[fx].<span class="built_in">join</span>(Q[fy]);</span><br><span class="line"><span class="built_in">merge</span>(fx,fy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span>(v[x])&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; </span><br><span class="line">LL fx = <span class="built_in">find</span>(x);</span><br><span class="line">Pair ans = Q[fx].<span class="built_in">top</span>();</span><br><span class="line">v[ans.two] = <span class="number">1</span>;</span><br><span class="line">cout &lt;&lt; ans.one &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">Q[fx].<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="手写实现"><a href="#手写实现" class="headerlink" title="手写实现"></a>手写实现</h1><p><a href="https://www.luogu.com.cn/problem/P3377" target="_blank">题链</a></p><p><a href="https://oi-wiki.org/ds/leftist-tree/" target="_blank">OI-wiki</a></p><p><a href="https://ksmeow.moe/leftist_tree/" target="_blank">有图好评</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/rope&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Combine Pair, greater<span class="meta-string">&lt;Pair&gt;</span>, pairing_heap_tag</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;double,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod1 39989</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod2 1000000000</span></span><br><span class="line"></span><br><span class="line">LL n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL fa,l,r;</span><br><span class="line">LL val,d;</span><br><span class="line">&#125;p[MS];</span><br><span class="line">LL fa[MS];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">find</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == p[x].fa) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> p[x].fa = <span class="built_in">find</span>(p[x].fa);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">merge</span><span class="params">(LL x,LL y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">if</span>(!y) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">if</span>(</span><br><span class="line">p[x].val &gt; p[y].val || </span><br><span class="line">(p[x].val == p[y].val &amp;&amp; x &gt; y) <span class="comment">// 保证有多个最小值时，优先删除先入队的 </span></span><br><span class="line">) <span class="built_in">swap</span>(x,y);</span><br><span class="line">p[x].r = <span class="built_in">merge</span>(p[x].r,y); <span class="comment">// 多次递归合并右子树 </span></span><br><span class="line"><span class="keyword">if</span>(p[p[x].r].d &gt; p[p[x].l].d)&#123; <span class="comment">// 保证左子树的d值始终大于等于右子树 </span></span><br><span class="line"><span class="built_in">swap</span>(p[x].l,p[x].r);</span><br><span class="line">&#125;</span><br><span class="line">p[p[x].r].fa = p[p[x].l].fa = x; <span class="comment">// 需要在多次递归后重定向fa的位置 </span></span><br><span class="line"></span><br><span class="line">p[x].d = p[p[x].r].d+<span class="number">1</span>; <span class="comment">// 更新d值 </span></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">poptop</span><span class="params">(LL x)</span></span>&#123; </span><br><span class="line">p[p[x].l].fa = p[x].l; <span class="comment">// 将自己作为根，相当于合并两课子树 </span></span><br><span class="line">p[p[x].r].fa = p[x].r;</span><br><span class="line">p[x].val = <span class="number">-1</span>; <span class="comment">// 被删除值设为题给值范围外 </span></span><br><span class="line">p[x].fa = <span class="built_in">merge</span>(p[x].l,p[x].r); <span class="comment">// 将堆顶弹出后，该堆顶指向的父亲应该修改为它的孩子 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">p[<span class="number">0</span>].d = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">p[i] = &#123;i,<span class="number">0</span>,<span class="number">0</span>,x,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">LL op,x,y;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">LL fx = <span class="built_in">find</span>(x);</span><br><span class="line">LL fy = <span class="built_in">find</span>(y);</span><br><span class="line"><span class="keyword">if</span>(p[x].val == <span class="number">-1</span> || p[y].val == <span class="number">-1</span> || fx == fy) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">merge</span>(fx,fy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span>(p[x].val == <span class="number">-1</span>) cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">LL fx = <span class="built_in">find</span>(x);</span><br><span class="line">cout &lt;&lt; p[fx].val &lt;&lt; endl;</span><br><span class="line"><span class="built_in">poptop</span>(fx); <span class="comment">// 删除该点 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可并堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算几何】计算几何点，线，圆定义及相关模板</title>
      <link href="/2021/03/22/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E7%82%B9%EF%BC%8C%E7%BA%BF%EF%BC%8C%E5%9C%86%E5%AE%9A%E4%B9%89%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A8%A1%E6%9D%BF/"/>
      <url>/2021/03/22/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E7%82%B9%EF%BC%8C%E7%BA%BF%EF%BC%8C%E5%9C%86%E5%AE%9A%E4%B9%89%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://linxi99.gitee.io/20190211/ACM%E5%87%A0%E4%BD%95%E5%9F%BA%E7%A1%80%E7%AF%87/" target="_blank">代码来源</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 200009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">nround</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> t)</span></span>; <span class="comment">// 四舍五入保留n位小数 , (保留3位小数)1.2100 =&gt; 1.21; </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line"><span class="built_in">Point</span>(<span class="keyword">double</span> x=<span class="number">0</span>,<span class="keyword">double</span> y=<span class="number">0</span>):<span class="built_in">x</span>(x),<span class="built_in">y</span>(y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector; <span class="comment">// 向量 </span></span><br><span class="line">Vector <span class="keyword">operator</span> + (Vector A,Vector B);</span><br><span class="line">Vector <span class="keyword">operator</span> - (Vector A,Vector B);</span><br><span class="line">Vector <span class="keyword">operator</span> * (Vector A,<span class="keyword">double</span> k);</span><br><span class="line">Vector <span class="keyword">operator</span> / (Vector A,<span class="keyword">double</span> k);</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b);</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b);</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PolarAngleCmp</span><span class="params">(Point a,Point b,Point start)</span></span>; <span class="comment">// 极角排序 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PolarAngleCmp2</span><span class="params">(Point a,Point b,Point start)</span></span>; <span class="comment">// 极角排序另一种方法，速度快</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dot</span><span class="params">(Vector A,Vector B)</span></span>; <span class="comment">// 内积  α·β=|α||β|cosθ</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Vector A, Vector B)</span></span>;<span class="comment">// 外积  α×β=|α||β|sinθ</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Point a,Point b,Point c)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dis</span><span class="params">(Point a,Point b)</span></span>;<span class="comment">// 两点距离 </span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Length</span><span class="params">(Vector A)</span></span>;<span class="comment">// 向量取模 </span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Angle</span><span class="params">(Vector A,Vector B)</span></span>;<span class="comment">// 计算两向量夹角 返回值为弧度制下的夹角 </span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Area2</span><span class="params">(Point a,Point b,Point c)</span></span>; <span class="comment">// 计算两向量构成的平行四边形有向面积 </span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Area2</span><span class="params">(Vector A,Vector B)</span></span>;<span class="comment">// 计算两向量构成的平行四边形有向面积 </span></span><br><span class="line"><span class="function">Vector <span class="title">Rotate</span><span class="params">(Vector A,<span class="keyword">double</span> rad)</span></span>;<span class="comment">// 计算向量逆时针旋转后的向量 </span></span><br><span class="line"><span class="function">Vector <span class="title">Normal</span><span class="params">(Vector A)</span></span>; <span class="comment">// 计算向量逆时针旋转九十度的单位法向量 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ToLeftTest</span><span class="params">(Point a,Point b,Point c)</span></span>;<span class="comment">//判断折线bc是不是向ab的逆时针方向（左边）转向</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ClosePoint</span><span class="params">(vector&lt;Point&gt; &amp;vc,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>; <span class="comment">// 平面最近点对 [l,r] </span></span><br><span class="line"><span class="comment">//Andrew算法 计算凸包，输入点数组为 p，个数为 n， 输出点数组为 ch。函数返回凸包顶点数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Andrew_ConvexHull</span><span class="params">(Point* p, <span class="keyword">int</span> n, Point* ch)</span></span>; </span><br><span class="line"><span class="comment">//Graham扫描法 计算凸包 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Graham_ConvexHull</span><span class="params">(Point* p, <span class="keyword">int</span> n, Point* cc)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span> <span class="comment">// 定义直线 ,参数方程 </span></span><br><span class="line">Point v, p; <span class="comment">// 直线上两点 ,以 v 为起点 </span></span><br><span class="line"><span class="built_in">Line</span>(Point v=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,Point p=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;):<span class="built_in">v</span>(v),<span class="built_in">p</span>(p)&#123;&#125;</span><br><span class="line"><span class="function">Point <span class="title">point</span><span class="params">(<span class="keyword">double</span> t)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> v + (p-v)*t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//计算两直线交点，必须保证直线相交，否则将会出现除以零的情况 </span></span><br><span class="line"><span class="comment">//调用前需保证 Cross(v, w) != 0</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineIntersection</span><span class="params">(Point P,Vector v,Point Q,Vector w)</span></span>;</span><br><span class="line"><span class="comment">//点P到直线AB距离公式(取绝对值) </span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToLine</span><span class="params">(Point P,Point A,Point B)</span></span>;</span><br><span class="line"><span class="comment">//计算点到线段的距离</span></span><br><span class="line"><span class="comment">//点P到线段AB距离公式</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToSegment</span><span class="params">(Point P,Point A,Point B)</span></span>;</span><br><span class="line"><span class="comment">//点P在直线AB上的投影点</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineProjection</span><span class="params">(Point P, Point A, Point B)</span></span>;</span><br><span class="line"><span class="comment">//判断点是否在线段上</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">OnSegment</span><span class="params">(Point p, Point a1, Point a2)</span></span>;</span><br><span class="line"><span class="comment">//判断两线段是否相交</span></span><br><span class="line"><span class="comment">//通过两次跨立实验</span></span><br><span class="line"><span class="comment">//不允许在顶点处相交</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SegmentProperIntersectionNo</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span></span>;</span><br><span class="line"><span class="comment">//允许在端点处相交</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SegmentProperIntersectionYes</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span></span>;</span><br><span class="line"><span class="comment">//求多边形面积  p为端点集合，n为端点个数 [0,n) </span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PolygonArea</span><span class="params">(Point* p, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">//判断点是否在多边形内，若点在多边形内返回1，在多边形外部返回0，在多边形上返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPointInPolygon</span><span class="params">(Point p, vector&lt;Point&gt; poly)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算机中储存圆通常记录圆心坐标与半径</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line">    Point c;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    <span class="built_in">Circle</span>(Point c=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;, <span class="keyword">double</span> r=<span class="number">0</span>):<span class="built_in">c</span>(c), <span class="built_in">r</span>(r) &#123;&#125;</span><br><span class="line">    <span class="function">Point <span class="title">point</span><span class="params">(<span class="keyword">double</span> a)</span></span>&#123;<span class="comment">//通过圆心角求坐标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(c.x + <span class="built_in">cos</span>(a)*r, c.y + <span class="built_in">sin</span>(a)*r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 判断点在圆内 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PointInCircle</span><span class="params">(Point A,Circle C)</span></span>;</span><br><span class="line"><span class="comment">//求圆与直线交点 返回t1,t2,存放于sol中 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLineCircleIntersection</span><span class="params">(Line L, Circle C, <span class="keyword">double</span>&amp; t1, <span class="keyword">double</span>&amp; t2, vector&lt;Point&gt;&amp; sol)</span></span>;</span><br><span class="line"><span class="comment">//两圆相交面积 通过计算两个圆相交所构成的两个扇形面积和减去其构成的筝形的面积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">AreaOfOverlap</span><span class="params">(Point c1, <span class="keyword">double</span> r1, Point c2, <span class="keyword">double</span> r2)</span></span>;</span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">Point p[MS];</span><br><span class="line">Point tubao[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin &gt;&gt; p[i].x &gt;&gt; p[i].y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0.00\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="built_in">Graham_ConvexHull</span>(p,n,tubao);</span><br><span class="line"><span class="keyword">double</span> ans = <span class="built_in">Dis</span>(tubao[<span class="number">0</span>],tubao[cnt<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">if</span>(cnt == <span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">ans += <span class="built_in">Dis</span>(tubao[i<span class="number">-1</span>],tubao[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>,ans);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// floor(x) 向下取整</span></span><br><span class="line"><span class="comment">// ceil(x)  向上取整</span></span><br><span class="line"><span class="comment">// round(x) 四舍五入 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(x-y) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x &gt; y) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四舍五入保留n位小数 , (保留3位小数)1.2100 =&gt; 1.21; </span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">nround</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">LL k = <span class="built_in">pow</span>(<span class="number">10</span>,t);</span><br><span class="line"><span class="keyword">double</span> cc = x*k;</span><br><span class="line">cc = <span class="built_in">round</span>(cc);</span><br><span class="line"><span class="keyword">return</span> cc/k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector <span class="keyword">operator</span> + (Vector A,Vector B)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Point</span>(A.x+B.x,A.y+B.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector <span class="keyword">operator</span> - (Vector A,Vector B)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Vector</span>(A.x-B.x,A.y-B.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector <span class="keyword">operator</span> * (Vector A,<span class="keyword">double</span> k)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Vector</span>(A.x*k,A.y*k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector <span class="keyword">operator</span> / (Vector A,<span class="keyword">double</span> k)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Vector</span>(A.x/k,A.y/k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123; <span class="comment">// 从左下到右 </span></span><br><span class="line"><span class="keyword">if</span>(a.x == b.x) <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line"><span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sgn</span>(a.x-b.x) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(a.y-b.y)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* α·β=|α||β|cosθ</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">向量α在向量β的投影α′（带有方向性）与β的长度乘积</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">若α与β的夹角为锐角，则其内积为正</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">若α与β的夹角为钝角，则其内积为负</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">若α与β的夹角为直角，则其内积为0 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dot</span><span class="params">(Vector A,Vector B)</span></span>&#123; <span class="comment">// 内积  α·β=|α||β|cosθ</span></span><br><span class="line"><span class="keyword">return</span> A.x*B.x+A.y*B.y; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*α×β=|α||β|sinθ</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">θ 表示向量α旋转到向量β所经过的夹角 (右手定则)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">若β在α的逆时针方向，则为正值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">顺时针则为负值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">两向量共线则为0 */</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Vector A, Vector B)</span></span>&#123; <span class="comment">// 外积  α×β=|α||β|sinθ</span></span><br><span class="line">    <span class="keyword">return</span> A.x*B.y-A.y*B.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Point a,Point b,Point c)</span></span>&#123; <span class="comment">// ab x ac</span></span><br><span class="line"><span class="keyword">return</span> (b.x-a.x)*(c.y-a.y)-(c.x-a.x)*(b.y-a.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dis</span><span class="params">(Point a,Point b)</span></span>&#123;<span class="comment">//计算距离</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)*<span class="number">1.0</span>+(a.y-b.y)*(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Length</span><span class="params">(Vector A)</span></span>&#123; <span class="comment">// 向量取模 </span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">Dot</span>(A,A));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Angle</span><span class="params">(Vector A,Vector B)</span></span>&#123; <span class="comment">//计算两向量夹角 返回值为弧度制下的夹角 </span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">acos</span>( <span class="built_in">Dot</span>(A,B) / (<span class="built_in">Length</span>(A)*<span class="built_in">Length</span>(B)) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Area2</span><span class="params">(Point a,Point b,Point c)</span></span>&#123; <span class="comment">// 计算两向量构成的平行四边形有向面积 </span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Cross</span>(b-a,c-a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Area2</span><span class="params">(Vector A,Vector B)</span></span>&#123; <span class="comment">// 计算两向量构成的平行四边形有向面积 </span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Cross</span>(A,B);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Vector <span class="title">Rotate</span><span class="params">(Vector A,<span class="keyword">double</span> rad)</span></span>&#123; <span class="comment">// 计算向量逆时针旋转后的向量 </span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Vector</span>(A.x*<span class="built_in">cos</span>(rad)-A.y*<span class="built_in">sin</span>(rad), A.x*<span class="built_in">sin</span>(rad)+A.y*<span class="built_in">cos</span>(rad));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Vector <span class="title">Normal</span><span class="params">(Vector A)</span></span>&#123; <span class="comment">// 计算向量逆时针旋转九十度的单位法向量 </span></span><br><span class="line"><span class="keyword">double</span> len = <span class="built_in">Length</span>(A);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Vector</span>(-A.y/len ,A.x/len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ToLeftTest</span><span class="params">(Point a,Point b,Point c)</span></span>&#123; <span class="comment">//判断折线bc是不是向ab的逆时针方向（左边）转向</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Cross</span>(b-a,c-b) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//平面最近点对</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ClosePoint</span><span class="params">(vector&lt;Point&gt; &amp;vc,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(r-l&lt;=<span class="number">5</span>)&#123;</span><br><span class="line"><span class="keyword">double</span> ans = DBINF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=r;j++)&#123;</span><br><span class="line">ans = <span class="built_in">min</span>(ans,<span class="built_in">Length</span>(vc[i]-vc[j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="built_in">min</span>(<span class="built_in">ClosePoint</span>(vc,l,m),<span class="built_in">ClosePoint</span>(vc,m+<span class="number">1</span>,r));</span><br><span class="line">vector&lt;Point&gt; tvc;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(vc[i].x - vc[m].x) &lt;= ans)&#123;</span><br><span class="line">tvc.<span class="built_in">push_back</span>(vc[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(tvc.<span class="built_in">begin</span>(),tvc.<span class="built_in">end</span>(),[](Point k1,Point k2)&#123;<span class="keyword">return</span> k1.y&lt;k2.y;&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tvc.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;tvc.<span class="built_in">size</span>() &amp;&amp; tvc[j].y-tvc[i].y&lt;ans;j++)&#123;</span><br><span class="line">ans = <span class="built_in">min</span>(ans,<span class="built_in">Length</span>(tvc[i]-tvc[j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//计算两直线交点，必须保证直线相交，否则将会出现除以零的情况 </span></span><br><span class="line"><span class="comment">//调用前需保证 Cross(v, w) != 0</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineIntersection</span><span class="params">(Point P,Vector v,Point Q,Vector w)</span></span>&#123;</span><br><span class="line">Vector u = P-Q;</span><br><span class="line"><span class="keyword">double</span> t = <span class="built_in">Cross</span>(w,u)/<span class="built_in">Cross</span>(v,w);</span><br><span class="line"><span class="keyword">return</span> P+v*t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点P到直线AB距离公式</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToLine</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line">Vector v1 = B-A, v2 = P-A;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fabs</span>(<span class="built_in">Cross</span>(v1,v2)/<span class="built_in">Length</span>(v1));</span><br><span class="line">&#125;<span class="comment">//不取绝对值，得到的是有向距离</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算点到线段的距离</span></span><br><span class="line"><span class="comment">//点P到线段AB距离公式</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DistanceToSegment</span><span class="params">(Point P,Point A,Point B)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(A == B) <span class="keyword">return</span> <span class="built_in">Length</span>(P-A);</span><br><span class="line">Vector v1 = B-A ,v2 = P-A ,v3 = P-B;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sgn</span>(<span class="built_in">Dot</span>(v1,v2)) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">Length</span>(v2);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sgn</span>(<span class="built_in">Dot</span>(v1,v3)) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">Length</span>(v3);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">DistanceToLine</span>(P,A,B);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点P在直线AB上的投影点</span></span><br><span class="line"><span class="function">Point <span class="title">GetLineProjection</span><span class="params">(Point P, Point A, Point B)</span></span>&#123;</span><br><span class="line">    Vector v = B-A;</span><br><span class="line">    <span class="keyword">return</span> A+v*(<span class="built_in">Dot</span>(v, P-A)/<span class="built_in">Dot</span>(v, v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断点是否在线段上</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">OnSegment</span><span class="params">(Point p, Point a1, Point a2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sgn</span>(<span class="built_in">Cross</span>(a1-p, a2-p)) == <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(<span class="built_in">Dot</span>(a1-p, a2-p)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断两线段是否相交</span></span><br><span class="line"><span class="comment">//通过两次跨立实验</span></span><br><span class="line"><span class="comment">//不允许在顶点处相交</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SegmentProperIntersectionNo</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> c1 = <span class="built_in">Cross</span>(a2 - a1, b1 - a1), c2 = <span class="built_in">Cross</span>(a2 - a1, b2 - a1);</span><br><span class="line">    <span class="keyword">double</span> c3 = <span class="built_in">Cross</span>(b2 - b1, a1 - b1), c4 = <span class="built_in">Cross</span>(b2 - b1, a2 - b1);</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">sgn</span>(c1)*<span class="built_in">sgn</span>(c2) &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(c3)*<span class="built_in">sgn</span>(c4) &lt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//允许在端点处相交</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SegmentProperIntersectionYes</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> c1 = <span class="built_in">Cross</span>(a2-a1, b1-a1), c2 = <span class="built_in">Cross</span>(a2-a1, b2-a1);</span><br><span class="line">    <span class="keyword">double</span> c3 = <span class="built_in">Cross</span>(b2-b1, a1-b1), c4 = <span class="built_in">Cross</span>(b2-b1, a2-b1);</span><br><span class="line">    <span class="comment">//if判断控制是否允许线段在端点处相交，根据需要添加</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">sgn</span>(c1) || !<span class="built_in">sgn</span>(c2) || !<span class="built_in">sgn</span>(c3) || !<span class="built_in">sgn</span>(c4))&#123;</span><br><span class="line">        <span class="keyword">bool</span> f1 = <span class="built_in">OnSegment</span>(b1, a1, a2);</span><br><span class="line">        <span class="keyword">bool</span> f2 = <span class="built_in">OnSegment</span>(b2, a1, a2);</span><br><span class="line">        <span class="keyword">bool</span> f3 = <span class="built_in">OnSegment</span>(a1, b1, b2);</span><br><span class="line">        <span class="keyword">bool</span> f4 = <span class="built_in">OnSegment</span>(a2, b1, b2);</span><br><span class="line">        <span class="keyword">bool</span> f = (f1|f2|f3|f4);</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">sgn</span>(c1)*<span class="built_in">sgn</span>(c2) &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">sgn</span>(c3)*<span class="built_in">sgn</span>(c4) &lt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求多边形面积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PolygonArea</span><span class="params">(Point* p, <span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//p为端点集合，n为端点个数</span></span><br><span class="line">    <span class="keyword">double</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n<span class="number">-1</span>; ++i)</span><br><span class="line">        s += <span class="built_in">Cross</span>(p[i]-p[<span class="number">0</span>], p[i+<span class="number">1</span>]-p[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(s/<span class="number">2.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断点是否在多边形内，若点在多边形内返回1，在多边形外部返回0，在多边形上返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPointInPolygon</span><span class="params">(Point p, vector&lt;Point&gt; poly)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> wn = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> n = poly.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">OnSegment</span>(p, poly[i], poly[(i+<span class="number">1</span>)%n])) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="built_in">sgn</span>(<span class="built_in">Cross</span>(poly[(i+<span class="number">1</span>)%n] - poly[i], p - poly[i]));</span><br><span class="line">        <span class="keyword">int</span> d1 = <span class="built_in">sgn</span>(poly[i].y - p.y);</span><br><span class="line">        <span class="keyword">int</span> d2 = <span class="built_in">sgn</span>(poly[(i+<span class="number">1</span>)%n].y - p.y);</span><br><span class="line">        <span class="keyword">if</span>(k &gt; <span class="number">0</span> &amp;&amp; d1 &lt;= <span class="number">0</span> &amp;&amp; d2 &gt; <span class="number">0</span>) wn++;</span><br><span class="line">        <span class="keyword">if</span>(k &lt; <span class="number">0</span> &amp;&amp; d2 &lt;= <span class="number">0</span> &amp;&amp; d1 &gt; <span class="number">0</span>) wn--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(wn != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断点在圆内 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PointInCircle</span><span class="params">(Point A,Circle C)</span></span>&#123;</span><br><span class="line">Vector p = A-C.c;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Length</span>(p) &lt; C.r; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求圆与直线交点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLineCircleIntersection</span><span class="params">(Line L, Circle C, <span class="keyword">double</span>&amp; t1, <span class="keyword">double</span>&amp; t2, vector&lt;Point&gt;&amp; sol)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = L.v.x, b = L.p.x - C.c.x, c = L.v.y, d = L.p.y - C.c.y;</span><br><span class="line">    <span class="keyword">double</span> e = a*a + c*c, f = <span class="number">2</span>*(a*b + c*d), g = b*b + d*d - C.r*C.r;</span><br><span class="line">    <span class="keyword">double</span> delta = f*f - <span class="number">4</span>*e*g;<span class="comment">//判别式</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(delta) &lt; <span class="number">0</span>)<span class="comment">//相离</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">sgn</span>(delta) == <span class="number">0</span>)&#123;<span class="comment">//相切</span></span><br><span class="line">        t1 = -f /(<span class="number">2</span>*e);</span><br><span class="line">        t2 = -f /(<span class="number">2</span>*e);</span><br><span class="line">        sol.<span class="built_in">push_back</span>(L.<span class="built_in">point</span>(t1));<span class="comment">//sol存放交点本身</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//相交</span></span><br><span class="line">    t1 = (-f - <span class="built_in">sqrt</span>(delta))/(<span class="number">2</span>*e);</span><br><span class="line">    sol.<span class="built_in">push_back</span>(L.<span class="built_in">point</span>(t1));</span><br><span class="line">    t2 = (-f + <span class="built_in">sqrt</span>(delta))/(<span class="number">2</span>*e);</span><br><span class="line">    sol.<span class="built_in">push_back</span>(L.<span class="built_in">point</span>(t2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两圆相交面积 通过计算两个圆相交所构成的两个扇形面积和减去其构成的筝形的面积</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">AreaOfOverlap</span><span class="params">(Point c1, <span class="keyword">double</span> r1, Point c2, <span class="keyword">double</span> r2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> d = <span class="built_in">Length</span>(c1 - c2);</span><br><span class="line">    <span class="keyword">if</span>(r1 + r2 &lt; d + eps)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">if</span>(d &lt; <span class="built_in">fabs</span>(r1 - r2) + eps)&#123;</span><br><span class="line">        <span class="keyword">double</span> r = <span class="built_in">min</span>(r1, r2);</span><br><span class="line">        <span class="keyword">return</span> Pi*r*r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> x = (d*d + r1*r1 - r2*r2)/(<span class="number">2.0</span>*d);</span><br><span class="line">    <span class="keyword">double</span> p = (r1 + r2 + d)/<span class="number">2.0</span>;</span><br><span class="line">    <span class="keyword">double</span> t1 = <span class="built_in">acos</span>(x/r1);</span><br><span class="line">    <span class="keyword">double</span> t2 = <span class="built_in">acos</span>((d - x)/r2);</span><br><span class="line">    <span class="keyword">double</span> s1 = r1*r1*t1;</span><br><span class="line">    <span class="keyword">double</span> s2 = r2*r2*t2;</span><br><span class="line">    <span class="keyword">double</span> s3 = <span class="number">2</span>*<span class="built_in">sqrt</span>(p*(p - r1)*(p - r2)*(p - d));</span><br><span class="line">    <span class="keyword">return</span> s1 + s2 - s3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Andrew算法 计算凸包，输入点数组为 p，个数为 n， 输出点数组为 ch。函数返回凸包顶点数</span></span><br><span class="line"><span class="comment">//如果不希望凸包的边上有输入点，则把两个 &lt;= 改为 &lt;</span></span><br><span class="line"><span class="comment">//在精度要求高时建议用dcmp比较</span></span><br><span class="line"><span class="comment">//输入不能有重复点，函数执行完后输入点的顺序被破坏</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Andrew_ConvexHull</span><span class="params">(Point* p, <span class="keyword">int</span> n, Point* ch)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(p, p+n);</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(m &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">Cross</span>(ch[m<span class="number">-1</span>] - ch[m<span class="number">-2</span>], p[i] - ch[m<span class="number">-2</span>]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            m--;</span><br><span class="line">        &#125;</span><br><span class="line">        ch[m++] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-2</span>; i&gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(m &gt; k &amp;&amp; <span class="built_in">Cross</span>(ch[m<span class="number">-1</span>] - ch[m<span class="number">-2</span>], p[i] - ch[m<span class="number">-2</span>]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            m--;</span><br><span class="line">        &#125;</span><br><span class="line">        ch[m++] = p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>)</span><br><span class="line">        --m;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Graham扫描法 计算凸包 </span></span><br><span class="line"><span class="keyword">double</span> xx,yy;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Graham_ConvexHull</span><span class="params">(Point* p, <span class="keyword">int</span> n, Point* cc)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">cc[<span class="number">0</span>] = p[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(p,p+n);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">cc[cnt++] = p[<span class="number">0</span>];</span><br><span class="line">xx = p[<span class="number">0</span>].x;</span><br><span class="line">yy = p[<span class="number">0</span>].y;</span><br><span class="line"><span class="built_in">sort</span>(p+<span class="number">1</span>,p+n,[](Point a,Point b)&#123; <span class="comment">// 极角排序 2 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">atan2</span>(a.y-yy,a.x-xx)!=<span class="built_in">atan2</span>(b.y-yy,b.x-xx))</span><br><span class="line">        <span class="built_in"><span class="keyword">return</span></span> (<span class="built_in">atan2</span>(a.y-yy,a.x-xx))&lt;(<span class="built_in">atan2</span>(b.y-yy,b.x-xx));</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;);</span><br><span class="line">cc[cnt++] = p[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">Cross</span>(cc[cnt<span class="number">-2</span>],cc[cnt<span class="number">-1</span>],p[i]) &lt; <span class="number">0</span>) cnt--;</span><br><span class="line">cc[cnt++] = p[i];</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算几何】计算任意多边形的面积</title>
      <link href="/2021/03/21/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E8%AE%A1%E7%AE%97%E4%BB%BB%E6%84%8F%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%9A%84%E9%9D%A2%E7%A7%AF/"/>
      <url>/2021/03/21/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E8%AE%A1%E7%AE%97%E4%BB%BB%E6%84%8F%E5%A4%9A%E8%BE%B9%E5%BD%A2%E7%9A%84%E9%9D%A2%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point2d</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算任意多边形的面积，顶点按照顺时针或者逆时针方向排列</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ComputePolygonArea</span><span class="params">(<span class="keyword">const</span> vector&lt;Point2d&gt; &amp;points)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> point_num = points.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span>(point_num &lt; <span class="number">3</span>)<span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">double</span> s = points[<span class="number">0</span>].y * (points[point_num<span class="number">-1</span>].x - points[<span class="number">1</span>].x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; point_num; ++i)</span><br><span class="line">s += points[i].y * (points[i<span class="number">-1</span>].x - points[(i+<span class="number">1</span>)%point_num].x);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">fabs</span>(s/<span class="number">2.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【KMP】KMP字符串匹配</title>
      <link href="/2021/03/17/ACM/%E3%80%90KMP%E3%80%91KMP%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
      <url>/2021/03/17/ACM/%E3%80%90KMP%E3%80%91KMP%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>学自<a href="https://oi-wiki.org/string/kmp/" target="_blank">OI-wiki 前缀函数与kmp</a></p><p>##第二个优化</p><p>从第二个优化开始我看的时间比较久，如图部分</p><p><img src="https://img2020.cnblogs.com/blog/2062718/202103/2062718-20210317160347797-1555616857.png"></p><p>其中公式</p><p><img src="https://img2020.cnblogs.com/blog/2062718/202103/2062718-20210317160431751-1018531489.png"></p><p>看了挺久，主要是第二个部分到第三个部分，关于这个转换，在例图展示中如</p><p><img src="https://img2020.cnblogs.com/blog/2062718/202103/2062718-20210317160557574-763404376.png"></p><p>因为 s[0…3] == s[(i-3)…i] &amp;&amp; s[0…1] == s[(i-1)…i]，所以 s[0…1] == s[2…3] 的，所以指针 j 就可以直接转到 pi[j-1] 的地方，开始比较 s[j] 与 s[i+1];</p><p><img src="https://img2020.cnblogs.com/blog/2062718/202103/2062718-20210317161242927-685179460.png"></p><p>真的很佩服这三个人（跪下）</p><h2 id="j指针转移样例"><a href="#j指针转移样例" class="headerlink" title="j指针转移样例"></a>j指针转移样例</h2><p><img src="https://img2020.cnblogs.com/blog/2062718/202103/2062718-20210317163315413-1215274202.png"></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="洛谷P3375-【模板】KMP字符串匹配"><a href="#洛谷P3375-【模板】KMP字符串匹配" class="headerlink" title="洛谷P3375 【模板】KMP字符串匹配"></a>洛谷P3375 【模板】KMP字符串匹配</h2><p><a href="https://www.luogu.com.cn/problem/P3375" target="_blank">题链</a></p><p>字符以 0 为开头写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line"><span class="keyword">char</span> s[MS]; <span class="comment">// 文本串 </span></span><br><span class="line"><span class="keyword">char</span> e[MS]; <span class="comment">// 模式串 </span></span><br><span class="line">LL hs,he;  <span class="comment">// 串长 </span></span><br><span class="line">LL kp[MS]; <span class="comment">// 模式串 e 的前缀数组 </span></span><br><span class="line">LL kps[MS];<span class="comment">// 文本串 s 的前缀数组 </span></span><br><span class="line">LL ac[MS],tac;<span class="comment">// 记录答案 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp_e</span><span class="params">()</span></span>&#123; <span class="comment">// 求模式串 e 的前缀数组 </span></span><br><span class="line">kp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;he;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> j = kp[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; e[j] != e[i]) j = kp[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(e[j] == e[i]) j++;</span><br><span class="line">kp[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp_s</span><span class="params">()</span></span>&#123; <span class="comment">// 求文本串 s 的前缀数组  </span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hs;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span> &amp;&amp; s[i] != e[j]) j = kp[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(s[i] == e[j]) j++;</span><br><span class="line">kps[i] = j; <span class="comment">// 记录 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">cin &gt;&gt; e;</span><br><span class="line">hs = <span class="built_in">strlen</span>(s);</span><br><span class="line">he = <span class="built_in">strlen</span>(e);</span><br><span class="line"><span class="built_in">kmp_e</span>();</span><br><span class="line"><span class="built_in">kmp_s</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hs;i++)&#123; <span class="comment">// 若 s 前缀数组的值 与 模式串 e 相等 则记录位置 </span></span><br><span class="line"><span class="keyword">if</span>(kps[i] == he)&#123;</span><br><span class="line">ac[++tac] = i-he+<span class="number">1</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tac;i++)&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;he;i++)&#123;</span><br><span class="line">cout &lt;&lt; kp[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时隔一个多月还是写一写以 1 为开头的kmp;</p><p>感觉 1 开头的舒服些；</p><p>领悟了下 j 指针总是在模式串上跑的；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DBINF 1e100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> s1[MS];</span><br><span class="line"><span class="keyword">char</span> s2[MS];</span><br><span class="line"><span class="keyword">int</span> kmps1_s2[MS];</span><br><span class="line"><span class="keyword">int</span> kmps2[MS];</span><br><span class="line"><span class="keyword">int</span> ac[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; s1+<span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; s2+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> h1 = <span class="built_in">strlen</span>(s1+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> h2 = <span class="built_in">strlen</span>(s2+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,j=<span class="number">0</span>;i&lt;=h2;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j &amp;&amp; s2[i] != s2[j+<span class="number">1</span>]) j = kmps2[j];</span><br><span class="line"><span class="keyword">if</span>(s2[i] == s2[j+<span class="number">1</span>]) j++;</span><br><span class="line">kmps2[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=h1;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j &amp;&amp; s1[i] != s2[j+<span class="number">1</span>]) j = kmps2[j]; <span class="comment">// j 指针总是在模式串上的 kmp 跑 </span></span><br><span class="line"><span class="keyword">if</span>(s1[i] == s2[j+<span class="number">1</span>]) j++;</span><br><span class="line">kmps1_s2[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=h1;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(kmps1_s2[i] == h2)&#123;</span><br><span class="line">ac[++tot] = i-h2+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">cout &lt;&lt; ac[i] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=h2;i++)&#123;</span><br><span class="line">cout &lt;&lt; kmps2[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又时隔4个多月，用fft板子试试字符串匹配，当然求border还是kmp；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> s1[MS], s2[MS];</span><br><span class="line"><span class="keyword">int</span> kmps2[MS];</span><br><span class="line"><span class="keyword">int</span> h1, h2;</span><br><span class="line"><span class="keyword">double</span> A[MS], B[MS], S[MS];</span><br><span class="line"><span class="keyword">double</span> sumB, qzA[MS], jjSA[MS&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 洛谷 P3803 【模板】多项式乘法（FFT）</span></span><br><span class="line"><span class="comment">// MS = 1e6 </span></span><br><span class="line"><span class="comment">// time: max( 800ms ) </span></span><br><span class="line"><span class="comment">// ========================================================================================</span></span><br><span class="line"><span class="keyword">typedef</span> complex&lt;<span class="keyword">double</span>&gt; comp;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = (<span class="number">1</span>&lt;&lt;<span class="number">21</span>)+<span class="number">10</span>; <span class="comment">// 长度为原长度向上的2^n, 再乘 2  </span></span><br><span class="line"><span class="keyword">int</span> lim, r[N];</span><br><span class="line">comp a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(comp * a, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i ++)</span><br><span class="line"><span class="keyword">if</span>(i &lt; r[i]) <span class="built_in">swap</span>(a[i], a[r[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lim; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="function">comp <span class="title">x</span><span class="params">(cos(PI / i), type * sin(PI / i))</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lim; j += (i &lt;&lt; <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="function">comp <span class="title">y</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k ++, y *= x) &#123;</span><br><span class="line">comp p = a[j + k], q = y * a[j + k + i];</span><br><span class="line">a[j + k] = p + q; a[j + k + i] = p - q;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [0, n], [0, m]</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">double</span> *c1, <span class="keyword">int</span> n, <span class="keyword">double</span> *c2, <span class="keyword">int</span> m)</span></span>&#123; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) a[i] = c1[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i ++) b[i] = c2[i];</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(lim = <span class="number">1</span>; lim &lt;= n + m; lim &lt;&lt;= <span class="number">1</span>) ++ l;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; i ++)</span><br><span class="line">r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (l - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">fft</span>(a, <span class="number">1</span>), <span class="built_in">fft</span>(b, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= lim; i ++) a[i] *= b[i];</span><br><span class="line"><span class="built_in">fft</span>(a, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// 得出系数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; i ++) jjSA[i] = (LL)(<span class="number">0.5</span> + a[i].<span class="built_in">real</span>() / lim);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ========================================================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j &amp;&amp; s[i] != s[j]) j = kmps2[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(s[i] == s[j]) j++;</span><br><span class="line">kmps2[i] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s1); <span class="built_in">getchar</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s2); <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">int</span> h1 = <span class="built_in">strlen</span>(s1), h2 = <span class="built_in">strlen</span>(s2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h1;i++) A[i] = s1[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>; <span class="comment">// 文本串 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h2;i++) B[i] = s2[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>; <span class="comment">// 模式串 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h2;i++) S[i] = B[h2-i<span class="number">-1</span>];  <span class="comment">// 模式串翻转 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ∑B(i)^2 =&gt; sumB</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h2;i++) sumB += B[i]*B[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ∑A(i)^2 的前缀 =&gt; qzA[]</span></span><br><span class="line">qzA[<span class="number">0</span>] = A[<span class="number">0</span>]*A[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;h1;i++) qzA[i] = qzA[i<span class="number">-1</span>] + A[i]*A[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ∑S(i)A(j) =&gt; jjSA[]</span></span><br><span class="line"><span class="comment">// i+j=x</span></span><br><span class="line"><span class="built_in">get</span>(S, h2<span class="number">-1</span>, A, h1<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// P(x) = sumB + qzA[x] - qzA[x-h2] - 2*jjSA[x]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=h2<span class="number">-1</span>;x&lt;h1;x++)&#123;</span><br><span class="line"><span class="keyword">double</span> P;</span><br><span class="line"><span class="keyword">if</span>(x == h2<span class="number">-1</span>) P = sumB + qzA[x] - jjSA[x]*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> P = sumB + qzA[x] - qzA[x-h2] - jjSA[x]*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(P) &lt; eps)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,x-h2+<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">kmp</span>(s2, h2);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h2;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,kmps2[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【字符串哈希】字符串哈希</title>
      <link href="/2021/03/16/ACM/%E3%80%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/"/>
      <url>/2021/03/16/ACM/%E3%80%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C%E3%80%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/</url>
      
        <content type="html"><![CDATA[<p>#前言</p><p>均使用unsigned long long溢出自动取模；</p><p>非unsigned long long版本：<a href="https://oi-wiki.org/string/hash/" target="_blank">OI-wiki 字符串hash</a></p><p>#详解</p><p><img src="https://img2020.cnblogs.com/blog/2062718/202103/2062718-20210316154106303-1265303095.png"></p><p><img src="https://img2020.cnblogs.com/blog/2062718/202103/2062718-20210316154114439-558790842.jpg"></p><p>#模板</p><p>##预处理进制B的次方</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_bp</span><span class="params">()</span></span>&#123;</span><br><span class="line">bp[<span class="number">0</span>][<span class="number">0</span>] = bp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=hs;i++)&#123; <span class="comment">// hs: 字符串最大长度</span></span><br><span class="line">bp[<span class="number">0</span>][i] = bp[<span class="number">0</span>][i<span class="number">-1</span>]*B1;</span><br><span class="line">bp[<span class="number">1</span>][i] = bp[<span class="number">1</span>][i<span class="number">-1</span>]*B2;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##前缀hash</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_ha</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="comment">// 1...len</span></span><br><span class="line">++tha;</span><br><span class="line">ha[<span class="number">0</span>][tha] = ha[<span class="number">0</span>][tha<span class="number">-1</span>]*B1 + x;</span><br><span class="line">ha[<span class="number">1</span>][tha] = ha[<span class="number">1</span>][tha<span class="number">-1</span>]*B2 + x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##l…r的hash值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">get_ha</span><span class="params">(<span class="keyword">int</span> wh,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123; <span class="comment">// 1...len</span></span><br><span class="line"><span class="keyword">return</span> ha[wh][r] - ha[wh][l<span class="number">-1</span>]*bp[wh][r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#例题</p><p>##例题一</p><p><a href="https://www.acwing.com/problem/content/140/" target="_blank">ACwing 兔子与兔子</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> B1 131</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> B2 13331</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line"><span class="keyword">char</span> s[MS];</span><br><span class="line">LL hs;</span><br><span class="line">ULL bp[<span class="number">2</span>][MS];</span><br><span class="line">ULL ha[<span class="number">2</span>][MS],tha;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_bp</span><span class="params">()</span></span>&#123;</span><br><span class="line">bp[<span class="number">0</span>][<span class="number">0</span>] = bp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=hs;i++)&#123;</span><br><span class="line">bp[<span class="number">0</span>][i] = bp[<span class="number">0</span>][i<span class="number">-1</span>]*B1;</span><br><span class="line">bp[<span class="number">1</span>][i] = bp[<span class="number">1</span>][i<span class="number">-1</span>]*B2;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_ha</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">++tha;</span><br><span class="line">ha[<span class="number">0</span>][tha] = ha[<span class="number">0</span>][tha<span class="number">-1</span>]*B1 + x;</span><br><span class="line">ha[<span class="number">1</span>][tha] = ha[<span class="number">1</span>][tha<span class="number">-1</span>]*B2 + x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_ha</span><span class="params">(<span class="keyword">int</span> wh,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ha[wh][r] - ha[wh][l<span class="number">-1</span>]*bp[wh][r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; s+<span class="number">1</span>;</span><br><span class="line">hs = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">init_bp</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=hs;i++)&#123;</span><br><span class="line"><span class="built_in">add_ha</span>(s[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">LL l1,r1,l2,r2;</span><br><span class="line">cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">get_ha</span>(<span class="number">0</span>,l1,r1) == <span class="built_in">get_ha</span>(<span class="number">0</span>,l2,r2) &amp;&amp; <span class="built_in">get_ha</span>(<span class="number">1</span>,l1,r1) == <span class="built_in">get_ha</span>(<span class="number">1</span>,l2,r2)) cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##例题二</p><p><a href="https://www.luogu.com.cn/problem/P3370" target="_blank">洛谷P3370 【模板】字符串哈希</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> B1 131</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> B2 13331</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line"><span class="keyword">char</span> s[MS];</span><br><span class="line">LL hs;</span><br><span class="line">ULL bp[<span class="number">2</span>][MS];</span><br><span class="line">ULL ha[<span class="number">2</span>][MS],tha;</span><br><span class="line">map&lt;ULL,map&lt;ULL,ULL&gt; &gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_bp</span><span class="params">()</span></span>&#123;</span><br><span class="line">bp[<span class="number">0</span>][<span class="number">0</span>] = bp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1ll</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2000</span>;i++)&#123;</span><br><span class="line">bp[<span class="number">0</span>][i] = bp[<span class="number">0</span>][i<span class="number">-1</span>]*B1;</span><br><span class="line">bp[<span class="number">1</span>][i] = bp[<span class="number">1</span>][i<span class="number">-1</span>]*B2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_ha</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">++tha;</span><br><span class="line">ha[<span class="number">0</span>][tha] = ha[<span class="number">0</span>][tha<span class="number">-1</span>]*B1+x;</span><br><span class="line">ha[<span class="number">1</span>][tha] = ha[<span class="number">1</span>][tha<span class="number">-1</span>]*B2+x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">get_ha</span><span class="params">(<span class="keyword">int</span> wh,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ha[wh][r] - ha[wh][l<span class="number">-1</span>]*bp[wh][r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line">cin &gt;&gt; s+<span class="number">1</span>;</span><br><span class="line">LL hs = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">tha = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=hs;i++)&#123;</span><br><span class="line"><span class="built_in">add_ha</span>(s[i]);</span><br><span class="line">&#125;</span><br><span class="line">ULL t1 = <span class="built_in">get_ha</span>(<span class="number">0</span>,<span class="number">1</span>,hs);</span><br><span class="line">ULL t2 = <span class="built_in">get_ha</span>(<span class="number">1</span>,<span class="number">1</span>,hs);</span><br><span class="line"><span class="keyword">if</span>(!mp[t1][t2])&#123;</span><br><span class="line">mp[t1][t2] = <span class="number">1ull</span>;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树维护最大子段和】洛谷 P4513 小白逛公园</title>
      <link href="/2021/03/16/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%E3%80%91%E6%B4%9B%E8%B0%B7%20P4513%20%E5%B0%8F%E7%99%BD%E9%80%9B%E5%85%AC%E5%9B%AD/"/>
      <url>/2021/03/16/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%E3%80%91%E6%B4%9B%E8%B0%B7%20P4513%20%E5%B0%8F%E7%99%BD%E9%80%9B%E5%85%AC%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4513" target="_blank">题链</a></p><p>题意求区间最长连续子序列最大和</p><p>当数据存在负数时，不能单纯取三个地方的max，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p[rt].maxn = max(p[ls].rmax+p[rs].lmax,max(p[rt].lmax,p[rt].rmax));</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 500009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL sum;</span><br><span class="line">LL lmax,rmax;</span><br><span class="line">LL maxn;</span><br><span class="line">&#125;p[MS&lt;&lt;<span class="number">2</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt].sum = p[ls].sum + p[rs].sum;</span><br><span class="line">p[rt].lmax = <span class="built_in">max</span>(p[ls].lmax,p[ls].sum+p[rs].lmax);</span><br><span class="line">p[rt].rmax = <span class="built_in">max</span>(p[rs].rmax,p[rs].sum+p[ls].rmax);</span><br><span class="line"></span><br><span class="line"><span class="comment">//p[rt].maxn = max(p[ls].rmax+p[rs].lmax,max(p[rt].lmax,p[rt].rmax)); // 当数据存在负数时，该条不成立 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************/</span> <span class="comment">// 将所有可能对maxn产生影响的都取最大 </span></span><br><span class="line">LL sidemax = <span class="built_in">max</span>(p[rt].lmax,p[rt].rmax);</span><br><span class="line">LL midmax = <span class="built_in">max</span>(p[ls].rmax,p[rs].lmax);</span><br><span class="line">LL lrmaxn = <span class="built_in">max</span>(p[ls].maxn,p[rs].maxn);</span><br><span class="line">p[rt].maxn = <span class="built_in">max</span>(sidemax,midmax);</span><br><span class="line">p[rt].maxn = <span class="built_in">max</span>(p[rt].maxn,lrmaxn);</span><br><span class="line">p[rt].maxn = <span class="built_in">max</span>(p[rt].maxn,p[ls].rmax+p[rs].lmax);</span><br><span class="line"><span class="comment">/**************************************************/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">LL x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line">p[rt] = &#123;x,x,x,x&#125;;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">p[rt] = &#123;val,val,val,val&#125;;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">get_max</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">node ans;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= m &amp;&amp; m &lt; R)&#123;</span><br><span class="line">node t1 = <span class="built_in">get_max</span>(L,R,l,m,ls);</span><br><span class="line">node t2 = <span class="built_in">get_max</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line">ans.lmax = <span class="built_in">max</span>(t1.lmax,t1.sum+t2.lmax);</span><br><span class="line">ans.rmax = <span class="built_in">max</span>(t2.rmax,t2.sum+t1.rmax);</span><br><span class="line">ans.sum = t1.sum + t2.sum;</span><br><span class="line"><span class="comment">/**************************************************/</span> <span class="comment">// 将所有可能对maxn产生影响的都取最大 </span></span><br><span class="line">LL sidemax = <span class="built_in">max</span>(ans.lmax,ans.rmax);</span><br><span class="line">LL midmax = <span class="built_in">max</span>(t1.rmax,t2.lmax);</span><br><span class="line">LL lrmax = <span class="built_in">max</span>(t1.maxn,t2.maxn);</span><br><span class="line">ans.maxn = <span class="built_in">max</span>(sidemax,midmax);</span><br><span class="line">ans.maxn = <span class="built_in">max</span>(ans.maxn,lrmax);</span><br><span class="line">ans.maxn = <span class="built_in">max</span>(ans.maxn,t1.rmax+t2.lmax);</span><br><span class="line"><span class="comment">/**************************************************/</span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m &lt; L) <span class="keyword">return</span> <span class="built_in">get_max</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">get_max</span>(L,R,l,m,ls); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">LL op,l,r,pos,tar;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">if</span>(l &gt; r) <span class="built_in">swap</span>(l,r); <span class="comment">// 不交换则会在 TLE 之前就会出现 MLE </span></span><br><span class="line">node cc = <span class="built_in">get_max</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; cc.maxn &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cin &gt;&gt; pos &gt;&gt; tar;</span><br><span class="line"><span class="built_in">update</span>(pos,pos,<span class="number">1</span>,n,<span class="number">1</span>,tar);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树】洛谷 P2471 降雨量</title>
      <link href="/2021/03/16/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P2471%20%E9%99%8D%E9%9B%A8%E9%87%8F/"/>
      <url>/2021/03/16/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P2471%20%E9%99%8D%E9%9B%A8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P2471" target="_blank">题链</a></p><p>该题洛谷题解区讲的都很好；</p><p>当询问时， l == r时，答案有可能不是true… （奇怪的坑）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 50009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL p[MS][<span class="number">31</span>];</span><br><span class="line">LL ha[MS];</span><br><span class="line">LL lg2[MS];</span><br><span class="line">map&lt;LL,LL&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;X 年是自 Y 年以来降雨量最多的&quot;  </span></span><br><span class="line"><span class="comment">// 它的含义是 X 年的降雨量不超过 Y 年，且对于任意 Y&lt;Z&lt;X，Z 年的降雨量严格小于 X 年。</span></span><br><span class="line"><span class="comment">// 即有一个序列，最左边x的位置降雨量&gt;=最右边y的降雨量，且对于 x &lt; i &lt; y，所有i位置降雨量&lt;位置y </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_lg2</span><span class="params">()</span></span>&#123;</span><br><span class="line">lg2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) lg2[i] = lg2[i/<span class="number">2</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_st</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lg2[n];i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))&lt;=n;j++)&#123;</span><br><span class="line">p[j][i] = <span class="built_in">max</span>(p[j][i<span class="number">-1</span>],p[j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_max</span><span class="params">(LL l,LL r)</span></span>&#123;</span><br><span class="line">LL t = lg2[r-l+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(p[l][t],p[r-(<span class="number">1</span>&lt;&lt;t)+<span class="number">1</span>][t]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">init_lg2</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; ha[i] &gt;&gt; p[i][<span class="number">0</span>];</span><br><span class="line">mp[ha[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init_st</span>(); <span class="comment">// 预处理 st 表 </span></span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">LL x,y;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">LL l = <span class="built_in">lower_bound</span>(ha+<span class="number">1</span>,ha+n+<span class="number">1</span>,x) - ha;</span><br><span class="line">LL r = <span class="built_in">lower_bound</span>(ha+<span class="number">1</span>,ha+n+<span class="number">1</span>,y) - ha;</span><br><span class="line">LL cl = <span class="built_in">get_max</span>(l,l); <span class="comment">// 最左边降雨量 </span></span><br><span class="line">LL cr = <span class="built_in">get_max</span>(r,r); <span class="comment">// 最右边降雨量 </span></span><br><span class="line"><span class="comment">//if(l == r) cout &lt;&lt; &quot;true\n&quot;; // l == r 时竟然不是 true </span></span><br><span class="line"><span class="keyword">if</span>(l &gt; r) cout &lt;&lt; <span class="string">&quot;false\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!mp[x] &amp;&amp; !mp[y])&#123; <span class="comment">// 当两个年份降雨量都未知 </span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;maybe\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mp[x] &amp;&amp; !mp[y])&#123; <span class="comment">// 已知左边的降雨量 </span></span><br><span class="line">LL t = <span class="built_in">get_max</span>(l+<span class="number">1</span>,r<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(t &gt;= cl &amp;&amp; r<span class="number">-1</span>&gt;=l+<span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;false\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;maybe\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!mp[x] &amp;&amp; mp[y])&#123;  <span class="comment">// 已知右边的降雨量 </span></span><br><span class="line">LL t = <span class="built_in">get_max</span>(l,r<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(t &gt;= cr &amp;&amp; r<span class="number">-1</span>&gt;=l) cout &lt;&lt; <span class="string">&quot;false\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;maybe\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mp[x] &amp;&amp; mp[y])&#123; <span class="comment">// 两边都知 </span></span><br><span class="line"><span class="keyword">if</span>(cr &gt; cl) cout &lt;&lt; <span class="string">&quot;false\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y-x == r-l)&#123; <span class="comment">// 从左到右每一年都已知 </span></span><br><span class="line"><span class="keyword">if</span>(r == l+<span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;true\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">LL t = <span class="built_in">get_max</span>(l+<span class="number">1</span>,r<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(t &gt;= cr) cout &lt;&lt; <span class="string">&quot;false\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;true\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">// 从左到右有未知 </span></span><br><span class="line"><span class="keyword">if</span>(r == l+<span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;maybe\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">LL t = <span class="built_in">get_max</span>(l+<span class="number">1</span>,r<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(t &gt;= cr) cout &lt;&lt; <span class="string">&quot;false\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;maybe\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;----\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树 扫描线】洛谷 P5490 【模板】扫描线</title>
      <link href="/2021/03/15/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%20%E6%89%AB%E6%8F%8F%E7%BA%BF%E3%80%91%E6%B4%9B%E8%B0%B7%20P5490%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%89%AB%E6%8F%8F%E7%BA%BF/"/>
      <url>/2021/03/15/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%20%E6%89%AB%E6%8F%8F%E7%BA%BF%E3%80%91%E6%B4%9B%E8%B0%B7%20P5490%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%89%AB%E6%8F%8F%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P5490" target="_blank">题链</a></p><p>对于mark的引入:<br>如果不引入直接加，会出现某段区间被重复加的现象，要保证若某段区间被覆盖，则只需要加一次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL xl,xr,y,g;</span><br><span class="line">&#125;line[MS*<span class="number">2</span>];  <span class="comment">// 记录一排排的线 </span></span><br><span class="line">LL hx[MS*<span class="number">2</span>];    <span class="comment">// 对 x 轴上的坐标 hash </span></span><br><span class="line">LL mark[MS&lt;&lt;<span class="number">3</span>]; <span class="comment">// 标记区间是否被覆盖 </span></span><br><span class="line">LL sum[MS&lt;&lt;<span class="number">3</span>];  <span class="comment">// 主要用sum[1]计算被覆盖区间的总和 </span></span><br><span class="line">LL tli,thx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(mark[rt]) sum[rt] = hx[r+<span class="number">1</span>] - hx[l];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l == r) sum[rt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> sum[rt] = sum[ls] + sum[rs];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">mark[rt] += val;</span><br><span class="line"><span class="built_in">push_up</span>(rt,l,r);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt,l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL x1,y1,x2,y2;</span><br><span class="line">cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">hx[++tli] = x1;</span><br><span class="line">line[tli] = &#123;x1,x2,y1,<span class="number">1</span>&#125;;</span><br><span class="line">hx[++tli] = x2;</span><br><span class="line">line[tli] = &#123;x1,x2,y2,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(hx+<span class="number">1</span>,hx+tli+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">sort</span>(line+<span class="number">1</span>,line+tli+<span class="number">1</span>,cmp);</span><br><span class="line">thx = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tli;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(hx[i] != hx[i<span class="number">-1</span>]) hx[++thx] = hx[i];</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tli;i++)&#123;</span><br><span class="line">LL l = <span class="built_in">lower_bound</span>(hx+<span class="number">1</span>,hx+thx+<span class="number">1</span>,line[i].xl) - hx;</span><br><span class="line">LL r = <span class="built_in">lower_bound</span>(hx+<span class="number">1</span>,hx+thx+<span class="number">1</span>,line[i].xr) - hx <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">update</span>(l,r,<span class="number">1</span>,thx<span class="number">-1</span>,<span class="number">1</span>,line[i].g);</span><br><span class="line">ans += sum[<span class="number">1</span>]*(line[i+<span class="number">1</span>].y - line[i].y);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【并查集】洛谷 P1196 银河英雄传说</title>
      <link href="/2021/03/15/ACM/%E3%80%90%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P1196%20%E9%93%B6%E6%B2%B3%E8%8B%B1%E9%9B%84%E4%BC%A0%E8%AF%B4/"/>
      <url>/2021/03/15/ACM/%E3%80%90%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%91%E6%B4%9B%E8%B0%B7%20P1196%20%E9%93%B6%E6%B2%B3%E8%8B%B1%E9%9B%84%E4%BC%A0%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1196" target="_blank">题链</a></p><p>边带权并查集，val[i]记录编号为i的舰船距离根舰船的距离，合并时如x接到y所在舰队的末尾，fx，fy为x，y的根节点，并不是val[fx] += val[y]，这里的若不是真正舰队末尾则出错，需要sum[i]数组记录某一列舰队的数目，val[fx] += sum[fy];</p><p>具体如代码着重部分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 30009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL fa[MS];</span><br><span class="line">LL val[MS]; <span class="comment">// 编号为i的舰船距根节点距离 </span></span><br><span class="line">LL sum[MS]; <span class="comment">// 记录第i列总舰数 </span></span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">find</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x != fa[x])&#123;</span><br><span class="line">LL t = fa[x];</span><br><span class="line">fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">val[x] += val[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(LL x,LL y)</span></span>&#123;</span><br><span class="line">LL fx = <span class="built_in">find</span>(x);</span><br><span class="line">LL fy = <span class="built_in">find</span>(y);</span><br><span class="line">fa[fx] = fy;</span><br><span class="line"><span class="comment">/**********************/</span></span><br><span class="line">val[fx] += sum[fy];</span><br><span class="line">sum[fy] += sum[fx];</span><br><span class="line">sum[fx] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/**********************/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">30000</span>;i++) fa[i] = i ,sum[i] = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line">LL x,y;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line"><span class="built_in">merge</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(x) != <span class="built_in">find</span>(y)) <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">LL t1 = val[x];</span><br><span class="line">LL t2 = val[y];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">abs</span>(t1-t2)<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树状数组】洛谷 P1966 火柴排队</title>
      <link href="/2021/03/15/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E3%80%91%E6%B4%9B%E8%B0%B7%20P1966%20%E7%81%AB%E6%9F%B4%E6%8E%92%E9%98%9F/"/>
      <url>/2021/03/15/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E3%80%91%E6%B4%9B%E8%B0%B7%20P1966%20%E7%81%AB%E6%9F%B4%E6%8E%92%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1966" target="_blank">题链</a></p><p>若要将一个排列转换成另一个排列，一次只能交换相邻两个元素，例如将 a = {4, 3, 1, 2} 变成 b = {1, 3, 2, 4}，最少需要交换 a或b 几步；</p><p>新建 pa[a[i]] = i 记录排名a[i]的位置，pb[b[i]] = i 记录排名b[i]的位置，令p[pa[i]] = pb[i]（相当于映射）得到的p序列求逆序数则为答案；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 99999997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL a[MS],aa[MS],pa[MS];</span><br><span class="line">LL b[MS],bb[MS],pb[MS];</span><br><span class="line">LL p[MS];</span><br><span class="line">LL tr[MS];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lowbit</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL pos,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(;pos&lt;=n;pos+=<span class="built_in">lowbit</span>(pos))&#123;</span><br><span class="line">tr[pos] += val;</span><br><span class="line">tr[pos] %= mod;</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(LL pos)</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;pos;pos-=<span class="built_in">lowbit</span>(pos))&#123;</span><br><span class="line">ans += tr[pos];</span><br><span class="line">ans %= mod; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">aa[i] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin &gt;&gt; b[i];</span><br><span class="line">bb[i] = b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(aa+<span class="number">1</span>,aa+n+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">sort</span>(bb+<span class="number">1</span>,bb+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">a[i] = <span class="built_in">lower_bound</span>(aa+<span class="number">1</span>,aa+n+<span class="number">1</span>,a[i]) - aa;</span><br><span class="line">pa[a[i]] = i;</span><br><span class="line">b[i] = <span class="built_in">lower_bound</span>(bb+<span class="number">1</span>,bb+n+<span class="number">1</span>,b[i]) - bb;</span><br><span class="line">pb[b[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">p[pa[i]] = pb[i];</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">add</span>(n-p[i]+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">ans += <span class="built_in">get_sum</span>(n-p[i]);</span><br><span class="line">ans %= mod;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ST表】洛谷 P3865 【模板】ST表</title>
      <link href="/2021/03/14/ACM/%E3%80%90ST%E8%A1%A8%E3%80%91%E6%B4%9B%E8%B0%B7%20P3865%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91ST%E8%A1%A8/"/>
      <url>/2021/03/14/ACM/%E3%80%90ST%E8%A1%A8%E3%80%91%E6%B4%9B%E8%B0%B7%20P3865%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91ST%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><a href="https://oi-wiki.org/ds/sparse-table/">OI-Wiki</a></p><p><img src="https://img2020.cnblogs.com/blog/2062718/202103/2062718-20210314105106197-1725003181.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL lg2[MS]; </span><br><span class="line">LL p[MS][<span class="number">31</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">LL x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_lg2</span><span class="params">()</span></span>&#123;</span><br><span class="line">lg2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) lg2[i] = lg2[i/<span class="number">2</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line">m = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">init_lg2</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">p[i][<span class="number">0</span>] = <span class="built_in">read</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lg2[n];i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))&lt;=n;j++)&#123;</span><br><span class="line">p[j][i] = <span class="built_in">max</span>(p[j][i<span class="number">-1</span>],p[j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))][i<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">LL l,r;</span><br><span class="line">l = <span class="built_in">read</span>() , r = <span class="built_in">read</span>();</span><br><span class="line">LL t = lg2[r-l+<span class="number">1</span>];</span><br><span class="line">LL ans = <span class="built_in">max</span>(p[l][t],p[r-(<span class="number">1</span>&lt;&lt;t)+<span class="number">1</span>][t]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ST表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【优先队列】结构体优先队列自定义排序</title>
      <link href="/2021/03/14/ACM/%E3%80%90%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E3%80%91%E7%BB%93%E6%9E%84%E4%BD%93%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/03/14/ACM/%E3%80%90%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E3%80%91%E7%BB%93%E6%9E%84%E4%BD%93%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>重定义的时候就如写sort时的cmp一样，最后将return时候的”&gt;”,”&lt;”反过来就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 500009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL a,b,pos;</span><br><span class="line">&#125;p[MS];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node x,node y)&#123;</span><br><span class="line"><span class="keyword">if</span>(x.b == y.b) <span class="keyword">return</span> x.a &lt; y.a; <span class="comment">// b相等时 ,a从 大到小 排序 </span></span><br><span class="line"><span class="keyword">return</span> x.b &gt; y.b; <span class="comment">// b 从 小到大 排序 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node &gt; Q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL t1,t2;</span><br><span class="line">cin &gt;&gt; t1 &gt;&gt; t2;</span><br><span class="line">p[i] = &#123;t1,t2,i&#125;;</span><br><span class="line">Q.<span class="built_in">push</span>(p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!Q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">node e = Q.<span class="built_in">top</span>();</span><br><span class="line">cout &lt;&lt; e.a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; e.b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; e.pos &lt;&lt; endl;</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">5 5</span></span><br><span class="line"><span class="comment">5 4</span></span><br><span class="line"><span class="comment">4 2</span></span><br><span class="line"><span class="comment">4 1</span></span><br><span class="line"><span class="comment">2 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4 1 4</span></span><br><span class="line"><span class="comment">2 1 5</span></span><br><span class="line"><span class="comment">4 2 3</span></span><br><span class="line"><span class="comment">5 4 2</span></span><br><span class="line"><span class="comment">5 5 1</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优先队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【优先队列】洛谷 P3045 Cow Coupons G</title>
      <link href="/2021/03/14/ACM/%E3%80%90%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E3%80%91%E6%B4%9B%E8%B0%B7%20P3045%20Cow%20Coupons%20G/"/>
      <url>/2021/03/14/ACM/%E3%80%90%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E3%80%91%E6%B4%9B%E8%B0%B7%20P3045%20Cow%20Coupons%20G/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3045" target="_blank">题链</a></p><p>贪心把使用优惠劵后价格前K个一一压入队列（以队列 QQ 表示）直到钱不够（可以证明前K个是一定要买的，因为最赚），其他未被压入队列的价格压入队列 Q</p><p>例如价格前K个中某个产品以原价购买+后K个某个产品以优惠价购买也是可行的情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 1 5</span><br><span class="line">2 1</span><br><span class="line">1000 3</span><br></pre></td></tr></table></figure><p>则 QQ队列中以原价和优惠价的差值从小到大排序，Q 队列中以优惠价从小到大排序，判断 Q队列中能否加入到 QQ队列；</p><p>Q队列中是优惠价从小到大，若优惠价相同，则以原价从大到小排，因为这样最优且最赚；</p><p>若遍历 Q队列的时候，钱已经不够了（意味着优惠卷的使用已经到极限了），则需要再定义一个 QQQ队列存放未被买过的产品且以 原价 从小到大排序，用原价尝试剩余产品；</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(&quot;O2&quot;)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> one first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> two second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 500009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL a,b,pos; <span class="comment">// 优惠价,原价 </span></span><br><span class="line">&#125;p[MS];</span><br><span class="line">LL v[MS];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nod</span>&#123;</span></span><br><span class="line">LL a,b,pos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.b &lt; y.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (node x,node y)&#123;</span><br><span class="line"><span class="keyword">if</span>(x.b == y.b) <span class="keyword">return</span> x.a &lt; y.a;</span><br><span class="line"><span class="keyword">return</span> x.b &gt; y.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (nod x,nod y)&#123;</span><br><span class="line"><span class="keyword">return</span> x.a - x.b &gt; y.a - y.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node &gt; Q;</span><br><span class="line">priority_queue&lt;nod &gt; QQ;</span><br><span class="line">priority_queue&lt;LL,vector&lt;LL&gt;,greater&lt;LL&gt; &gt; QQQ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL t1,t2;</span><br><span class="line">cin &gt;&gt; t1 &gt;&gt; t2;</span><br><span class="line">p[i] = &#123;t1,t2,i&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(p+<span class="number">1</span>,p+n+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="comment">/*cout &lt;&lt; &quot; ----------------- &quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">for(int i=1;i&lt;=n;i++)&#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; p[i].a &lt;&lt; &quot; &quot; &lt;&lt; p[i].b &lt;&lt; &quot; &quot; &lt;&lt; p[i].pos &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; &quot; ------------------ &quot; &lt;&lt; endl;*/</span></span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m &amp;&amp; k-p[i].b&gt;=<span class="number">0</span>;i++)&#123;</span><br><span class="line">QQ.<span class="built_in">push</span>(&#123;p[i].a,p[i].b,p[i].pos&#125;);</span><br><span class="line">k -= p[i].b;</span><br><span class="line">v[p[i].pos] = <span class="number">1</span>;</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!v[p[i].pos])&#123;</span><br><span class="line">Q.<span class="built_in">push</span>(p[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!Q.<span class="built_in">empty</span>() &amp;&amp; !QQ.<span class="built_in">empty</span>())&#123;</span><br><span class="line">nod e1 = QQ.<span class="built_in">top</span>();</span><br><span class="line">node e2 = Q.<span class="built_in">top</span>();</span><br><span class="line"><span class="keyword">if</span>(k-(e1.a-e1.b)-e2.b &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">k = k-(e1.a-e1.b)-e2.b;</span><br><span class="line">ans++;</span><br><span class="line">QQ.<span class="built_in">pop</span>();</span><br><span class="line">QQ.<span class="built_in">push</span>(&#123;e2.a,e2.b,e2.pos&#125;);</span><br><span class="line">v[e2.pos] = <span class="number">1</span>; </span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!v[p[i].pos])&#123;</span><br><span class="line">QQQ.<span class="built_in">push</span>(p[i].a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!QQQ.<span class="built_in">empty</span>())&#123;</span><br><span class="line">LL e = QQQ.<span class="built_in">top</span>();</span><br><span class="line"><span class="keyword">if</span>(k - e &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">k -= e;</span><br><span class="line">ans++;</span><br><span class="line">QQQ.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 优先队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算几何】最小圆覆盖</title>
      <link href="/2021/03/09/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E6%9C%80%E5%B0%8F%E5%9C%86%E8%A6%86%E7%9B%96/"/>
      <url>/2021/03/09/ACM/%E3%80%90%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E3%80%91%E6%9C%80%E5%B0%8F%E5%9C%86%E8%A6%86%E7%9B%96/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5009</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">&#125;p[MAXN], C; <span class="comment">// p[i] 表示点集 ,C = &#123;x,y&#125; 表示圆心 </span></span><br><span class="line"><span class="keyword">double</span> R; <span class="comment">// 圆 半径  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(Point a, Point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">sqr</span>(a.x - b.x) + <span class="built_in">sqr</span>(a.y - b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeC</span><span class="params">(Point p1, Point p2, Point p3)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a = p2.x - p1.x,</span><br><span class="line">           b = p2.y - p1.y,</span><br><span class="line">           c = p3.x - p1.x,</span><br><span class="line">           d = p3.y - p1.y,</span><br><span class="line">           e = (<span class="built_in">sqr</span>(p2.x) - <span class="built_in">sqr</span>(p1.x) + <span class="built_in">sqr</span>(p2.y) - <span class="built_in">sqr</span>(p1.y)) / <span class="number">2</span>,</span><br><span class="line">           f = (<span class="built_in">sqr</span>(p3.x) - <span class="built_in">sqr</span>(p1.x) + <span class="built_in">sqr</span>(p3.y) - <span class="built_in">sqr</span>(p1.y)) / <span class="number">2</span>;</span><br><span class="line">    C.x = (e * d - b * f) / (a * d - b * c);</span><br><span class="line">    C.y = (a * f - e * c) / (a * d - b * c);</span><br><span class="line">    R = <span class="built_in">dis</span>(C, p1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">random_shuffle</span>(p + <span class="number">1</span>, p + N + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dis</span>(p[i], C) &lt; R) <span class="keyword">continue</span>;</span><br><span class="line">        C = p[i]; R = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">dis</span>(p[j], C) &lt; R) <span class="keyword">continue</span>;</span><br><span class="line">            C.x = (p[i].x + p[j].x) / <span class="number">2.0</span>;</span><br><span class="line">            C.y = (p[i].y + p[j].y) / <span class="number">2.0</span>;</span><br><span class="line">            R = <span class="built_in">dis</span>(C, p[j]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= j - <span class="number">1</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">dis</span>(p[k], C) &lt; R) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="built_in">MakeC</span>(p[i], p[j], p[k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">R = <span class="number">0</span>;</span><br><span class="line">C = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;N);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">double</span> ans = <span class="built_in">cal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10f\n&quot;</span>,ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】中缀表达式转化为后缀表达式</title>
      <link href="/2021/03/09/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2021/03/09/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/unixfy/p/3192446.html" target="_blank">习自</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line"><span class="keyword">char</span> s[MS]; <span class="comment">// 字符串读入中缀表达式 </span></span><br><span class="line">LL hs; <span class="comment">// 中缀表达式的len  </span></span><br><span class="line">stack&lt;LL&gt; fu;</span><br><span class="line">LL prfu[<span class="number">300</span>]; <span class="comment">// 定义 + - * / ^ 优先级 </span></span><br><span class="line">LL hz[MS],thz; <span class="comment">// 存放后缀表达式 ,若第i位为字符则 vf[i] = 1; </span></span><br><span class="line">LL vf[MS]; <span class="comment">// 标记 1 为符 ;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_prfu</span><span class="params">()</span></span>&#123; <span class="comment">// 定义 + - * / ^ 优先级 </span></span><br><span class="line">prfu[<span class="string">&#x27;(&#x27;</span>] = prfu[<span class="string">&#x27;)&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">prfu[<span class="string">&#x27;+&#x27;</span>] = prfu[<span class="string">&#x27;-&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">prfu[<span class="string">&#x27;*&#x27;</span>] = prfu[<span class="string">&#x27;/&#x27;</span>] = <span class="number">2</span>;</span><br><span class="line">prfu[<span class="string">&#x27;^&#x27;</span>] = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">s_hz</span><span class="params">()</span></span>&#123; <span class="comment">// 得到 后缀表达式 hz[1...thz] ,其中字符以数字表示 ,vf[i]=1 表示 hz[i] 为字符 </span></span><br><span class="line">hs = <span class="built_in">strlen</span>(s);</span><br><span class="line">LL num = <span class="number">0</span>;</span><br><span class="line">LL flnum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;hs;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;0&#x27;</span> &lt;= s[i] &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">flnum = <span class="number">1</span>;</span><br><span class="line">num = num*<span class="number">10</span>+(s[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flnum) hz[++thz] = num ,num = flnum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(fu.<span class="built_in">empty</span>())&#123;</span><br><span class="line">fu.<span class="built_in">push</span>(s[i]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&#x27;(&#x27;</span>) fu.<span class="built_in">push</span>(s[i]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(fu.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">hz[++thz] = fu.<span class="built_in">top</span>();</span><br><span class="line">vf[thz] = <span class="number">1</span>;</span><br><span class="line">fu.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">fu.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!fu.<span class="built_in">empty</span>() &amp;&amp; prfu[s[i]] &lt;= prfu[fu.<span class="built_in">top</span>()])&#123;</span><br><span class="line">hz[++thz] = fu.<span class="built_in">top</span>();</span><br><span class="line">vf[thz] = <span class="number">1</span>;</span><br><span class="line">fu.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">fu.<span class="built_in">push</span>(s[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flnum) hz[++thz] = num ,num = flnum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!fu.<span class="built_in">empty</span>())&#123;</span><br><span class="line">hz[++thz] = fu.<span class="built_in">top</span>();</span><br><span class="line">vf[thz] = <span class="number">1</span>;</span><br><span class="line">fu.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">init_prfu</span>();</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line"><span class="built_in">s_hz</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=thz;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vf[i]) <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>,hz[i]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,hz[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">88-(333+22*6)/55+4 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">88 333 22 6 * + 55 / - 4 + </span></span><br><span class="line"><span class="comment">*/</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树】2021牛客寒假算法基础集训营3 E-买礼物</title>
      <link href="/2021/03/03/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%912021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A53%20E-%E4%B9%B0%E7%A4%BC%E7%89%A9/"/>
      <url>/2021/03/03/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%912021%E7%89%9B%E5%AE%A2%E5%AF%92%E5%81%87%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%9B%86%E8%AE%AD%E8%90%A53%20E-%E4%B9%B0%E7%A4%BC%E7%89%A9/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/9983/E" target="_blank">题链</a></p><p>线段树记录第i个礼物与之相同的后一个礼物的位置；<br>  LL p[MS]; // 记录第i个礼物 后一个礼物位置<br>  LL q[MS]; // 记录第i个礼物 前一个礼物位置<br>关于修改：<br>1.删除第pos个礼物：在线段树中将其置为INF(表示该礼物不存在)，删除后该礼物左右所指向的礼物位置则需要更改;<br>2.第pos个礼物与之相同的前一个礼物，该礼物所指向的后一个礼物位置需要更新，即在线段树上修改p[q[pos]]的值为p[pos];<br>3.第pos个礼物与之相同的后一个礼物，该礼物所指向的前一个礼物位置需要更新，更新q[p[pos]]为q[pos];  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 500009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL p[MS]; <span class="comment">// 记录第i个礼物 后一个礼物位置 </span></span><br><span class="line">LL q[MS]; <span class="comment">// 记录第i个礼物 前一个礼物位置 </span></span><br><span class="line">LL a[MS]; <span class="comment">// 原数组 </span></span><br><span class="line">LL ne[<span class="number">1000009</span>];</span><br><span class="line">LL fr[<span class="number">1000009</span>];</span><br><span class="line">LL tr[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">tr[rt] = <span class="built_in">min</span>(tr[ls],tr[rs]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">tr[rt] = p[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_change</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">tr[rt] = val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update_change</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update_change</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_min</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> tr[rt];</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">LL ans = INF;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans = <span class="built_in">min</span>(ans,<span class="built_in">get_min</span>(L,R,l,m,ls));</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans = <span class="built_in">min</span>(ans,<span class="built_in">get_min</span>(L,R,m+<span class="number">1</span>,r,rs));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">fr[i] = <span class="number">0</span>;</span><br><span class="line">ne[i] = INF;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">p[i] = ne[a[i]];</span><br><span class="line">ne[a[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">q[i] = fr[a[i]];</span><br><span class="line">fr[a[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">LL op,l,r,pos;</span><br><span class="line">cin &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">cin &gt;&gt; pos;</span><br><span class="line"><span class="built_in">update_change</span>(pos,pos,<span class="number">1</span>,n,<span class="number">1</span>,INF);</span><br><span class="line"><span class="keyword">if</span>(q[pos] != <span class="number">0</span>)&#123;</span><br><span class="line">p[q[pos]] = p[pos];</span><br><span class="line"><span class="built_in">update_change</span>(q[pos],q[pos],<span class="number">1</span>,n,<span class="number">1</span>,p[pos]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(p[pos] != INF)&#123;</span><br><span class="line">q[p[pos]] = q[pos];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">get_min</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>) &lt;= r) cout &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树维护历史最值】UOJ 169 UR 11 元旦老人与数列</title>
      <link href="/2021/03/02/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E5%8E%86%E5%8F%B2%E6%9C%80%E5%80%BC%E3%80%91UOJ%20169%20UR%2011%20%E5%85%83%E6%97%A6%E8%80%81%E4%BA%BA%E4%B8%8E%E6%95%B0%E5%88%97/"/>
      <url>/2021/03/02/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E5%8E%86%E5%8F%B2%E6%9C%80%E5%80%BC%E3%80%91UOJ%20169%20UR%2011%20%E5%85%83%E6%97%A6%E8%80%81%E4%BA%BA%E4%B8%8E%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p><a href="https://uoj.ac/problem/169" target="_blank">题链</a></p><p>此题与<a href="https://www.cnblogs.com/Tecode/p/14438134.html">洛谷P6242 【模板】线段树 3</a>为孪生题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 500009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1e18</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL minf[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line">LL minse[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line">LL laminf[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line">LL laoth[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">LL hisminf[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line">LL lahisminf[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line">LL lahisoth[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=<span class="built_in">getchar</span>();ll s=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())s=s*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> s*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">minf[rt] = <span class="built_in">min</span>(minf[ls],minf[rs]);</span><br><span class="line">hisminf[rt] = <span class="built_in">min</span>(hisminf[ls],hisminf[rs]);</span><br><span class="line"><span class="keyword">if</span>(minf[ls] == minf[rs])</span><br><span class="line">minse[rt] = <span class="built_in">min</span>(minse[ls],minse[rs]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(minf[ls] &lt; minf[rs])</span><br><span class="line">minse[rt] = <span class="built_in">min</span>(minse[ls],minf[rs]);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">minse[rt] = <span class="built_in">min</span>(minf[ls],minse[rs]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,LL k1,LL k2,LL k3,LL k4)</span></span>&#123;</span><br><span class="line">hisminf[rt] = <span class="built_in">min</span>(hisminf[rt],minf[rt]+k3);</span><br><span class="line">lahisminf[rt] = <span class="built_in">min</span>(lahisminf[rt],laminf[rt]+k3);</span><br><span class="line">lahisoth[rt] = <span class="built_in">min</span>(lahisoth[rt],laoth[rt]+k4);</span><br><span class="line"></span><br><span class="line">minf[rt] += k1;</span><br><span class="line"><span class="keyword">if</span>(minse[rt] != INF) minse[rt] += k2;</span><br><span class="line">laminf[rt] += k1;</span><br><span class="line">laoth[rt] += k2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">LL minn = <span class="built_in">min</span>(minf[ls],minf[rs]);</span><br><span class="line"><span class="keyword">if</span>(minf[ls] == minn) <span class="built_in">update</span>(ls,laminf[rt],laoth[rt],lahisminf[rt],lahisoth[rt]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(ls,laoth[rt],laoth[rt],lahisoth[rt],lahisoth[rt]);</span><br><span class="line"><span class="keyword">if</span>(minf[rs] == minn) <span class="built_in">update</span>(rs,laminf[rt],laoth[rt],lahisminf[rt],lahisoth[rt]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(rs,laoth[rt],laoth[rt],lahisoth[rt],lahisoth[rt]);</span><br><span class="line"></span><br><span class="line">laminf[rt] = laoth[rt] = <span class="number">0</span>;</span><br><span class="line">lahisminf[rt] = lahisoth[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">laminf[rt] = <span class="number">0</span>;</span><br><span class="line">laoth[rt] = <span class="number">0</span>;</span><br><span class="line">lahisminf[rt] = <span class="number">0</span>;</span><br><span class="line">lahisoth[rt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">LL x;</span><br><span class="line">x = <span class="built_in">read</span>();</span><br><span class="line">minf[rt] = x;</span><br><span class="line">minse[rt] = INF;</span><br><span class="line">hisminf[rt] = x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_add</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="built_in">update</span>(rt,val,val,val,val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update_add</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update_add</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_max</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(minf[rt] &gt;= val) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R &amp;&amp; minse[rt] &gt; val)&#123;</span><br><span class="line"><span class="built_in">update</span>(rt,val-minf[rt],<span class="number">0</span>,val-minf[rt],<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update_max</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update_max</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_min</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> minf[rt];</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line">LL ans = INF;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans = <span class="built_in">min</span>(ans,<span class="built_in">get_min</span>(L,R,l,m,ls));</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans = <span class="built_in">min</span>(ans,<span class="built_in">get_min</span>(L,R,m+<span class="number">1</span>,r,rs));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_hismin</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> hisminf[rt];</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line">LL ans = INF;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans = <span class="built_in">min</span>(ans,<span class="built_in">get_hismin</span>(L,R,l,m,ls));</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans = <span class="built_in">min</span>(ans,<span class="built_in">get_hismin</span>(L,R,m+<span class="number">1</span>,r,rs));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">n = <span class="built_in">read</span>();</span><br><span class="line">m = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">LL op,l,r,val;</span><br><span class="line">op = <span class="built_in">read</span>();</span><br><span class="line">l = <span class="built_in">read</span>() , r = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">val = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">update_add</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">val = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">update_max</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">get_min</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">get_hismin</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树维护历史最值】洛谷 P6242 【模板】线段树 3</title>
      <link href="/2021/02/23/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E5%8E%86%E5%8F%B2%E6%9C%80%E5%80%BC%E3%80%91%E6%B4%9B%E8%B0%B7%20P6242%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%203/"/>
      <url>/2021/02/23/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%BB%B4%E6%8A%A4%E5%8E%86%E5%8F%B2%E6%9C%80%E5%80%BC%E3%80%91%E6%B4%9B%E8%B0%B7%20P6242%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%203/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P6242" target="_blank">题链</a></p><p>此题即<a href="https://www.cnblogs.com/Tecode/p/14425782.html" target="_blank">Picks loves segment tree</a>增加询问历史最值</p><p><img src="https://img2020.cnblogs.com/blog/2062718/202102/2062718-20210223205739542-810718982.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 500009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 20000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 11431471</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> B 231</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM 37101101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BB 312</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL sum[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 区间和 </span></span><br><span class="line">LL maxf[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 区间最大值 </span></span><br><span class="line">LL cntf[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 区间最大值个数 </span></span><br><span class="line">LL maxse[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 区间第二大值 </span></span><br><span class="line">LL lamaxf[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// la_区间最大值需加的数 </span></span><br><span class="line">LL laoth[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// la_区间非最大值需加的数 </span></span><br><span class="line">LL hismaxf[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 区间历史最大值 </span></span><br><span class="line">LL lahismaxf[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// la_最大的区间历史最大值需加的数 </span></span><br><span class="line">LL lahisoth[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// la_非最大的区间历史最大值需加的数 </span></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=<span class="built_in">getchar</span>();ll s=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())s=s*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> s*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">sum[rt] = sum[ls] + sum[rs];</span><br><span class="line">maxf[rt] = <span class="built_in">max</span>(maxf[ls],maxf[rs]);</span><br><span class="line">hismaxf[rt] = <span class="built_in">max</span>(hismaxf[ls],hismaxf[rs]); <span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span>(maxf[ls] == maxf[rs])&#123;</span><br><span class="line">cntf[rt] = cntf[ls] + cntf[rs];</span><br><span class="line">maxse[rt] = <span class="built_in">max</span>(maxse[ls],maxse[rs]); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maxf[ls] &gt; maxf[rs])&#123;</span><br><span class="line">cntf[rt] = cntf[ls];</span><br><span class="line">maxse[rt] = <span class="built_in">max</span>(maxse[ls],maxf[rs]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cntf[rt] = cntf[rs];</span><br><span class="line">maxse[rt] = <span class="built_in">max</span>(maxf[ls],maxse[rs]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">lamaxf[rt] = <span class="number">0</span>;</span><br><span class="line">laoth[rt] = <span class="number">0</span>;</span><br><span class="line">lahismaxf[rt] = <span class="number">0</span>; </span><br><span class="line">lahisoth[rt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">LL x;</span><br><span class="line">x = <span class="built_in">read</span>();</span><br><span class="line">sum[rt] = x;</span><br><span class="line">maxf[rt] = x;</span><br><span class="line">cntf[rt] = <span class="number">1</span>;</span><br><span class="line">maxse[rt] = <span class="number">-1e18</span>;</span><br><span class="line">hismaxf[rt] = x; <span class="comment">//</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL k1,LL k2,LL k3,LL k4)</span></span>&#123;</span><br><span class="line"><span class="comment">// 最大值加成 ,非最大值加成 ,最大值的历史最大加成 ,非最大值的历史最大加成 </span></span><br><span class="line">sum[rt] += cntf[rt]*k1+(r-l+<span class="number">1</span>-cntf[rt])*k2;</span><br><span class="line"><span class="comment">//***// </span></span><br><span class="line">hismaxf[rt] = <span class="built_in">max</span>(hismaxf[rt],maxf[rt]+k3); <span class="comment">//  </span></span><br><span class="line">lahismaxf[rt] = <span class="built_in">max</span>(lahismaxf[rt],lamaxf[rt]+k3); <span class="comment">// </span></span><br><span class="line">lahisoth[rt] = <span class="built_in">max</span>(lahisoth[rt],laoth[rt]+k4); <span class="comment">//</span></span><br><span class="line"><span class="comment">//***// </span></span><br><span class="line">maxf[rt] += k1;</span><br><span class="line"><span class="keyword">if</span>(maxse[rt] != <span class="number">-1e18</span>) maxse[rt] += k2;</span><br><span class="line">lamaxf[rt] += k1;</span><br><span class="line">laoth[rt] += k2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">LL maxn = <span class="built_in">max</span>(maxf[ls],maxf[rs]);</span><br><span class="line"><span class="keyword">if</span>(maxf[ls] == maxn) <span class="built_in">update</span>(ls,l,m,lamaxf[rt],laoth[rt],lahismaxf[rt],lahisoth[rt]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(ls,l,m,laoth[rt],laoth[rt],lahisoth[rt],lahisoth[rt]);</span><br><span class="line"><span class="keyword">if</span>(maxf[rs] == maxn) <span class="built_in">update</span>(rs,m+<span class="number">1</span>,r,lamaxf[rt],laoth[rt],lahismaxf[rt],lahisoth[rt]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(rs,m+<span class="number">1</span>,r,laoth[rt],laoth[rt],lahisoth[rt],lahisoth[rt]);</span><br><span class="line">lamaxf[rt] = laoth[rt] = <span class="number">0</span>;</span><br><span class="line">lahismaxf[rt] = lahisoth[rt] = <span class="number">0</span>; <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_add</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="built_in">update</span>(rt,l,r,val,val,val,val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update_add</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update_add</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_min</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(maxf[rt] &lt;= val) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R &amp;&amp; val &gt; maxse[rt])&#123;</span><br><span class="line"><span class="built_in">update</span>(rt,l,r,val-maxf[rt],<span class="number">0</span>,val-maxf[rt],<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update_min</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update_min</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> sum[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans += <span class="built_in">get_sum</span>(L,R,l,m,ls);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans += <span class="built_in">get_sum</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_max</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> maxf[rt];</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line">LL ans = <span class="number">-1e18</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans = <span class="built_in">max</span>(ans,<span class="built_in">get_max</span>(L,R,l,m,ls));</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans = <span class="built_in">max</span>(ans,<span class="built_in">get_max</span>(L,R,m+<span class="number">1</span>,r,rs));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_hismax</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123; <span class="comment">//</span></span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> hismaxf[rt]; </span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line">LL ans = <span class="number">-1e18</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans = <span class="built_in">max</span>(ans,<span class="built_in">get_hismax</span>(L,R,l,m,ls));</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans = <span class="built_in">max</span>(ans,<span class="built_in">get_hismax</span>(L,R,m+<span class="number">1</span>,r,rs));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>() ,m = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">LL op,l,r,val;</span><br><span class="line">op = <span class="built_in">read</span>();</span><br><span class="line">l = <span class="built_in">read</span>() ,r = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">val = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">update_add</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">val = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">update_min</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>,val);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">get_sum</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">get_max</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">get_hismax</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">LL te;</span><br><span class="line">te = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(te--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树】Picks loves segment tree</title>
      <link href="/2021/02/21/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91Picks%20loves%20segment%20tree/"/>
      <url>/2021/02/21/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91Picks%20loves%20segment%20tree/</url>
      
        <content type="html"><![CDATA[<p><a href="https://wzoi.cc/s/21/3050" target="_blank">题链</a></p><p>关于修改：<br>min修改：直接递归到节点（maxse &lt; val &lt; maxf）,转化为对节点最大值的加减；<br>add修改：划分为对 节点最大值 和 节点其余值 的加减；<br>lazy标记 最大值的加减lamaxf 和 其余值的加减laoth<br>重点在于将 min修改 和 add修改 变为同一修改  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 500009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 20000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 11431471</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> B 231</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM 37101101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BB 312</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL sum[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 区间和 </span></span><br><span class="line">LL maxf[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 区间最大值 </span></span><br><span class="line">LL cntf[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 区间最大值个数 </span></span><br><span class="line">LL maxse[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 区间第二大值 </span></span><br><span class="line">LL lamaxf[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// la_区间最大值需加的数 </span></span><br><span class="line">LL laoth[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// la_区间非最大值需加的数 </span></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=<span class="built_in">getchar</span>();ll s=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())s=s*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> s*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">sum[rt] = sum[ls] + sum[rs];</span><br><span class="line">maxf[rt] = <span class="built_in">max</span>(maxf[ls],maxf[rs]);</span><br><span class="line"><span class="keyword">if</span>(maxf[ls] == maxf[rs])&#123;</span><br><span class="line">cntf[rt] = cntf[ls] + cntf[rs];</span><br><span class="line">maxse[rt] = <span class="built_in">max</span>(maxse[ls],maxse[rs]); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maxf[ls] &gt; maxf[rs])&#123;</span><br><span class="line">cntf[rt] = cntf[ls];</span><br><span class="line">maxse[rt] = <span class="built_in">max</span>(maxse[ls],maxf[rs]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cntf[rt] = cntf[rs];</span><br><span class="line">maxse[rt] = <span class="built_in">max</span>(maxf[ls],maxse[rs]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">lamaxf[rt] = <span class="number">0</span>;</span><br><span class="line">laoth[rt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">LL x;</span><br><span class="line">x = <span class="built_in">read</span>();</span><br><span class="line">sum[rt] = x;</span><br><span class="line">maxf[rt] = x;</span><br><span class="line">cntf[rt] = <span class="number">1</span>;</span><br><span class="line">maxse[rt] = <span class="number">-1e18</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,LL k1,LL k2)</span></span>&#123;</span><br><span class="line">sum[rt] += cntf[rt]*k1+(r-l+<span class="number">1</span>-cntf[rt])*k2;</span><br><span class="line">maxf[rt] += k1;</span><br><span class="line"><span class="keyword">if</span>(maxse[rt] != <span class="number">-1e18</span>) maxse[rt] += k2;</span><br><span class="line">lamaxf[rt] += k1;</span><br><span class="line">laoth[rt] += k2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">LL m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">LL maxn = <span class="built_in">max</span>(maxf[ls],maxf[rs]);</span><br><span class="line"><span class="keyword">if</span>(maxf[ls] == maxn) <span class="built_in">update</span>(ls,l,m,lamaxf[rt],laoth[rt]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(ls,l,m,laoth[rt],laoth[rt]);</span><br><span class="line"><span class="keyword">if</span>(maxf[rs] == maxn) <span class="built_in">update</span>(rs,m+<span class="number">1</span>,r,lamaxf[rt],laoth[rt]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">update</span>(rs,m+<span class="number">1</span>,r,laoth[rt],laoth[rt]);</span><br><span class="line">lamaxf[rt] = laoth[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_add</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="built_in">update</span>(rt,l,r,val,val);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update_add</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update_add</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_min</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(maxf[rt] &lt;= val) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R &amp;&amp; val &gt; maxse[rt])&#123;</span><br><span class="line"><span class="built_in">update</span>(rt,l,r,val-maxf[rt],<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update_min</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update_min</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> sum[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans += <span class="built_in">get_sum</span>(L,R,l,m,ls);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans += <span class="built_in">get_sum</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>() ,m = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">LL op,l,r,val;</span><br><span class="line">op = <span class="built_in">read</span>();</span><br><span class="line">l = <span class="built_in">read</span>() ,r = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">val = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">update_min</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">val = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">update_add</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>,val);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">get_sum</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">LL te;</span><br><span class="line">te = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(te--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树】HDU-5306 Gorgeous Sequence</title>
      <link href="/2021/02/21/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91HDU-5306%20Gorgeous%20Sequence/"/>
      <url>/2021/02/21/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91HDU-5306%20Gorgeous%20Sequence/</url>
      
        <content type="html"><![CDATA[<p><a href="https://vjudge.net/problem/HDU-5306" target="_blank">题链</a></p><p>关于修改：直接递归到节点（maxse &lt; val &lt; maxf）,转化为只关于该节点最大值的加减;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 20000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 11431471</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> B 231</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MM 37101101</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BB 312</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL sum[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 区间和 </span></span><br><span class="line">LL maxf[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 区间最大值 </span></span><br><span class="line">LL cntf[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 区间最大值个数 </span></span><br><span class="line">LL maxse[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// 区间第二大值 </span></span><br><span class="line">LL lamaxf[MS&lt;&lt;<span class="number">2</span>]; <span class="comment">// la_区间最大值需加的数 </span></span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c=<span class="built_in">getchar</span>();ll s=<span class="number">0</span>,f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())<span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())s=s*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> s*f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">sum[rt] = sum[ls] + sum[rs];</span><br><span class="line">maxf[rt] = <span class="built_in">max</span>(maxf[ls],maxf[rs]);</span><br><span class="line"><span class="keyword">if</span>(maxf[ls] == maxf[rs])&#123;</span><br><span class="line">cntf[rt] = cntf[ls] + cntf[rs];</span><br><span class="line">maxse[rt] = <span class="built_in">max</span>(maxse[ls],maxse[rs]); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(maxf[ls] &gt; maxf[rs])&#123;</span><br><span class="line">cntf[rt] = cntf[ls];</span><br><span class="line">maxse[rt] = <span class="built_in">max</span>(maxse[ls],maxf[rs]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cntf[rt] = cntf[rs];</span><br><span class="line">maxse[rt] = <span class="built_in">max</span>(maxf[ls],maxse[rs]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">lamaxf[rt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">LL x;</span><br><span class="line">x = <span class="built_in">read</span>();</span><br><span class="line">sum[rt] = x;</span><br><span class="line">maxf[rt] = x;</span><br><span class="line">cntf[rt] = <span class="number">1</span>;</span><br><span class="line">maxse[rt] = <span class="number">-1e18</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">build</span>(l,m,ls);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line">sum[rt] += val*cntf[rt];</span><br><span class="line">maxf[rt] += val;</span><br><span class="line">lamaxf[rt] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">LL maxn = <span class="built_in">max</span>(maxf[ls],maxf[rs]);</span><br><span class="line"><span class="keyword">if</span>(maxf[ls] == maxn) <span class="built_in">update</span>(ls,lamaxf[rt]);</span><br><span class="line"><span class="keyword">if</span>(maxf[rs] == maxn) <span class="built_in">update</span>(rs,lamaxf[rt]);</span><br><span class="line">lamaxf[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_min</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(maxf[rt] &lt;= val) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R &amp;&amp; val &gt; maxse[rt])&#123;</span><br><span class="line"><span class="built_in">update</span>(rt,val-maxf[rt]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update_min</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update_min</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> sum[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans += <span class="built_in">get_sum</span>(L,R,l,m,ls);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans += <span class="built_in">get_sum</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_max</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> maxf[rt];</span><br><span class="line"><span class="built_in">push_down</span>(rt);</span><br><span class="line">LL ans = <span class="number">-1e18</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) ans = <span class="built_in">max</span>(ans,<span class="built_in">get_max</span>(L,R,l,m,ls));</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) ans = <span class="built_in">max</span>(ans,<span class="built_in">get_max</span>(L,R,m+<span class="number">1</span>,r,rs));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">n = <span class="built_in">read</span>() ,m = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">LL op,l,r,val;</span><br><span class="line">op = <span class="built_in">read</span>();</span><br><span class="line">l = <span class="built_in">read</span>() ,r = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">0</span>)&#123;</span><br><span class="line">val = <span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">update_min</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">get_max</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">get_sum</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">LL te;</span><br><span class="line">te = <span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(te--)&#123;</span><br><span class="line"><span class="built_in">solve</span>();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树】洛谷 P3373 【模板】线段树 2</title>
      <link href="/2021/02/16/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3373%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%202/"/>
      <url>/2021/02/16/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3373%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%202/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3373" target="_blank">题链</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 20000009</span></span><br><span class="line"><span class="comment">//#define mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"></span><br><span class="line">LL mod;</span><br><span class="line">LL n,m,k;</span><br><span class="line">LL p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line">LL la_add[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line">LL la_mul[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">la_mul[rt] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">init</span>(l,m,ls);</span><br><span class="line"><span class="built_in">init</span>(m+<span class="number">1</span>,r,rs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt] = p[ls] + p[rs];</span><br><span class="line">p[rt] %= mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">p[ls] = (p[ls]*la_mul[rt]+la_add[rt]*(m-l+<span class="number">1</span>))%mod;</span><br><span class="line">p[rs] = (p[rs]*la_mul[rt]+la_add[rt]*(r-m))%mod;</span><br><span class="line"></span><br><span class="line">la_mul[ls] = (la_mul[ls]*la_mul[rt])%mod;</span><br><span class="line">la_mul[rs] = (la_mul[rs]*la_mul[rt])%mod;</span><br><span class="line"></span><br><span class="line">la_add[ls] = (la_add[ls]*la_mul[rt]+la_add[rt])%mod;</span><br><span class="line">la_add[rs] = (la_add[rs]*la_mul[rt]+la_add[rt])%mod;</span><br><span class="line"></span><br><span class="line">la_add[rt] = <span class="number">0</span>;</span><br><span class="line">la_mul[rt] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_add</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">p[rt] += (r-l+<span class="number">1</span>)*val;</span><br><span class="line">p[rt] %= mod;</span><br><span class="line">la_add[rt] += val;</span><br><span class="line">la_add[rt] %= mod;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update_add</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update_add</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_mul</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line">p[rt] *= val;</span><br><span class="line">p[rt] %= mod;</span><br><span class="line">la_mul[rt] *= val;</span><br><span class="line">la_mul[rt] %= mod;</span><br><span class="line">la_add[rt] *= val;</span><br><span class="line">la_add[rt] %= mod;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update_mul</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update_mul</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line">LL cc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) cc = (cc+<span class="built_in">get_sum</span>(L,R,l,m,ls))%mod;</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) cc = (cc+<span class="built_in">get_sum</span>(L,R,m+<span class="number">1</span>,r,rs))%mod;</span><br><span class="line"><span class="keyword">return</span> cc%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; mod;</span><br><span class="line"><span class="built_in">init</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">update_add</span>(i,i,<span class="number">1</span>,n,<span class="number">1</span>,x%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">LL op,l,r,val;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">cin &gt;&gt; val;</span><br><span class="line"><span class="built_in">update_mul</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">cin &gt;&gt; val;</span><br><span class="line"><span class="built_in">update_add</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">LL ans = <span class="built_in">get_sum</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树】洛谷 P3372 【模板】线段树 1</title>
      <link href="/2021/02/16/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3372%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%201/"/>
      <url>/2021/02/16/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E6%B4%9B%E8%B0%B7%20P3372%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%201/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P3372" target="_blank">题链</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 20000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pair pair<span class="meta-string">&lt;LL,LL&gt;</span></span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL p[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line">LL la[MS&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (l&lt;=r) &amp;&amp; (L&lt;=l) &amp;&amp; (r&lt;=R); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line">p[rt] = p[ls] + p[rs];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(la[rt])&#123;</span><br><span class="line"><span class="keyword">int</span> m = l+r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">p[ls] += la[rt]*(m-l+<span class="number">1</span>);</span><br><span class="line">p[rs] += la[rt]*(r-m);</span><br><span class="line">la[ls] += la[rt];</span><br><span class="line">la[rs] += la[rt];</span><br><span class="line">la[rt] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">in</span>(L,l,r,R))&#123;</span><br><span class="line">p[rt] += (r-l+<span class="number">1</span>)*val;</span><br><span class="line">la[rt] += val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) <span class="built_in">update</span>(L,R,l,m,ls,val);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) <span class="built_in">update</span>(L,R,m+<span class="number">1</span>,r,rs,val);</span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">in</span>(L,l,r,R))&#123;</span><br><span class="line"><span class="keyword">return</span> p[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">push_down</span>(rt,l,r);</span><br><span class="line">LL cc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> m = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m &gt;= L) cc += <span class="built_in">get_sum</span>(L,R,l,m,ls);</span><br><span class="line"><span class="keyword">if</span>(m &lt;  R) cc += <span class="built_in">get_sum</span>(L,R,m+<span class="number">1</span>,r,rs);</span><br><span class="line"><span class="keyword">return</span> cc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">LL x;</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="built_in">update</span>(i,i,<span class="number">1</span>,n,<span class="number">1</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">LL op,l,r,val;</span><br><span class="line">cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">if</span>(op == <span class="number">2</span>)&#123;</span><br><span class="line">LL ans = <span class="built_in">get_sum</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">cin &gt;&gt; val;</span><br><span class="line"><span class="built_in">update</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>,val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Codeforces】Codeforces Round 664 (Div. 2)</title>
      <link href="/2020/08/15/ACM/%E3%80%90Codeforces%E3%80%91Codeforces%20Round%20664%20(Div.%202)/"/>
      <url>/2020/08/15/ACM/%E3%80%90Codeforces%E3%80%91Codeforces%20Round%20664%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Boboniu-Likes-to-Color-Balls"><a href="#A-Boboniu-Likes-to-Color-Balls" class="headerlink" title="A. Boboniu Likes to Color Balls"></a>A. Boboniu Likes to Color Balls</h1><p>Boboniu gives you</p><p>r red balls,<br>g green balls,<br>b blue balls,<br>w white balls.</p><p>He allows you to do the following operation as many times as you want:</p><p>Pick a red ball, a green ball, and a blue ball and then change their color to white.<br>You should answer if it’s possible to arrange all the balls into a palindrome after several (possibly zero) number of described operations.</p><p><em>Input</em><br>The first line contains one integer T (1≤T≤100) denoting the number of test cases.</p><p>For each of the next T cases, the first line contains four integers r, g, b and w (0≤r,g,b,w≤10^9).</p><p><em>Output</em><br>For each test case, print “Yes” if it’s possible to arrange all the balls into a palindrome after doing several (possibly zero) number of described operations. Otherwise, print “No”.</p><p><strong>Example</strong><br><strong>input</strong></p><blockquote><p>4<br>0 1 1 1<br>8 1 9 3<br>0 0 0 0<br>1000000000 1000000000 1000000000 1000000000</p></blockquote><p><strong>output</strong></p><blockquote><p>No<br>Yes<br>Yes<br>Yes</p></blockquote><p><strong>Note</strong><br>In the first test case, you’re not able to do any operation and you can never arrange three balls of distinct colors into a palindrome.</p><p>In the second test case, after doing one operation, changing (8,1,9,3) to (7,0,8,6), one of those possible palindromes may be “rrrwwwbbbbrbbbbwwwrrr”.</p><p>A palindrome is a word, phrase, or sequence that reads the same backwards as forwards. For example, “rggbwbggr”, “b”, “gg” are palindromes while “rgbb”, “gbbgr” are not. Notice that an empty word, phrase, or sequence is palindrome.</p><p>题意: 给你四种球 ,每种球 <strong>r ,g ,b ,w</strong> 个 ,并且允许将 1 个 r ,1 个 g ,1 个 b ,替换为 3 个 w ,问能否将这些球排成一列 ,使其形成回文串 .</p><p>解: 注意到当 r ,g ,b ,w 的个数全是偶数时 ,可以构成回文 ,当有三个为偶数一个为奇数时显然也可以 .题给予的操作可以把 r ,g ,b ,w 的个数在奇偶间替换 .当有两个偶两个奇时 ,操作一遍后依旧是两偶两奇 ,则不行 .当一偶三奇时 ,操作一遍变为三偶一奇,则可行 .只需特判不能操作时是否可行即可 ,如案例中 0 1 1 1 一偶三奇无法进行操作则不行 .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 309</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line">LL n,m,k,te;</span><br><span class="line">LL p[MS],tot; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">cin &gt;&gt; te;</span><br><span class="line"><span class="keyword">while</span>(te--)&#123;</span><br><span class="line">LL r,g,b,w,ou = <span class="number">0</span>,ji = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; r &gt;&gt; g &gt;&gt; b &gt;&gt; w;</span><br><span class="line">LL t = <span class="built_in">min</span>(r,<span class="built_in">min</span>(g,b));</span><br><span class="line"><span class="keyword">if</span>(r&amp;<span class="number">1</span>) ji++;</span><br><span class="line"><span class="keyword">else</span> ou++;</span><br><span class="line"><span class="keyword">if</span>(g&amp;<span class="number">1</span>) ji++;</span><br><span class="line"><span class="keyword">else</span> ou++;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ji++;</span><br><span class="line"><span class="keyword">else</span> ou++;</span><br><span class="line"><span class="keyword">if</span>(w&amp;<span class="number">1</span>) ji++;</span><br><span class="line"><span class="keyword">else</span> ou++;</span><br><span class="line"><span class="keyword">if</span>(ji&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">0</span> || ji == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ji&gt;=<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>#B. Boboniu Plays Chess</p><p>Boboniu likes playing chess with his employees. As we know, no employee can beat the boss in the chess game, so Boboniu has never lost in any round.</p><p>You are a new applicant for his company. Boboniu will test you with the following chess question:</p><p>Consider a n×m grid (rows are numbered from 1 to n, and columns are numbered from 1 to m). You have a chess piece, and it stands at some cell (Sx,Sy) which is not on the border (i.e. 2≤Sx≤n−1 and 2≤Sy≤m−1).</p><p>From the cell (x,y), you can move your chess piece to (x,y′) (1≤y′≤m,y′≠y) or (x′,y) (1≤x′≤n,x′≠x). In other words, the chess piece moves as a rook. From the cell, you can move to any cell on the same row or column.</p><p>Your goal is to visit each cell exactly once. Can you find a solution?</p><p>Note that cells on the path between two adjacent cells in your route are not counted as visited, and it is not required to return to the starting point.</p><p><em>Input</em><br>The only line of the input contains four integers n, m, Sx and Sy (3≤n,m≤100, 2≤Sx≤n−1, 2≤Sy≤m−1) — the number of rows, the number of columns, and the initial position of your chess piece, respectively.</p><p><em>Output</em><br>You should print n⋅m lines.</p><p>The i-th line should contain two integers xi and yi (1≤xi≤n, 1≤yi≤m), denoting the i-th cell that you visited. You should print exactly nm pairs (xi,yi), they should cover all possible pairs (xi,yi), such that 1≤xi≤n, 1≤yi≤m.</p><p>We can show that under these constraints there always exists a solution. If there are multiple answers, print any.</p><p><strong>Examples</strong></p><p><strong>input</strong></p><blockquote><p>3 3 2 2</p></blockquote><p><strong>output</strong></p><blockquote><p>2 2<br>1 2<br>1 3<br>2 3<br>3 3<br>3 2<br>3 1<br>2 1<br>1 1</p></blockquote><p><strong>input</strong></p><blockquote><p>3 4 2 2</p></blockquote><p><strong>output</strong></p><blockquote><p>2 2<br>2 1<br>2 3<br>2 4<br>1 4<br>3 4<br>3 3<br>3 2<br>3 1<br>1 1<br>1 2<br>1 3</p></blockquote><p><strong>Note</strong><br>Possible routes for two examples:</p><p><img src="https://img2020.cnblogs.com/blog/2062718/202008/2062718-20200813012021288-1800694086.png"></p><p>题意: 有 n*m 的一个棋盘 ,你扮演象棋棋子的 “车” ,拥有 “车” 的行走规则 ,给定初始位置 ,求只允许访问每个点一次 ,输出访问的先后顺序 .(象棋种有起子落子 ,“车” 的落子的位置称为 “访问” ,经过的路径上不算 “访问” ) .</p><p>解: 设初始位置在行 x 列 y 处 ,则先把第 x 行先左后右访问一遍 ,最后抵达 x 行 m 列处 .从该点先向下 “蛇形” 访问 ,形如字母 “S” ,直到最后 n 行 ,再回到 x-1 行向上 “蛇形” 访问即可 .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 309</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line">LL n,m,k,te;</span><br><span class="line">LL p[MS],tot; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=y;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,x,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=y+<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,x,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x+<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>((i-x)%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,j);</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,j);</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=x<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,j);</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,j);</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#C. Boboniu and Bit Operations</p><p>Boboniu likes bit operations. He wants to play a game with you.</p><p>Boboniu gives you two sequences of non-negative integers a1,a2,…,an and b1,b2,…,bm.</p><p>For each i (1≤i≤n), you’re asked to choose a j (1≤j≤m) and let ci=ai&amp;bj, where &amp; denotes the bitwise AND operation. Note that you can pick the same j for different i’s.</p><p>Find the minimum possible c1|c2|…|cn, where | denotes the bitwise OR operation.</p><p><em>Input</em><br>The first line contains two integers n and m (1≤n,m≤200).</p><p>The next line contains n integers a1,a2,…,an (0≤ai&lt;2^9).</p><p>The next line contains m integers b1,b2,…,bm (0≤bi&lt;2^9).</p><p><em>Output</em><br>Print one integer: the minimum possible c1|c2|…|cn.</p><p><strong>Examples</strong></p><p><strong>input</strong></p><blockquote><p>4 2<br>2 6 4 0<br>2 4</p></blockquote><p><strong>output</strong></p><blockquote><p>2</p></blockquote><p><strong>input</strong></p><blockquote><p>7 6<br>1 9 1 9 8 1 0<br>1 1 4 5 1 4</p></blockquote><p><strong>output</strong></p><blockquote><p>0</p></blockquote><p><strong>input</strong></p><blockquote><p>8 5<br>179 261 432 162 82 43 10 38<br>379 357 202 184 197</p></blockquote><p><strong>output</strong></p><blockquote><p>147</p></blockquote><p><strong>Note</strong><br>For the first example, we have c1=a1&amp;b2=0, c2=a2&amp;b1=2, c3=a3&amp;b1=0, c4=a4&amp;b1=0.Thus c1|c2|c3|c4=2, and this is the minimal answer we can get.</p><p>题意: 给定两个长度分别为 n ,m 的数组 a ,b ,对于每一个 ai (1≤i≤n) ,都要选择一个 bj (1≤j≤m) ,使得 ci = ai &amp; bi ,求 c1 | c2 | ··· | cn 的最小值.</p><p>解: 注意到数据小于 2^9 ,则最后答案不超过 2^9 ,对于每一个 ai 都有 m 种选择方案 ,从小到大枚举答案ans ,若 a1 分别与 m 个 b数组中的元素匹配后的结果中有 ans 的子集 (将 “010” 作为 “110” 的子集) ,则继续询问 a2 … 若未找到子集 ,则询问 ans+1 …</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 309</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k,te;</span><br><span class="line"><span class="keyword">int</span> a[MS],b[MS],tot; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123; <span class="comment">// x是否是y的子集</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>( ((x&gt;&gt;i)&amp;<span class="number">1</span>) &amp;&amp; !((y&gt;&gt;i)&amp;<span class="number">1</span>) )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) cin &gt;&gt; b[i];</span><br><span class="line"><span class="keyword">int</span> ans,flag,fl;</span><br><span class="line"><span class="keyword">for</span>(ans = <span class="number">0</span>;ans &lt; <span class="number">512</span>;ans++)&#123;</span><br><span class="line">flag = <span class="number">0</span>; <span class="comment">// 标记当前ans是否可行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">fl = <span class="number">0</span>; <span class="comment">// 标记 ai 是否可行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> cc = a[i] &amp; b[j];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(cc,ans))&#123;</span><br><span class="line">fl = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!fl) <span class="keyword">break</span>; <span class="comment">// 未找到枚举 ans+1</span></span><br><span class="line"><span class="keyword">if</span>(i == n)&#123; <span class="comment">// 全部枚举完 ai ,当前ans可行</span></span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#D. Boboniu Chats with Du</p><p>Have you ever used the chat application QQ? Well, in a chat group of QQ, administrators can muzzle a user for days.</p><p>In Boboniu’s chat group, there’s a person called Du Yi who likes to make fun of Boboniu every day.</p><p>Du will chat in the group for n days. On the i-th day:</p><p>If Du can speak, he’ll make fun of Boboniu with fun factor ai. But after that, he may be muzzled depending on Boboniu’s mood.<br>Otherwise, Du won’t do anything.<br>Boboniu’s mood is a constant m. On the i-th day:</p><p>If Du can speak and ai&gt;m, then Boboniu will be angry and muzzle him for d days, which means that Du won’t be able to speak on the i+1,i+2,⋯,min(i+d,n)-th days.<br>Otherwise, Boboniu won’t do anything.<br>The total fun factor is the sum of the fun factors on the days when Du can speak.</p><p>Du asked you to find the maximum total fun factor among all possible permutations of a.</p><p><em>Input</em><br>The first line contains three integers n, d and m (1≤d≤n≤105,0≤m≤109).</p><p>The next line contains n integers a1,a2,…,an (0≤ai≤109).</p><p><em>Output</em><br>Print one integer: the maximum total fun factor among all permutations of a.</p><p><strong>Examples</strong></p><p><strong>input</strong></p><blockquote><p>5 2 11<br>8 10 15 23 5</p></blockquote><p><strong>output</strong></p><blockquote><p>48</p></blockquote><p><strong>input</strong></p><blockquote><p>20 2 16<br>20 5 8 2 18 16 2 16 16 1 5 16 2 13 6 16 4 17 21 7</p></blockquote><p><strong>output</strong></p><blockquote><p>195</p></blockquote><p><strong>Note</strong><br>In the first example, you can set a′=[15,5,8,10,23]. Then Du’s chatting record will be:</p><p>Make fun of Boboniu with fun factor 15.<br>Be muzzled.<br>Be muzzled.<br>Make fun of Boboniu with fun factor 10.<br>Make fun of Boboniu with fun factor 23.<br>Thus the total fun factor is 48.</p><p>题意: 在QQ聊天群中 ,管理员可以连续几天禁言一名用户 .Du 喜欢在QQ群中与 Boboniu 开玩笑 .Du 将在QQ群中聊天 n 天 .在第 i 天 ,如果 Du 能说话 ,他将会得到值为 ai 的快乐值 ,但他也许会被禁言这取决于 Boboniu 的心情 ,否则什么也不会做 .如果 Du 能说话并且 ai &gt; m ,这样Boboniu 就会生气并禁言 Du 随后的d天 ,这意味着 Du 在 i+1 ,i+2 , … ,min(i+d,n) 不能说话 .在 a 的所有可能排列中 ,找到 Du 一共能获得最多的快乐值总和 .</p><p>解: 把大于 m 和 小于等于 m 的区分来放 ,一个大于 m 的可以带走 d 天 .设大于 m 的天数为 x ,小于的为 y ,在大于 m 中选择 t 天 (当然选择最大的几个) ,其中一天可以放在序列末尾 ,所以一共消耗 cost = (t-1)*(d+1)+1 天 ,剩下的 n-cost 天则在小于 m 的序列中选择 ,枚举 t 即可 . </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line">LL n,m,k,te,ans;</span><br><span class="line">LL p[MS],high[MS],low[MS]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(LL a,LL b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false);</span></span><br><span class="line">LL cnt1 = <span class="number">0</span> ,cnt2 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;p[i]);</span><br><span class="line"><span class="keyword">if</span>(p[i]&gt;k) high[++cnt1] = p[i];</span><br><span class="line"><span class="keyword">else</span> low[++cnt2] = p[i];</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">sort</span>(high+<span class="number">1</span>,high+cnt1+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="built_in">sort</span>(low+<span class="number">1</span>,low+cnt2+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cnt2;i++) low[i] += low[i<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">LL ans = low[cnt2], pos, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt1;i++)&#123;</span><br><span class="line">res += high[i];</span><br><span class="line">pos = (i<span class="number">-1</span>)*(m+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pos &gt; n) <span class="keyword">break</span>;</span><br><span class="line">pos = n - pos;</span><br><span class="line">pos = <span class="built_in">min</span>(pos,cnt2);</span><br><span class="line">ans = <span class="built_in">max</span>(ans,res+low[pos]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】等比数列求和取模</title>
      <link href="/2020/07/24/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E7%AD%89%E6%AF%94%E6%95%B0%E5%88%97%E6%B1%82%E5%92%8C%E5%8F%96%E6%A8%A1/"/>
      <url>/2020/07/24/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E7%AD%89%E6%AF%94%E6%95%B0%E5%88%97%E6%B1%82%E5%92%8C%E5%8F%96%E6%A8%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200724224346688-539001102.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 9901</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL p[MS];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL n ,LL m)</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">1</span>%mod;</span><br><span class="line"><span class="keyword">for</span>(;m;m&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(m&amp;<span class="number">1</span>) ans = ans*n%mod;</span><br><span class="line">n = n*n%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">calc</span><span class="params">(LL n ,LL m)</span></span>&#123; <span class="comment">// 1+n+n^2+...+n^m;</span></span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m&amp;<span class="number">1</span>) <span class="built_in"><span class="keyword">return</span></span> (<span class="number">1</span>+<span class="built_in">qpow</span>(n,(m+<span class="number">1</span>)/<span class="number">2</span>))*<span class="built_in">calc</span>(n,m/<span class="number">2</span>)%mod;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in"><span class="keyword">return</span></span> ((<span class="number">1</span>+<span class="built_in">qpow</span>(n,m/<span class="number">2</span>))*<span class="built_in">calc</span>(n,m/<span class="number">2</span><span class="number">-1</span>)%mod+<span class="built_in">qpow</span>(n,m))%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">LL a1 ,q ,tot; <span class="comment">// 首项 ,公比 ,项数</span></span><br><span class="line">cin &gt;&gt; a1 &gt;&gt; q &gt;&gt; tot;</span><br><span class="line">tot--;</span><br><span class="line">cout &lt;&lt; <span class="function">a1*<span class="title">calc</span><span class="params">(q,tot)</span>%mod &lt;&lt; endl</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【二分图】判断二分图</title>
      <link href="/2020/07/15/ACM/%E3%80%90%E4%BA%8C%E5%88%86%E5%9B%BE%E3%80%91%E5%88%A4%E6%96%AD%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
      <url>/2020/07/15/ACM/%E3%80%90%E4%BA%8C%E5%88%86%E5%9B%BE%E3%80%91%E5%88%A4%E6%96%AD%E4%BA%8C%E5%88%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="染色法"><a href="#染色法" class="headerlink" title="染色法"></a>染色法</h1><p>学习自<a href="https://blog.csdn.net/weixin_44073496/article/details/85033393" target="_blank">详解1</a> ,<a href="https://blog.csdn.net/qq_38956769/article/details/80238896#%E5%9B%9B%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95" target="_blank">详解2</a></p><h2 id="例题-1"><a href="#例题-1" class="headerlink" title="例题 1"></a>例题 1</h2><p><a href="http://poj.org/problem?id=2492" target="_blank">POJ 2492 “A Bug’s Life”</a></p><p>解: 判断是否为二分图即可 ,同时可能有多个连通图 ,需要多次搜索染色 .</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码 1"></a>示例代码 1</h3><p>说明: 邻接矩阵存图 ,dfs搜索染色 .</p><p>时间 4704MS … 题目给了10000MS 管他呢 .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 2009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k,u,v,flag;</span><br><span class="line"><span class="keyword">int</span> mp[MS][MS];</span><br><span class="line"><span class="keyword">int</span> col[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> bt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[bt][i])&#123;</span><br><span class="line"><span class="keyword">if</span>(col[i] == col[bt])&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(col[i] == <span class="number">-1</span>)&#123;</span><br><span class="line">col[i] = !col[bt];</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> o=<span class="number">1</span>;o&lt;=k;o++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(mp,<span class="number">0</span>,<span class="keyword">sizeof</span> mp);</span><br><span class="line"><span class="built_in">memset</span>(col,<span class="number">-1</span>,<span class="keyword">sizeof</span> col);</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">mp[u][v] = mp[v][u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(col[i] == <span class="number">-1</span>)&#123;</span><br><span class="line">col[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Scenario #&quot;</span> &lt;&lt; o &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Suspicious bugs found!&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Scenario #&quot;</span> &lt;&lt; o &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No suspicious bugs found!&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码 2"></a>示例代码 2</h3><p>说明: 链式前向星存图 ,dfs搜索染色 .</p><p>时间 4407MS… 和邻接矩阵差不了多少 ,就当再练一次吧 .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 2009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k,u,v,flag,tot;</span><br><span class="line"><span class="keyword">int</span> col[MS];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,ne;</span><br><span class="line">&#125;edge[<span class="number">2000009</span>];</span><br><span class="line"><span class="keyword">int</span> head[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">edge[tot].to = v;</span><br><span class="line">edge[tot].ne = head[u];</span><br><span class="line">head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> bt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[bt];i!=<span class="number">-1</span>;i=edge[i].ne)&#123;</span><br><span class="line"><span class="keyword">int</span> it = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(col[it] == col[bt])&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(col[it] == <span class="number">-1</span>)&#123;</span><br><span class="line">col[it] = !col[bt];</span><br><span class="line"><span class="built_in">dfs</span>(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> o=<span class="number">1</span>;o&lt;=k;o++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MS;i++) col[i] = head[i] = <span class="number">-1</span>;</span><br><span class="line">flag = tot = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="built_in">add</span>(u,v);</span><br><span class="line"><span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(col[i] == <span class="number">-1</span>)&#123;</span><br><span class="line">col[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Scenario #&quot;</span> &lt;&lt; o &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Suspicious bugs found!&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Scenario #&quot;</span> &lt;&lt; o &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No suspicious bugs found!&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="例题-2"><a href="#例题-2" class="headerlink" title="例题 2"></a>例题 2</h2><p><a href="https://codeforces.ml/contest/1093/problem/D" target="_blank">cf 1093D “Beautiful Graph”</a></p><p>题意: k 组样例 ,每次给出 n 个顶点 m 条边的无向图 ,将整个图的所有顶点填充数字 ,每个顶点 u 可填数字 <strong>1，2，3</strong> . 要求 m 条边每条边连接的两个顶点 (u,v) 的填充的数字权值之和为<strong>奇数</strong> .问这样的填充方法有多少个 .方案可能很大，取模998244353 .</p><p>如果没有则输出0.</p><p>解: 先将其分为二分图 ,得到两个集合 X ,Y ,当 X 中填 2 此时 Y 中每个点都有 1 3 两种选择 ,所以有 2^y 种 . 反过来 Y 填 2 则有 2^x 种 ,所以每一个连通图都有 2^x + 2^y 种 . 可能出现多个连通图 ,累乘即可 .</p><p>注意要对 2 的次方作打表处理 ,当时傻傻的用快速幂超时 …</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 300009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line">LL n,m,k,u,v,flag,cx,cy;</span><br><span class="line">LL col[MS],er[MS];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">LL to,ne;</span><br><span class="line">&#125;edge[MS&lt;&lt;<span class="number">1</span>];</span><br><span class="line">LL head[MS],tc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL a,LL b)</span></span>&#123;</span><br><span class="line">edge[tc].to = b;</span><br><span class="line">edge[tc].ne = head[a];</span><br><span class="line">head[a] = tc++; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(LL bt,LL cc)</span></span>&#123; <span class="comment">// bfs也行</span></span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[bt];i!=<span class="number">-1</span>;i=edge[i].ne)&#123;</span><br><span class="line">LL tt = edge[i].to;</span><br><span class="line"><span class="keyword">if</span>(col[tt] == col[bt])&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(col[tt] == <span class="number">-1</span>)&#123;</span><br><span class="line">col[tt] = !cc;</span><br><span class="line"><span class="keyword">if</span>(col[tt] == <span class="number">0</span>) cx++; <span class="comment">// x 集合元素个数++ </span></span><br><span class="line"><span class="keyword">else</span> cy++; <span class="comment">// y 集合元素个数++ </span></span><br><span class="line"><span class="built_in">dfs</span>(tt,!cc);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">er[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;MS;i++)&#123; <span class="comment">// 2 的次方 </span></span><br><span class="line">er[i] = er[i<span class="number">-1</span>]*<span class="number">2LL</span>%mod;</span><br><span class="line">&#125;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">LL ans = <span class="number">1</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">head[i] = col[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123; <span class="comment">// 链式前向星 </span></span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="built_in">add</span>(u,v);</span><br><span class="line"><span class="built_in">add</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123; <span class="comment">// 也许有多个连通图 </span></span><br><span class="line"><span class="keyword">if</span>(col[i] == <span class="number">-1</span>)&#123;</span><br><span class="line">cx = cy = <span class="number">0</span>;</span><br><span class="line">cx++; <span class="comment">// 记录 X 集合元素个数 </span></span><br><span class="line">col[i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(i,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">ans = ans*(er[cx]+er[cy])%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag) cout &lt;&lt; <span class="number">0</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【图论】链式前向星</title>
      <link href="/2020/07/14/ACM/%E3%80%90%E5%9B%BE%E8%AE%BA%E3%80%91%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/"/>
      <url>/2020/07/14/ACM/%E3%80%90%E5%9B%BE%E8%AE%BA%E3%80%91%E9%93%BE%E5%BC%8F%E5%89%8D%E5%90%91%E6%98%9F/</url>
      
        <content type="html"><![CDATA[<p>该算法学习来自 <a href="https://www.bilibili.com/video/BV1b7411u7uq?p=1&share_medium=android&share_plat=android&share_source=COPY&share_tag=s_i&timestamp=1594280040&unique_k=Ytznlo" target="_blank">b站</a></p><h1 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码 1"></a>示例代码 1</h1><p>输出的访问顺序与输入相反</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,u,v,w,tot;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to;</span><br><span class="line"><span class="keyword">int</span> nxt;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125;edge[MS];</span><br><span class="line"><span class="keyword">int</span> head[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">edge[tot].to = v;</span><br><span class="line">edge[tot].val = w;</span><br><span class="line">edge[tot].nxt = head[u];</span><br><span class="line">head[u] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line"><span class="built_in">add</span>(u,v,w);</span><br><span class="line"><span class="built_in">add</span>(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MS;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=head[i];j!=<span class="number">-1</span>;j=edge[j].nxt)&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt; edge[j].to &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; edge[j].val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">init</span>(); </span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">intput:</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 2 2 </span></span><br><span class="line"><span class="comment">1 3 4  </span></span><br><span class="line"><span class="comment">2 3 8  </span></span><br><span class="line"><span class="comment">4 5 6 </span></span><br><span class="line"><span class="comment">8 9 3 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1-&gt;3:4</span></span><br><span class="line"><span class="comment">1-&gt;2:2</span></span><br><span class="line"><span class="comment">2-&gt;3:8</span></span><br><span class="line"><span class="comment">2-&gt;1:2</span></span><br><span class="line"><span class="comment">3-&gt;2:8</span></span><br><span class="line"><span class="comment">3-&gt;1:4</span></span><br><span class="line"><span class="comment">4-&gt;5:6</span></span><br><span class="line"><span class="comment">5-&gt;4:6</span></span><br><span class="line"><span class="comment">8-&gt;9:3</span></span><br><span class="line"><span class="comment">9-&gt;8:3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码 2"></a>示例代码 2</h1><p>感觉用 vector 更加好理解 ,虽然不是链式前向星了 ,但是代码简单 ,其输出访问顺序与输入相同 .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,u,v,w;</span><br><span class="line"><span class="keyword">int</span> val[MS][MS]; </span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; mp[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">val[u][v] = val[v][u] = w;</span><br><span class="line">mp[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">mp[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;it:mp[i])&#123;</span><br><span class="line">cout &lt;&lt; i &lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt; it &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; val[i][it] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">intput:</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">1 2 2 </span></span><br><span class="line"><span class="comment">1 3 4  </span></span><br><span class="line"><span class="comment">2 3 8  </span></span><br><span class="line"><span class="comment">4 5 6 </span></span><br><span class="line"><span class="comment">8 9 3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1-&gt;2:2</span></span><br><span class="line"><span class="comment">1-&gt;3:4</span></span><br><span class="line"><span class="comment">2-&gt;1:2</span></span><br><span class="line"><span class="comment">2-&gt;3:8</span></span><br><span class="line"><span class="comment">3-&gt;1:4</span></span><br><span class="line"><span class="comment">3-&gt;2:8</span></span><br><span class="line"><span class="comment">4-&gt;5:6</span></span><br><span class="line"><span class="comment">5-&gt;4:6</span></span><br><span class="line"><span class="comment">8-&gt;9:3</span></span><br><span class="line"><span class="comment">9-&gt;8:3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【二分图】匈牙利算法</title>
      <link href="/2020/07/14/ACM/%E3%80%90%E4%BA%8C%E5%88%86%E5%9B%BE%E3%80%91%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/"/>
      <url>/2020/07/14/ACM/%E3%80%90%E4%BA%8C%E5%88%86%E5%9B%BE%E3%80%91%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h1><p><a href="https://blog.csdn.net/lw277232240/article/details/72615522?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.nonecase" target="_blank">简单易懂的详解</a> .</p><p>我愿称之为 ntr 算法</p><h1 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">LL mp[MS][MS]; <span class="comment">// 关系图 1 有 0 无 </span></span><br><span class="line">LL vis[MS]; <span class="comment">//  表示是否询问过</span></span><br><span class="line">LL match[MS]; <span class="comment">// 表示匹配关系</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[x][i] &amp;&amp; !vis[i])&#123; <span class="comment">// 有关系且未被询问过 </span></span><br><span class="line">vis[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!match[i] || <span class="built_in">find</span>(match[i]))&#123; </span><br><span class="line">match[i] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>题目<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2063" target="_blank">POJ 2063</a> .</p><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 509</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line">LL n,m,k; <span class="comment">// 男生人数 ,女生人数 ,关系个数 </span></span><br><span class="line">LL mp[MS][MS]; <span class="comment">// 关系图 1 有 0 无 </span></span><br><span class="line">LL vis[MS]; <span class="comment">//  表示是否询问过</span></span><br><span class="line">LL match[MS]; <span class="comment">// 表示匹配关系 match[1] = 2 表示 1号男 与 2号女 牵手 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(LL x)</span></span>&#123; <span class="comment">// x 表示任何一个女生 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[x][i] &amp;&amp; !vis[i])&#123; <span class="comment">// 有关系且未被询问过 </span></span><br><span class="line">vis[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!match[i] || <span class="built_in">find</span>(match[i]))&#123; <span class="comment">// 男生没被牵手 或者 被ntr </span></span><br><span class="line">match[i] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">while</span>(cin &gt;&gt; k)&#123;</span><br><span class="line"><span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(match,<span class="number">0</span>,<span class="keyword">sizeof</span> match);</span><br><span class="line"><span class="built_in">memset</span>(mp,<span class="number">0</span>,<span class="keyword">sizeof</span> mp);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m; <span class="comment">// 女 男 人数 </span></span><br><span class="line">LL u,v,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">mp[u][v] = <span class="number">1</span>; <span class="comment">// 表示 女u 愿意与 男v 牵手 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(i)) ans++; <span class="comment">// i号 女生牵手成功 </span></span><br><span class="line">&#125; </span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl; <span class="comment">// 配对成功数量 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找</title>
      <link href="/2020/07/08/ACM/%E6%9F%A5%E6%89%BE/"/>
      <url>/2020/07/08/ACM/%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表的查找"><a href="#线性表的查找" class="headerlink" title="线性表的查找"></a>线性表的查找</h1><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708132650266-1847504237.png"></p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[<span class="number">10</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SeqSearch</span><span class="params">(<span class="keyword">int</span> tar)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;<span class="number">10</span>&amp;&amp;p[i]!=tar) i++; <span class="comment">// 从头往后找 </span></span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> i+<span class="number">1</span>; <span class="comment">// 找到返回逻辑序号 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tar;</span><br><span class="line">cin &gt;&gt; tar;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">SeqSearch</span>(tar));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="基本思路-1"><a href="#基本思路-1" class="headerlink" title="基本思路"></a>基本思路</h3><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708132746763-960201657.png"></p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[<span class="number">10</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;; <span class="comment">// 需要递增</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinSearch</span><span class="params">(<span class="keyword">int</span> tar)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span> ,r = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="keyword">int</span> mi = (l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(p[mi] == tar) <span class="keyword">return</span> mi+<span class="number">1</span>; <span class="comment">// 返回逻辑序号</span></span><br><span class="line"><span class="keyword">if</span>(p[mi] &lt; tar) l = mi+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r = mi<span class="number">-1</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tar;</span><br><span class="line">cin &gt;&gt; tar;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">BinSearch</span>(tar));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉排列树"><a href="#二叉排列树" class="headerlink" title="二叉排列树"></a>二叉排列树</h1><h2 id="插入和生成基本思路"><a href="#插入和生成基本思路" class="headerlink" title="插入和生成基本思路"></a>插入和生成基本思路</h2><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708135524608-2004633927.png"></p><h2 id="查找基本思路"><a href="#查找基本思路" class="headerlink" title="查找基本思路"></a>查找基本思路</h2><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708135501444-1802483528.png"></p><h2 id="删除的基本思路"><a href="#删除的基本思路" class="headerlink" title="删除的基本思路"></a>删除的基本思路</h2><p>1.若删除的是叶子节点 ,则直接删除即可</p><p>2.若被删除的节点只有左子树或右子树 ,则用左子树或右子树代替</p><p>3.若删除的节点既有左子树又有右子树 ,则找到左子树的最右节点即最大节点与之替换</p><h2 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 10000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">int</span> p[MS];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tnode</span>&#123;</span></span><br><span class="line">tnode *l,*r;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125;*root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入元素个数：\n&quot;</span>);</span><br><span class="line">cin &gt;&gt; len;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入元素：\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">tnode *<span class="title">SearchBST</span><span class="params">(tnode *bt,<span class="keyword">int</span> tar)</span></span>&#123; <span class="comment">// 查找二叉排列树 </span></span><br><span class="line"><span class="keyword">if</span>(bt==<span class="literal">NULL</span>||bt-&gt;val == tar) </span><br><span class="line"><span class="keyword">return</span> bt;</span><br><span class="line"><span class="keyword">if</span>(bt-&gt;val &gt; tar) </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">SearchBST</span>(bt-&gt;l,tar);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> <span class="built_in">SearchBST</span>(bt-&gt;r,tar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertBST</span><span class="params">(tnode *&amp;p,<span class="keyword">int</span> tar)</span></span>&#123; <span class="comment">// 二叉排列树的插入 </span></span><br><span class="line"><span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">p = (tnode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(tnode));</span><br><span class="line">p-&gt;val = tar;</span><br><span class="line">p-&gt;l = p-&gt;r = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;val &gt; tar)&#123;</span><br><span class="line"><span class="built_in">InsertBST</span>(p-&gt;l,tar);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;val &lt; tar)&#123;</span><br><span class="line"><span class="built_in">InsertBST</span>(p-&gt;r,tar);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">tnode *<span class="title">CreatBST</span><span class="params">(<span class="keyword">int</span> p[],<span class="keyword">int</span> len)</span></span>&#123; <span class="comment">// 二叉排列树的生成 </span></span><br><span class="line">tnode *bt = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="built_in">InsertBST</span>(bt,p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(tnode *bt)</span></span>&#123; <span class="comment">// 中序遍历 </span></span><br><span class="line"><span class="keyword">if</span>(bt!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">in</span>(bt-&gt;l);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,bt-&gt;val);</span><br><span class="line"><span class="built_in">in</span>(bt-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete1</span><span class="params">(tnode *&amp;p,tnode *&amp;n)</span></span>&#123; <span class="comment">// 需要删除的节点 ，该节点的左孩子 </span></span><br><span class="line">tnode *t;</span><br><span class="line"><span class="keyword">if</span>(n-&gt;r != <span class="literal">NULL</span>) <span class="built_in">Delete1</span>(p,n-&gt;r); <span class="comment">// 找到最右即最大的节点 </span></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">p-&gt;val = n-&gt;val;</span><br><span class="line">t = n;</span><br><span class="line">n = n-&gt;l;</span><br><span class="line"><span class="built_in">free</span>(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(tnode *&amp;p)</span></span>&#123;</span><br><span class="line">tnode *t;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;l == <span class="literal">NULL</span>)&#123;</span><br><span class="line">t = p;</span><br><span class="line">p = p-&gt;r;</span><br><span class="line"><span class="built_in">free</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;r == <span class="literal">NULL</span>)&#123;</span><br><span class="line">t = p;</span><br><span class="line">p = p-&gt;l;</span><br><span class="line"><span class="built_in">free</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Delete1</span>(p,p-&gt;l); <span class="comment">// 左右都有孩子 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteBST</span><span class="params">(tnode *&amp;p,<span class="keyword">int</span> tar)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;val == tar) </span><br><span class="line"><span class="built_in">Delete</span>(p);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;val &gt; tar) </span><br><span class="line"><span class="built_in">DeleteBST</span>(p-&gt;l,tar);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">DeleteBST</span>(p-&gt;r,tar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="comment">// 得到二叉排列树的根节点 </span></span><br><span class="line">root = <span class="built_in">CreatBST</span>(p,len);</span><br><span class="line"><span class="comment">// 中序遍历数据为增序 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;中序遍历的结果：\n&quot;</span>);</span><br><span class="line"><span class="built_in">in</span>(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入想要删除的数据：\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> tar;</span><br><span class="line">cin &gt;&gt; tar;</span><br><span class="line"><span class="built_in">DeleteBST</span>(root,tar);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;删除完成!\n&quot;</span>);</span><br><span class="line"><span class="comment">// 输出中序遍历的结果 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;中序遍历的结果：\n&quot;</span>);</span><br><span class="line"><span class="built_in">in</span>(root);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h1><p>我不会 ,我诚实</p><h1 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h1><p>我的心里没有B数 ,更没有B+树…</p><h1 id="哈希表的查找"><a href="#哈希表的查找" class="headerlink" title="哈希表的查找"></a>哈希表的查找</h1><p>1.直接定址法: 例如学号2019001 - ‘张三’ ,2019003 - ‘赵四’ ,以学号减去 209000 为地址 ,h(k) = k + c;</p><p>2.除留余数法: 即模上一个素数 ,h(k) = k mod p;</p><p>3.数字分析法: 例如数据 93215 96531 53222 46333 … 可取最后两位数字作为哈希地址 15 31 22 33 </p><h2 id="拉链法建立哈希表"><a href="#拉链法建立哈希表" class="headerlink" title="拉链法建立哈希表"></a>拉链法建立哈希表</h2><h3 id="基本思路-2"><a href="#基本思路-2" class="headerlink" title="基本思路"></a>基本思路</h3><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708205705141-1280407356.png"></p><h3 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> m = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[<span class="number">15</span>] = &#123;<span class="number">16</span>,<span class="number">74</span>,<span class="number">60</span>,<span class="number">43</span>,<span class="number">54</span>,<span class="number">90</span>,<span class="number">46</span>,<span class="number">31</span>,<span class="number">29</span>,<span class="number">88</span>,<span class="number">77</span>&#125;; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">node *next;</span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">&#125;*head[m+<span class="number">1</span>],*tail[m+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 初始化 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) head[i] = tail[i] = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">// 建立 hash 表 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> t = p[i] % m;</span><br><span class="line">node *cc = (node*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(node));</span><br><span class="line">cc-&gt;val = p[i];</span><br><span class="line">cc-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span>(head[t] == <span class="literal">NULL</span>)&#123;</span><br><span class="line">head[t] = cc;</span><br><span class="line">tail[t] = cc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tail[t]-&gt;next = cc;</span><br><span class="line">tail[t] = tail[t]-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查找 </span></span><br><span class="line"><span class="keyword">int</span> tar,flag = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; tar;</span><br><span class="line">node *bt = head[tar%m];</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(bt-&gt;val == tar)&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">bt = bt-&gt;next;</span><br><span class="line">&#125;<span class="keyword">while</span>(bt!=<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">// 输出结果 </span></span><br><span class="line"><span class="keyword">if</span>(flag) <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内排序</title>
      <link href="/2020/07/08/ACM/%E5%86%85%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/07/08/ACM/%E5%86%85%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="各种内排序的性能"><a href="#各种内排序的性能" class="headerlink" title="各种内排序的性能"></a>各种内排序的性能</h1><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708131653735-167360322.png"></p><h1 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h1><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708115504078-1565346538.png"></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]&lt;p[i<span class="number">-1</span>])&#123; <span class="comment">// 该点数据 比 有序区的最后一个数据即最大的数据 大 </span></span><br><span class="line"><span class="keyword">int</span> t = p[i]; <span class="comment">// 记录该点数据 </span></span><br><span class="line"><span class="keyword">int</span> j = i; <span class="comment">// 记录该点下标 </span></span><br><span class="line"><span class="keyword">do</span>&#123; <span class="comment">// 有序区元素一一右移直到找到合适位置 </span></span><br><span class="line">p[j] = p[j<span class="number">-1</span>];</span><br><span class="line">j--;</span><br><span class="line">&#125; <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;t&lt;p[j<span class="number">-1</span>]);</span><br><span class="line">p[j] = t; <span class="comment">// 放入记录的数据 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">InsertSort</span>();</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">5 6 4 9 8 1 3 2 7</span></span><br><span class="line"><span class="comment">6 5 4 9 8 7 3 2 1 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h1><h2 id="基本思路-1"><a href="#基本思路-1" class="headerlink" title="基本思路"></a>基本思路</h2><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708115524702-489252581.png"></p><h2 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BinInsertSort</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]&lt;p[i<span class="number">-1</span>])&#123; <span class="comment">// 该点数据 比 有序区的最后一个数据即最大的数据 大 </span></span><br><span class="line"><span class="keyword">int</span> t = p[i]; </span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span> ,r = i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123; <span class="comment">// 二分查找插入点 </span></span><br><span class="line"><span class="keyword">int</span> mi = (l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(t&gt;=p[mi]) l = mi+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r = mi<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;r;j--) p[j] = p[j<span class="number">-1</span>]; <span class="comment">//  插入点后数据后移 </span></span><br><span class="line">p[r+<span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">BinInsertSort</span>();</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">5 6 4 9 8 1 3 2 7</span></span><br><span class="line"><span class="comment">6 5 4 9 8 7 3 2 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><h2 id="基本思路-2"><a href="#基本思路-2" class="headerlink" title="基本思路"></a>基本思路</h2><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708115440023-706851258.png"></p><h2 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> d = len/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(d&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">// 对相邻 d 位置的元素组直接插入排序 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=d;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> t = p[i];</span><br><span class="line"><span class="keyword">int</span> j = i-d;</span><br><span class="line"><span class="keyword">while</span>(j&gt;=<span class="number">0</span>&amp;&amp;t&lt;p[j])&#123;</span><br><span class="line">p[j+d] = p[j];</span><br><span class="line">j -= d;</span><br><span class="line">&#125;</span><br><span class="line">p[j+d] = t;</span><br><span class="line">&#125;</span><br><span class="line">d/=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">ShellSort</span>();</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">5 6 4 9 8 1 3 2 7</span></span><br><span class="line"><span class="comment">6 5 4 9 8 7 3 2 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="基本思路-3"><a href="#基本思路-3" class="headerlink" title="基本思路"></a>基本思路</h2><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708120435636-1319359376.png"></p><h2 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> exchange; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line">exchange = <span class="number">0</span>; <span class="comment">// 记录是否有交换记录 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=len<span class="number">-1</span>;j&gt;i;j--)&#123; <span class="comment">// 将无序区最小的值交换到有序区的顶端 </span></span><br><span class="line"><span class="keyword">if</span>(p[j]&lt;p[j<span class="number">-1</span>])&#123;</span><br><span class="line">exchange = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> t = p[j];</span><br><span class="line">p[j] = p[j<span class="number">-1</span>];</span><br><span class="line">p[j<span class="number">-1</span>] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若无交换记录 则此时无序区已有序 </span></span><br><span class="line"><span class="keyword">if</span>(exchange == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">BubbleSort</span>();</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">5 6 4 9 8 1 3 2 7</span></span><br><span class="line"><span class="comment">6 5 4 9 8 7 3 2 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="基本思路-4"><a href="#基本思路-4" class="headerlink" title="基本思路"></a>基本思路</h2><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708120742856-17981058.png"></p><h2 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左闭右也闭 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s&gt;=e) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> i = s ,j = e;</span><br><span class="line"><span class="comment">// 一次划分 </span></span><br><span class="line"><span class="keyword">int</span> t = p[i];</span><br><span class="line"><span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&gt;i&amp;&amp;p[j]&gt;=t) j--;</span><br><span class="line">p[i] = p[j];</span><br><span class="line"><span class="keyword">while</span>(i&lt;j&amp;&amp;p[i]&lt;=t) i++;</span><br><span class="line">p[j] = p[i];</span><br><span class="line">&#125;</span><br><span class="line">p[i] = t;</span><br><span class="line"><span class="comment">// 左右递归 </span></span><br><span class="line"><span class="built_in">QuickSort</span>(s,i<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">QuickSort</span>(i+<span class="number">1</span>,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">QuickSort</span>(<span class="number">0</span>,len<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">5 6 4 9 8 1 3 2 7</span></span><br><span class="line"><span class="comment">6 5 4 9 8 7 3 2 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h1><h2 id="基本思路-5"><a href="#基本思路-5" class="headerlink" title="基本思路"></a>基本思路</h2><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708121520011-1884528234.png"></p><h2 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> k = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len;j++)&#123; <span class="comment">// 得到区间 i ~ len-1 的最小值下标 </span></span><br><span class="line"><span class="keyword">if</span>(p[j]&lt;p[k]) k = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i!=k)&#123; <span class="comment">// 交换 </span></span><br><span class="line"><span class="keyword">int</span> t = p[k];</span><br><span class="line">p[k] = p[i];</span><br><span class="line">p[i] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">SelectSort</span>();</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">5 6 4 9 8 1 3 2 7</span></span><br><span class="line"><span class="comment">6 5 4 9 8 7 3 2 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><h2 id="基本思路-6"><a href="#基本思路-6" class="headerlink" title="基本思路"></a>基本思路</h2><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708122835301-1302391456.png"></p><h2 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">11</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sift</span><span class="params">(<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span>&#123; <span class="comment">// 调整堆 </span></span><br><span class="line"><span class="keyword">int</span> i = low ,j = <span class="number">2</span>*i;</span><br><span class="line"><span class="keyword">int</span> t = p[i];</span><br><span class="line"><span class="keyword">while</span>(j&lt;=high)&#123;</span><br><span class="line"><span class="keyword">if</span>(j&lt;high&amp;&amp;p[j+<span class="number">1</span>]&gt;p[j]) j++; <span class="comment">// j 指向大孩子 </span></span><br><span class="line"><span class="keyword">if</span>(p[j]&gt;t)&#123; <span class="comment">// 父亲小 </span></span><br><span class="line">p[i] = p[j];</span><br><span class="line">i = j;</span><br><span class="line">j = <span class="number">2</span>*i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p[i] = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)&#123; <span class="comment">// 初始化堆 </span></span><br><span class="line"><span class="built_in">sift</span>(i,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&gt;=<span class="number">2</span>;i--)&#123; <span class="comment">// 将最大堆顶元素置于数组后边 </span></span><br><span class="line"><span class="keyword">int</span> t = p[<span class="number">1</span>];</span><br><span class="line">p[<span class="number">1</span>] = p[i];</span><br><span class="line">p[i] = t;</span><br><span class="line"><span class="built_in">sift</span>(<span class="number">1</span>,i<span class="number">-1</span>); <span class="comment">// 调整 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">input</span>(); <span class="comment">// 用数组表示二叉树 </span></span><br><span class="line"><span class="built_in">HeapSort</span>();</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">5 6 4 9 8 1 3 2 7</span></span><br><span class="line"><span class="comment">6 5 4 9 8 7 3 2 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="二路归并排序"><a href="#二路归并排序" class="headerlink" title="二路归并排序"></a>二路归并排序</h1><h2 id="基本思路-7"><a href="#基本思路-7" class="headerlink" title="基本思路"></a>基本思路</h2><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708123719463-1933324208.png"></p><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708125502641-1054471625.png"> </p><p>啊 这图好啊</p><h2 id="示例代码-7"><a href="#示例代码-7" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> low,<span class="keyword">int</span> mid,<span class="keyword">int</span> high)</span></span>&#123; <span class="comment">// 相邻两个有序子序列归并成一个 </span></span><br><span class="line"><span class="keyword">int</span> i = low ,j = mid+<span class="number">1</span> ,k = <span class="number">0</span>; <span class="comment">// i ,j 分别为 1 ,2 段下标 </span></span><br><span class="line"><span class="keyword">int</span> *r;</span><br><span class="line">r = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>((high-low+<span class="number">1</span>)*<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=high)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i]&lt;p[j]) r[k++] = p[i++];</span><br><span class="line"><span class="keyword">else</span> r[k++] = p[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid) r[k++] = p[i++];</span><br><span class="line"><span class="keyword">while</span>(j&lt;=high) r[k++] = p[j++];</span><br><span class="line"><span class="keyword">for</span>(i=low,k=<span class="number">0</span>;i&lt;=high;i++,k++)</span><br><span class="line">p[i] = r[k];</span><br><span class="line"><span class="built_in">free</span>(r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123; <span class="comment">// 左闭右闭 </span></span><br><span class="line"><span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">MergeSort</span>(l,mid);</span><br><span class="line"><span class="built_in">MergeSort</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">Merge</span>(l,mid,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">MergeSort</span>(<span class="number">0</span>,len<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">5 6 4 9 8 1 3 2 7</span></span><br><span class="line"><span class="comment">6 5 4 9 8 7 3 2 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><h2 id="基本思路-8"><a href="#基本思路-8" class="headerlink" title="基本思路"></a>基本思路</h2><p><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708130557792-702821554.png"><br><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708130609630-814687877.png"><br><img src="https://img2020.cnblogs.com/blog/2062718/202007/2062718-20200708130618695-1185212070.png"></p><p>嘛… 是桶没错了</p><h2 id="示例代码-8"><a href="#示例代码-8" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">8</span>; <span class="comment">// 待排序的元素个数 </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxw = <span class="number">3</span>; <span class="comment">// 位数最大值 236为 3，1233为 4 </span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxj = <span class="number">10</span>; <span class="comment">// 进制最大值 10进制则为 10 ，16进制为 16</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> val[maxw]; <span class="comment">// 用字符串存储数据 </span></span><br><span class="line">node *next; </span><br><span class="line">&#125;*p,*head[maxj],*tail[maxj];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123; <span class="comment">// 带头结点尾插法建表 </span></span><br><span class="line">node *t,*r;</span><br><span class="line">p = (node*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(node)); <span class="comment">// 创建头节点 </span></span><br><span class="line">r = p; <span class="comment">// 始终指向尾节点 ，开始时指向头节点 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxn;i++)&#123;</span><br><span class="line">t = (node*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(node)); <span class="comment">// 创建数据节点 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,t-&gt;val); <span class="comment">// 输入数据 </span></span><br><span class="line">r-&gt;next = t; <span class="comment">// 将 数据节点 t 插在 r 之后 </span></span><br><span class="line">r = t; <span class="comment">// r 指向尾节点 </span></span><br><span class="line">&#125;</span><br><span class="line">r-&gt;next = <span class="literal">NULL</span>; <span class="comment">// 尾节点 指向 NULL </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RadixSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">p = p-&gt;next; <span class="comment">// 指向头节点下一个带有数据的指针 </span></span><br><span class="line">node *tt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=maxw<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123; <span class="comment">// 从最低位开始 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;maxj;j++) <span class="comment">// 初始化各个链队首尾指针 </span></span><br><span class="line">head[j] = tail[j] = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">char</span> k = p-&gt;val[i] - <span class="string">&#x27;0&#x27;</span>; <span class="comment">// 找到第 k个链队 </span></span><br><span class="line"><span class="keyword">if</span>(head[k]==<span class="literal">NULL</span>)&#123;</span><br><span class="line">head[k] = p;</span><br><span class="line">tail[k] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tail[k]-&gt;next = p;</span><br><span class="line">tail[k] = tail[k]-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;maxj;j++)&#123; <span class="comment">// 对每个链表进行串联 </span></span><br><span class="line"><span class="keyword">if</span>(head[j]!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">p = head[j];</span><br><span class="line">tt = tail[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tt-&gt;next = head[j];</span><br><span class="line">tt = tail[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tt-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,p-&gt;val);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">RadixSort</span>();</span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment">369 367 167 239 237 138 230 139</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment">138 139 167 230 237 239 367 369</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【Codeforces】Educational Codeforces Round 90</title>
      <link href="/2020/06/26/ACM/%E3%80%90Codeforces%E3%80%91Educational%20Codeforces%20Round%2090/"/>
      <url>/2020/06/26/ACM/%E3%80%90Codeforces%E3%80%91Educational%20Codeforces%20Round%2090/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Donut-Shops"><a href="#A-Donut-Shops" class="headerlink" title="A. Donut Shops"></a>A. Donut Shops</h1><p>There are two rival donut shops.</p><p>The first shop sells donuts at retail: each donut costs a dollars.</p><p>The second shop sells donuts only in bulk: box of b donuts costs c dollars. So if you want to buy x donuts from this shop, then you have to buy the smallest number of boxes such that the total number of donuts in them is greater or equal to x.</p><p>You want to determine two positive integer values:</p><p>how many donuts can you buy so that they are strictly cheaper in the first shop than in the second shop?<br>how many donuts can you buy so that they are strictly cheaper in the second shop than in the first shop?<br>If any of these values doesn’t exist then that value should be equal to −1. If there are multiple possible answers, then print any of them.</p><p>The printed values should be less or equal to 109. It can be shown that under the given constraints such values always exist if any values exist at all.</p><p><em>Input</em><br>The first line contains a single integer t (1≤t≤1000) — the number of testcases.</p><p>Each of the next t lines contains three integers a, b and c (1≤a≤109, 2≤b≤109, 1≤c≤109).</p><p><em>Output</em><br>For each testcase print two positive integers. For both shops print such x that buying x donuts in this shop is strictly cheaper than buying x donuts in the other shop. x should be greater than 0 and less or equal to 109.</p><p>If there is no such x, then print −1. If there are multiple answers, then print any of them.</p><p><strong>Example</strong></p><p><strong>input</strong></p><blockquote><p>4<br>5 10 4<br>4 5 20<br>2 2 3<br>1000000000 1000000000 1000000000</p></blockquote><p><strong>output</strong></p><blockquote><p>-1 20<br>8 -1<br>1 2<br>-1 1000000000</p></blockquote><p><strong>Note</strong></p><p>In the first testcase buying any number of donuts will be cheaper in the second shop. For example, for 3 or 5 donuts you’ll have to buy a box of 10 donuts for 4 dollars. 3 or 5 donuts in the first shop would cost you 15 or 25 dollars, respectively, however. For 20 donuts you’ll have to buy two boxes for 8 dollars total. Note that 3 and 5 are also valid answers for the second shop, along with many other answers.</p><p>In the second testcase buying any number of donuts will be either cheaper in the first shop or the same price. 8 donuts cost 32 dollars in the first shop and 40 dollars in the second shop (because you have to buy two boxes). 10 donuts will cost 40 dollars in both shops, so 10 is not a valid answer for any of the shops.</p><p>In the third testcase 1 donut costs 2 and 3 dollars, respectively. 2 donuts cost 4 and 3 dollars. Thus, 1 is a valid answer for the first shop and 2 is a valid answer for the second shop.</p><p>In the fourth testcase 109 donuts cost 1018 dollars in the first shop and 109 dollars in the second shop.</p><p>题意: A 店每个甜甜圈 a 元 ,B 店一盒 b 个甜甜圈 c 元 ,输出 x 表示在该店买 x 个甜甜圈比另一家店便宜 .（B店只能一盒一盒购买）</p><p>每个案例对应 a b c ,若不存在 x 则输出 -1 .</p><p>分类讨论:</p><p>记 ans1 ,ans2 为答案 .</p><p>当 <strong>b == 1</strong> 时 ,比较 a 和 c 的大小即可 .</p><p>当 <strong>b != 1</strong> 时 ,A 店也买 b 个甜甜圈价钱为 a * b;</p><p>若 a * b &lt;= c ,则另 ans1 = 1 ,ans2 = -1;</p><p>若 a * b &gt;  c ,则 ans2 = b; 若 a &lt; c ,则 ans1 = 1; 否则 a &gt;= c 时 ans1 = -1;</p><p>这…和直接贴代码有什么区别…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"> </span><br><span class="line">LL n,m,k;</span><br><span class="line">LL p[MS];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line">LL a,b,c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">LL ans1,ans2;</span><br><span class="line"><span class="keyword">if</span>(b == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(a == c)&#123;</span><br><span class="line">ans1 = ans2 = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a &gt; c)&#123;</span><br><span class="line">ans1 = <span class="number">1</span>;</span><br><span class="line">ans2 = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a &lt; c)&#123;</span><br><span class="line">ans1 = <span class="number">-1</span>;</span><br><span class="line">ans2 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a*b&lt;=c)&#123;</span><br><span class="line">ans1 = <span class="number">1</span>;</span><br><span class="line">ans2 = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a*b&gt;c)&#123;</span><br><span class="line">ans2 = b;</span><br><span class="line"><span class="keyword">if</span>(a&lt;c)&#123;</span><br><span class="line">ans1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> ans1 = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>,ans1,ans2);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-01-Game"><a href="#B-01-Game" class="headerlink" title="B. 01 Game"></a>B. 01 Game</h1><p>Alica and Bob are playing a game.</p><p>Initially they have a binary string s consisting of only characters 0 and 1.</p><p>Alice and Bob make alternating moves: Alice makes the first move, Bob makes the second move, Alice makes the third one, and so on. During each move, the current player must choose two different adjacent characters of string s and delete them. For example, if s=1011001 then the following moves are possible:</p><p>delete s1 and s2: 1011001→11001;<br>delete s2 and s3: 1011001→11001;<br>delete s4 and s5: 1011001→10101;<br>delete s6 and s7: 1011001→10110.</p><p>If a player can’t make any move, they lose. Both players play optimally. You have to determine if Alice can win.</p><p><em>Input</em><br>First line contains one integer t (1≤t≤1000) — the number of test cases.</p><p>Only line of each test case contains one string s (1≤|s|≤100), consisting of only characters 0 and 1.</p><p><em>Output</em><br>For each test case print answer in the single line.</p><p>If Alice can win print DA (YES in Russian) in any register. Otherwise print NET (NO in Russian) in any register.</p><p><strong>Example</strong></p><p><strong>input</strong></p><blockquote><p>3<br>01<br>1111<br>0011</p></blockquote><p><strong>output</strong></p><blockquote><p>DA<br>NET<br>NET</p></blockquote><p><strong>Note</strong><br>In the first test case after Alice’s move string s become empty and Bob can not make any move.</p><p>In the second test case Alice can not make any move initially.</p><p>In the third test case after Alice’s move string s turn into 01. Then, after Bob’s move string s become empty and Alice can not make any move.</p><p>题意:两玩家 ,Alice先 ,Bob后 ,每次能做的操作为找到相邻的两个’0’、’1’字符并删除 ,最后不能操作的人输 .</p><p>若Alice赢 ,则输出 ‘DA’ ,否则 ‘NET’ . (俄语中分别表示 YES 和 NO ) .</p><p>解: 只要字符串中有 0 有 1 则游戏都可以进行下去 ,而且每次操作必定少一个 0 和 1 ,则得到 0 和 1 中少的个数记为 t ,t 为奇数则赢 .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL p[MS];</span><br><span class="line"><span class="keyword">char</span> s[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line"><span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span> s);</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">LL t1,t0,h = <span class="built_in">strlen</span>(s);</span><br><span class="line">t0 = t1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&#x27;0&#x27;</span>) t0++;</span><br><span class="line"><span class="keyword">else</span> t1++;</span><br><span class="line">&#125;</span><br><span class="line">LL t = <span class="built_in">min</span>(t0,t1);</span><br><span class="line"><span class="keyword">if</span>(t&amp;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;DA\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;NET\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Pluses-and-Minuses"><a href="#C-Pluses-and-Minuses" class="headerlink" title="C. Pluses and Minuses"></a>C. Pluses and Minuses</h1><p>You are given a string s consisting only of characters + and -. You perform some process with this string. This process can be described by the following pseudocode:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> init = <span class="number">0</span> to inf</span><br><span class="line">    cur = init</span><br><span class="line">    ok = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> to |s|</span><br><span class="line">        res = res + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> s[i] == <span class="string">&#x27;+&#x27;</span></span><br><span class="line">            cur = cur + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cur = cur - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> cur &lt; <span class="number">0</span></span><br><span class="line">            ok = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> ok</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>Note that the inf denotes infinity, and the characters of the string are numbered from 1 to |s|.</p><p>You have to calculate the value of the res after the process ends.</p><p><em>Input</em><br>The first line contains one integer t (1≤t≤1000) — the number of test cases.</p><p>The only lines of each test case contains string s (1≤|s|≤106) consisting only of characters + and -.</p><p>It’s guaranteed that sum of |s| over all test cases doesn’t exceed 106.</p><p><em>Output</em><br>For each test case print one integer — the value of the res after the process ends.</p><p><strong>Example</strong></p><p><strong>input</strong></p><blockquote><p>3<br>–+-<br>-–<br>++–+-</p></blockquote><p><strong>output</strong></p><blockquote><p>7<br>9<br>6</p></blockquote><p>题意: 就是题中所给代码最后得到 res 的值 . </p><p>翻译一下就比如一个横板2D闯关游戏 ,一开始血量 cur = 0 ,每一格对应一个字符 ,每次碰到 ‘-‘ 则血量– ,’+’ 则血量++ ,若血量cur &lt; 0 则从头再来且初始血量 +1 直至通关,求最后一共走过多少格 .</p><p>解: 求前缀和 ,记 ‘-‘ 为 -1 ,’+’ 为 +1 ,因为前缀和是连续的 ,所以每次记录血量为 0 时找前缀和<strong>第一次</strong>为 -1 的下标 ,记录血量为 1 是<strong>第一次</strong>为 -2 的下标… 最后下标值相加即可 .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 1000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL p[MS],a[MS];</span><br><span class="line"><span class="keyword">char</span> s[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">LL h = <span class="built_in">strlen</span>(s);</span><br><span class="line">LL t = <span class="number">0</span> ,cc = <span class="number">-1</span> ,tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">p[i+<span class="number">1</span>] = p[i] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> p[i+<span class="number">1</span>] = p[i] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(p[i+<span class="number">1</span>] == cc)&#123;</span><br><span class="line">cc--;</span><br><span class="line">a[++tot] = i+<span class="number">1</span>; <span class="comment">// 记录值为-1 ,-2 ,-3 ...的下标</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="number">0</span>; <span class="comment">// 记录答案</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</span><br><span class="line">ans += a[i];</span><br><span class="line">&#125;</span><br><span class="line">ans += h; <span class="comment">// 加上通关的一遍</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Maximum-Sum-on-Even-Positions"><a href="#D-Maximum-Sum-on-Even-Positions" class="headerlink" title="D. Maximum Sum on Even Positions"></a>D. Maximum Sum on Even Positions</h1><p>You are given an array a consisting of n integers. Indices of the array start from zero (i. e. the first element is a0, the second one is a1, and so on).</p><p>You can reverse at most one subarray (continuous subsegment) of this array. Recall that the subarray of a with borders l and r is a[l;r]=al,al+1,…,ar.</p><p>Your task is to reverse such a subarray that the sum of elements on even positions of the resulting array is maximized (i. e. the sum of elements a0,a2,…,a2k for integer k=⌊n−12⌋ should be maximum possible).</p><p>You have to answer t independent test cases.</p><p><em>Input</em><br>The first line of the input contains one integer t (1≤t≤2⋅104) — the number of test cases. Then t test cases follow.</p><p>The first line of the test case contains one integer n (1≤n≤2⋅105) — the length of a. The second line of the test case contains n integers a0,a1,…,an−1 (1≤ai≤109), where ai is the i-th element of a.</p><p>It is guaranteed that the sum of n does not exceed 2⋅105 (∑n≤2⋅105).</p><p><em>Output</em><br>For each test case, print the answer on the separate line — the maximum possible sum of elements on even positions after reversing at most one subarray (continuous subsegment) of a.</p><p><strong>Example</strong></p><p><strong>input</strong></p><blockquote><p>4<br>8<br>1 7 3 4 7 6 2 9<br>5<br>1 2 1 2 1<br>10<br>7 8 4 5 7 6 8 9 7 3<br>4<br>3 1 2 1</p></blockquote><p><strong>output</strong></p><blockquote><p>26<br>5<br>37<br>5</p></blockquote><p>题意: 给一段数组 ,可以翻转一次连续的子序列 ,使得 a0 ,a2 ,a4 … ,a2k 之和最大 ,输出最大值 .</p><p>解: 显然翻转长度为奇数的序列没有任何用处 ,所以翻转偶数长度的片段 .</p><p>例如 7 8 4 5 7 6 本来是 7 + 4 + 7 翻转后为 8 + 5 + 6,也就是相当于 7 8 换位 ,4 5 换位 ,7 6 换位</p><p>则 记录两两换位后的差值存储与数组 a ,原数组 p 是 7 8 4 5 7 6 则 a 为 1 1 -1 ,显然此时交换 7 8 4 5 比交换整体更赚 ,所以求数组 a 的连续一段 <strong>和最大</strong> 的区间值 ta 即可 ,可记录 a 的前缀和求解 .</p><p>当然在 7 8 4 5 7 6 中 ,8 不仅可以和 7 交换 ,也可与 4 交换 ,则新建数组 b 记录 8 4 差值 ,5 7 差值 … 也求数组 b 的连续一段 <strong>和最大</strong> 的区间值 tb ,取 ta ,tb 大者 .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 200009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL p[MS],a[MS],b[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line">a[<span class="number">0</span>] = b[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">LL h,ans = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; h;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h;i++)&#123;</span><br><span class="line">cin &gt;&gt; p[i];</span><br><span class="line"><span class="keyword">if</span>(!(i&amp;<span class="number">1</span>)) ans += p[i]; <span class="comment">// 记录不进行任何翻转操作的答案</span></span><br><span class="line">&#125;</span><br><span class="line">LL maxx = <span class="number">0</span>,tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;h;i+=<span class="number">2</span>)&#123;</span><br><span class="line">a[tot] = p[i] - p[i<span class="number">-1</span>]; <span class="comment">// a 差值</span></span><br><span class="line">b[tot] = p[i] - p[i+<span class="number">1</span>]; <span class="comment">// b 差值</span></span><br><span class="line"><span class="keyword">if</span>(i == h<span class="number">-1</span>) b[tot] = -INF;</span><br><span class="line">tot++;</span><br><span class="line">&#125;</span><br><span class="line">maxx = <span class="built_in">max</span>(maxx,<span class="built_in">max</span>(a[<span class="number">0</span>],b[<span class="number">0</span>]));</span><br><span class="line">LL ta = a[<span class="number">0</span>];</span><br><span class="line">LL tb = b[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tot;i++)&#123; <span class="comment">// 求前缀和</span></span><br><span class="line">a[i] += a[i<span class="number">-1</span>]; </span><br><span class="line">b[i] += b[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tot;i++)&#123; <span class="comment">// 求连续一段 和最大 的区间值 maxx</span></span><br><span class="line"> ta = <span class="built_in">min</span>(ta,a[i]);</span><br><span class="line"> tb = <span class="built_in">min</span>(tb,b[i]);</span><br><span class="line"> a[i] = <span class="built_in">max</span>(a[i],a[i]-ta);</span><br><span class="line"> b[i] = <span class="built_in">max</span>(b[i],b[i]-tb);</span><br><span class="line"> maxx = <span class="built_in">max</span>(maxx,<span class="built_in">max</span>(a[i],b[i]));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans+maxx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Sum-of-Digits"><a href="#E-Sum-of-Digits" class="headerlink" title="E. Sum of Digits"></a>E. Sum of Digits</h1><p>Let f(x) be the sum of digits of a decimal number x.</p><p>Find the smallest non-negative integer x such that f(x)+f(x+1)+⋯+f(x+k)=n.</p><p><em>Input</em><br>The first line contains one integer t (1≤t≤150) — the number of test cases.</p><p>Each test case consists of one line containing two integers n and k (1≤n≤150, 0≤k≤9).</p><p><em>Output</em><br>For each test case, print one integer without leading zeroes. If there is no such x that f(x)+f(x+1)+⋯+f(x+k)=n, print −1; otherwise, print the minimum x meeting that constraint.</p><p><strong>Example</strong></p><p><strong>input</strong></p><blockquote><p>7<br>1 0<br>1 1<br>42 7<br>13 7<br>99 1<br>99 0<br>99 2</p></blockquote><p><strong>output</strong></p><blockquote><p>1<br>0<br>4<br>-1<br>599998<br>99999999999<br>7997</p></blockquote><p>题意: 设 <strong>f(x)</strong> 为十进制数 <strong>x</strong> 的位数之和 ,找出最小的非负整数 <strong>x</strong>，使 <strong>f(x) + f(x+1) + ⋯ + f(x+k) = n</strong></p><p>解: </p><p><strong>0</strong>. 当我发现 <strong>k</strong> 等于 <strong>9</strong> 时 ,</p><p>若 <strong>x = 0</strong> 时 ==&gt; <strong>0 1 2 3 4 5 6 7 8  9</strong>  位数和为 <strong>45</strong><br>若 <strong>x = 1</strong> 时 ==&gt; <strong>1 2 3 4 5 6 7 8 9  10</strong> 位数和为 <strong>46</strong><br>若 <strong>x = 2</strong> 时 ==&gt; <strong>2 3 4 5 6 7 8 9 10 11</strong> 位数和为 <strong>47</strong></p><p>嗯 … 想着如果说 <strong>n = 55 ,k == 9</strong> 的话 ,我好像可以把个位数定下来 ,这样的话 <strong>10</strong> 个数 每个个位数就可以定为 <strong>0 1 2 3 4 5 6 7 8 9</strong> 和为 <strong>45</strong>.</p><p>为什么这么定呢?  因为 <strong>n - 45 = 10</strong> ,欸! 这不是每个十位数加上一个 <strong>1</strong> 就好了 ,那么答案就是 <strong>10</strong> !</p><p>当然这是非常理想的情况下 ,但是定下了后面的想法框架 .</p><p><strong>1</strong>. 也就是现在想法先是定下个位数数字 ,再减去个位数之和 ,最后确定十位百位千位万位… (比赛时时间有限只能想到这儿了 ,果然是我tcl) .</p><p>个位数怎么确定呢? </p><p>因为有 <strong>k+1</strong> 个数 ,<strong>0 ~ k</strong> 分别表示每一个数 ,既然要确定个位数 ,那就先打表吧 .</p><p>比如说 个位数为 <strong>0</strong> 时 ,<strong>k</strong> = <strong>0,1,2,3…</strong> 令 <strong>p[i][j]</strong> 表示个位数为 <strong>i</strong> 长度为 <strong>j+1</strong> 的各个个位数之和 (毕竟 <strong>k</strong> 为 <strong>1</strong> 时 ,有两个数)</p><p>那么 <strong>p[7][5]</strong> 会出现 <strong>7 8 9 10 11</strong> 这样子 ,<strong>10</strong> 为 <strong>1</strong> ,<strong>11</strong> 为 <strong>2</strong> .</p><p>最大的就是 <strong>p[9][9]</strong> ,<strong>9 10 11 12 13 14 15 16 17 18</strong> 最大就是 <strong>18</strong> 也就是位数和为 <strong>9</strong> .</p><p>这样表就打完了 ,接下来怎么选个位数 .</p><p>现在假设选完了个位数 <strong>p[i][j]</strong> ,毕竟数字都是连续的所以 <strong>n - p[i][j]</strong> 这个值要平均分配到每个数的十位以上 .</p><p>所以 <strong>n - p[i][j]</strong> 要能整除 <strong>k + 1</strong> . </p><p>记 <strong>cc = (n - p[i][j])/(k+1)</strong> ,既然个位数确定下来了 ,<strong>cc</strong> 又是十位数以上的位数之和 ,那么贪心即可 .</p><p><strong>2</strong>. 十位数以上的需要注意当 <strong>p[i][j]</strong> 中 <strong>i + j &gt; 9</strong> 时 ,这样每次数字 <strong>+1</strong> 时会进位 这个时候十位数最多到 <strong>8</strong> 即可 .</p><p>感觉写的挺认真 ,但是第三视角看我写的内容好像也不是特别清楚 …</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"><span class="comment">// Notice the input and output </span></span><br><span class="line"> </span><br><span class="line">LL n,m,k;</span><br><span class="line">LL p[<span class="number">11</span>][<span class="number">11</span>],a[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) a[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>;i&lt;<span class="number">19</span>;i++) a[i] = i<span class="number">-9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123; <span class="comment">// 打表 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=i;u&lt;=i+j;u++)&#123;</span><br><span class="line">p[i][j] += a[u];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">LL t = <span class="number">-1</span> ,cc = INF,flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9</span>;i&gt;=<span class="number">0</span>;i--)&#123; <span class="comment">// 寻找一个个位数 </span></span><br><span class="line"><span class="keyword">if</span>(p[i][k]&gt;n) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>((n-p[i][k])%(k+<span class="number">1</span>) == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>((n-p[i][k])/(k+<span class="number">1</span>)&lt;=cc)&#123;</span><br><span class="line">t = i; <span class="comment">// 记录个位数 </span></span><br><span class="line">cc = (n-p[i][k])/(k+<span class="number">1</span>);<span class="comment">// 记录十位以上位数之和 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t == <span class="number">-1</span>)&#123; <span class="comment">// 未能整除 </span></span><br><span class="line">cout &lt;&lt; t &lt;&lt; endl;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">LL t9;</span><br><span class="line"><span class="keyword">if</span>(t+k &lt;= <span class="number">9</span>)&#123; <span class="comment">// 不用担心进位 </span></span><br><span class="line">t9 = cc / <span class="number">9</span>;</span><br><span class="line">cc -= t9*<span class="number">9</span>;</span><br><span class="line"><span class="keyword">if</span>(cc != <span class="number">0</span>) cout &lt;&lt; cc;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t9;i++) cout &lt;&lt; <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">cout &lt;&lt; t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">// 需要进位 </span></span><br><span class="line"><span class="keyword">if</span>(cc&lt;<span class="number">9</span>)&#123; <span class="comment">// 十位数不超过 9 </span></span><br><span class="line"><span class="keyword">if</span>(cc!=<span class="number">0</span>) cout &lt;&lt; cc;</span><br><span class="line">cout &lt;&lt; t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">// 超过 9 则十位数为 8  </span></span><br><span class="line">cc -= <span class="number">8</span>;</span><br><span class="line">t9 = cc / <span class="number">9</span>;</span><br><span class="line">cc -= t9 * <span class="number">9</span>;</span><br><span class="line"><span class="keyword">if</span>(cc!=<span class="number">0</span>) cout &lt;&lt; cc;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t9;i++) cout &lt;&lt; <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">cout &lt;&lt; <span class="number">8</span>;</span><br><span class="line">cout &lt;&lt; t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【KMP】模式串匹配</title>
      <link href="/2020/06/22/ACM/%E3%80%90KMP%E3%80%91%E6%A8%A1%E5%BC%8F%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
      <url>/2020/06/22/ACM/%E3%80%90KMP%E3%80%91%E6%A8%A1%E5%BC%8F%E4%B8%B2%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="单模式串匹配"><a href="#单模式串匹配" class="headerlink" title="单模式串匹配"></a>单模式串匹配</h1><h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><p>推理过程见<a href="https://www.cnblogs.com/caiyishuai/p/10701166.html" target="_blank">详解</a> .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> p[MS],nex[MS];</span><br><span class="line"><span class="keyword">char</span> s[MS],ts[MS]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(<span class="keyword">char</span> ts[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j=<span class="number">0</span>,k=<span class="number">-1</span>;</span><br><span class="line">nex[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(j&lt;len<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">-1</span>||ts[j] == ts[k])&#123;</span><br><span class="line"><span class="comment">// 当 ts[j+1] == ts[nex[j+1]] 时要跳过 </span></span><br><span class="line"><span class="keyword">if</span>(ts[++j] == ts[++k])</span><br><span class="line">nex[j] = nex[k];</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">nex[j] = k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> k = nex[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="keyword">char</span> s[],<span class="keyword">char</span> ts[],<span class="keyword">int</span> h1,<span class="keyword">int</span> h2)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line">i = j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;h1 &amp;&amp; j&lt;h2)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == ts[j] || j == <span class="number">-1</span>)&#123;</span><br><span class="line">i++ ,j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> j = nex[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j == h2) <span class="keyword">return</span> i-j; <span class="comment">// 返回从 0 开始的主串下标 </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">cin &gt;&gt; ts;</span><br><span class="line"><span class="built_in">get_next</span>(ts,<span class="built_in">strlen</span>(ts));</span><br><span class="line"><span class="keyword">int</span> ans = <span class="built_in">kmp</span>(s,ts,<span class="built_in">strlen</span>(s),<span class="built_in">strlen</span>(ts));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input : 0123456789</span></span><br><span class="line"><span class="comment">567</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output: 5 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="向量匹配算法"><a href="#向量匹配算法" class="headerlink" title="向量匹配算法"></a>向量匹配算法</h2><p>我也不知道叫什么名字,就随便叫个名字，感觉也挺快的=.=</p><p>例如：主串为 <strong>abcbad</strong> 模式串为 <strong>cba</strong></p><p>可以发现主串从<strong>0~2</strong>的向量值 和 <strong>2~4</strong>的向量值 与 模式串的向量值 相等 (向量值:ASCII值求和) .</p><p>存储主串中长度与模式串相等的向量值,遍历,若向量值相等,判断一遍即可 .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"></span><br><span class="line">LL n,m,k,flag;</span><br><span class="line">LL p[MS];</span><br><span class="line"><span class="keyword">char</span> s[MS],ts[MS]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(j&lt;len)&#123; <span class="comment">// 逐一比较 </span></span><br><span class="line"><span class="keyword">if</span>(s[i] == ts[j]) ++i,++j;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; s; <span class="comment">// 主串 </span></span><br><span class="line">cin &gt;&gt; ts; <span class="comment">// 模式串 </span></span><br><span class="line"><span class="keyword">int</span> h1 = <span class="built_in">strlen</span>(s); <span class="comment">// 主串长度 </span></span><br><span class="line"><span class="keyword">int</span> h2 = <span class="built_in">strlen</span>(ts); <span class="comment">// 模式串长度 </span></span><br><span class="line"><span class="comment">// 记录模式串向量值 </span></span><br><span class="line">LL sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h2;i++) sum += ts[i]; </span><br><span class="line"><span class="comment">// 记录主串每一段长度与模式串相同的向量值 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;h2;i++) p[<span class="number">0</span>] += s[i]; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+h2&lt;=h1;i++) </span><br><span class="line">p[i] = p[i<span class="number">-1</span>] - s[i<span class="number">-1</span>] + s[i+h2<span class="number">-1</span>];</span><br><span class="line"><span class="comment">// 匹配 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=h1-h2;i++)&#123;</span><br><span class="line"><span class="comment">// 如果向量值相同 </span></span><br><span class="line"><span class="keyword">if</span>(p[i] == sum)&#123;</span><br><span class="line"><span class="comment">// 逐一比较 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">cmp</span>(i,<span class="number">0</span>,h2))&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i); <span class="comment">// 输出对应指针 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">input : 0123456789</span></span><br><span class="line"><span class="comment">567</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output: 5 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【并查集】并查集模板</title>
      <link href="/2020/06/19/ACM/%E3%80%90%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%91%E5%B9%B6%E6%9F%A5%E9%9B%86%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/06/19/ACM/%E3%80%90%E5%B9%B6%E6%9F%A5%E9%9B%86%E3%80%91%E5%B9%B6%E6%9F%A5%E9%9B%86%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>并查集代码真是又短又有趣,易于理解见<a href="https://blog.csdn.net/qq_41593380/article/details/81146850" target="_blank">详解</a> .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> p[MS],tr[MS],fa[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == fa[x]) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">fa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【树状数组维护区间和】树状数组模板</title>
      <link href="/2020/06/19/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E5%92%8C%E3%80%91%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/06/19/ACM/%E3%80%90%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E7%BB%B4%E6%8A%A4%E5%8C%BA%E9%97%B4%E5%92%8C%E3%80%91%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="单点更新-区间查询"><a href="#单点更新-区间查询" class="headerlink" title="单点更新 区间查询"></a>单点更新 区间查询</h1><p>直接利用树状数组存储原数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> p[MS],tr[MS];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入原数组 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; p[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出 x 的最低位 1 ,返回 2^k</span></span><br><span class="line"><span class="comment">// ex: 1010 返回 2^1 ,1001 返回 2^0 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立树状数组 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=<span class="built_in">lowbit</span>(j))&#123;</span><br><span class="line">tr[j] += p[i]; <span class="comment">// tr 中所有包含 p[i] 的都要加上 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改点值 (+) </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">revise_point</span><span class="params">(<span class="keyword">int</span> sub ,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">p[sub] += val; <span class="comment">// 更新原数组 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=sub;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">tr[i] += val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求 原数组 p 1 ~ i 的值 </span></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">LL cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">cnt += tr[i];</span><br><span class="line">i -= <span class="built_in">lowbit</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出原数组 p 当前状态 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cout &lt;&lt; p[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// &gt;&gt; 数组长度 </span></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="comment">// 建树状数组 </span></span><br><span class="line"><span class="built_in">build</span>();</span><br><span class="line"><span class="comment">// 修改点值 </span></span><br><span class="line"><span class="comment">// 参数: 下标 ,值 </span></span><br><span class="line">cin &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="built_in">revise_point</span>(m,k);</span><br><span class="line"><span class="comment">// &gt;&gt; 当前原数组状态</span></span><br><span class="line"><span class="built_in">output</span>();</span><br><span class="line"><span class="comment">// 求和 </span></span><br><span class="line"><span class="comment">// &gt;&gt; 请求区间</span></span><br><span class="line">cin &gt;&gt; m &gt;&gt; k;</span><br><span class="line">cout &lt;&lt; <span class="built_in">get_sum</span>(k) - <span class="built_in">get_sum</span>(m<span class="number">-1</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="区间更新-单点查询"><a href="#区间更新-单点查询" class="headerlink" title="区间更新 单点查询"></a>区间更新 单点查询</h1><p>利用树状数组存储原数组的差分,这样修改区间时只需要修改两个位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> p[MS],tr[MS],a[MS];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入原数组 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; p[i];</span><br><span class="line"><span class="comment">// 得到差分后的数组 a  </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = p[i] - p[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出 x 的最低位 1 ,返回 2^k</span></span><br><span class="line"><span class="comment">// ex: 1010 返回 2^1 ,1001 返回 2^0 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立树状数组 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j+=<span class="built_in">lowbit</span>(j))&#123;</span><br><span class="line">tr[j] += a[i]; <span class="comment">// tr 中所有包含 p[i] 的都要加上 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改点值 (+) </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">revise_point</span><span class="params">(<span class="keyword">int</span> sub ,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">a[sub] += val; <span class="comment">// 更新数组 a</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=sub;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">tr[i] += val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求 原数组 p 1 ~ i 的值 </span></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">LL cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">cnt += tr[i];</span><br><span class="line">i -= <span class="built_in">lowbit</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// &gt;&gt; 数组长度 </span></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="comment">// 建树状数组 </span></span><br><span class="line"><span class="built_in">build</span>();</span><br><span class="line"><span class="comment">// 修改区间值 </span></span><br><span class="line"><span class="keyword">int</span> l,r,val;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r &gt;&gt; val;</span><br><span class="line"><span class="built_in">revise_point</span>(l,val);</span><br><span class="line"><span class="built_in">revise_point</span>(r+<span class="number">1</span>,-val);</span><br><span class="line"><span class="comment">// 单点查询 </span></span><br><span class="line">cin &gt;&gt; m;</span><br><span class="line">cout &lt;&lt; <span class="built_in">get_sum</span>(m) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="区间更新-区间查询"><a href="#区间更新-区间查询" class="headerlink" title="区间更新 区间查询"></a>区间更新 区间查询</h1><p>依旧利用树状数组存储原数组的差分,维护两个数状数组，sum1[i] = a[i]，sum2[i] = a[i]*(i-1); <a href="https://www.cnblogs.com/xenny/p/9739600.html" target="_blank">为何维护</a> .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"></span><br><span class="line">LL n,m,k;</span><br><span class="line">LL p[MS],tr[MS],a[MS];</span><br><span class="line">LL sum1[MS],sum2[MS];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取出 x 的最低位 1 ,返回 2^k</span></span><br><span class="line"><span class="comment">// ex: 1010 返回 2^1 ,1001 返回 2^0 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入原数组 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cin &gt;&gt; p[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对原数组 p 利用差分 存入数组 a  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dif</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i] = p[i] - p[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新树状数组 (+)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> sub,LL val)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = sub; <span class="comment">// x 不变 保存 sub 值 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=sub;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">tr[i] += val;</span><br><span class="line">sum1[i] += val;</span><br><span class="line">sum2[i] += val*(x<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求前缀和 </span></span><br><span class="line"><span class="function">LL <span class="title">get_sum</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">LL cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x = i;</span><br><span class="line"><span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">cnt += x*sum1[i] - sum2[i];</span><br><span class="line">i -= <span class="built_in">lowbit</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// &gt;&gt; 数组长度 </span></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">dif</span>();</span><br><span class="line"><span class="comment">// 直接更新 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">updata</span>(i,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间加减 </span></span><br><span class="line">LL l, r, val;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r &gt;&gt; val;</span><br><span class="line"><span class="built_in">updata</span>(l,val);</span><br><span class="line"><span class="built_in">updata</span>(r+<span class="number">1</span>,-val);</span><br><span class="line"><span class="comment">// 区间求和 </span></span><br><span class="line">cin &gt;&gt; m &gt;&gt; k;</span><br><span class="line">cout &lt;&lt; <span class="built_in">get_sum</span>(k) - <span class="built_in">get_sum</span>(m<span class="number">-1</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树】线段树模板</title>
      <link href="/2020/06/17/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/06/17/ACM/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mss 17</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"></span><br><span class="line">LL n; <span class="comment">// 记录原数组个数 </span></span><br><span class="line">LL a[MS]; <span class="comment">// 存原数组 </span></span><br><span class="line">LL p[MS*<span class="number">4</span>]; <span class="comment">// 数组实现树形结构 ,每一个节点对应一段区间 </span></span><br><span class="line">LL la[MS*<span class="number">4</span>]; <span class="comment">// 懒惰标记 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 存储原数组 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向上更新信息 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(LL rt)</span> </span>&#123;</span><br><span class="line">p[rt] = p[rt&lt;&lt;<span class="number">1</span>] + p[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下推标记 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(LL rt, LL nl, LL nr)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 如果被标记</span></span><br><span class="line"><span class="keyword">if</span>(la[rt])&#123;</span><br><span class="line"><span class="comment">// 下推标记</span></span><br><span class="line">la[rt&lt;&lt;<span class="number">1</span>] = la[rt&lt;&lt;<span class="number">1</span>] + la[rt]; </span><br><span class="line">la[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] = la[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] + la[rt];</span><br><span class="line"><span class="comment">// 更新左右孩子信息</span></span><br><span class="line">p[rt&lt;&lt;<span class="number">1</span>] = p[rt&lt;&lt;<span class="number">1</span>] + nl*la[rt];</span><br><span class="line">p[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] = p[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] + nr*la[rt];</span><br><span class="line"><span class="comment">// 清除标记</span></span><br><span class="line">la[rt] = <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建树 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(LL l, LL r, LL rt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line"><span class="comment">// 在 *rt* 节点存储数据 </span></span><br><span class="line">p[rt] = a[l];</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125; </span><br><span class="line">LL m = (l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">// 左右递归 寻找最后的叶子 </span></span><br><span class="line"><span class="built_in">build</span>(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">build</span>(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>); </span><br><span class="line"><span class="comment">// 向上更新信息</span></span><br><span class="line"><span class="built_in">push_up</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间修改 (+)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">section_revise</span><span class="params">(LL L, LL R, LL l, LL r, LL x, LL rt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123;</span><br><span class="line"><span class="comment">// 修改该节点对应区间的值 </span></span><br><span class="line">p[rt] = p[rt] + x*(r-l+<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 修改懒惰标记 </span></span><br><span class="line">la[rt] = la[rt] + x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">LL m = (l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">// 下推标记</span></span><br><span class="line"><span class="comment">// 参数:节点, 左,右孩子元素个数</span></span><br><span class="line"><span class="built_in">push_down</span>(rt,m-l+<span class="number">1</span>,r-m); </span><br><span class="line"><span class="comment">// 左右递归 ,寻找包含区间 </span></span><br><span class="line"><span class="keyword">if</span>(m&gt;=L) <span class="built_in">section_revise</span>(L,R,l,m,x,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(m&lt; R) <span class="built_in">section_revise</span>(L,R,m+<span class="number">1</span>,r,x,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="comment">//  向上更新信息</span></span><br><span class="line"><span class="built_in">push_up</span>(rt); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间求和 </span></span><br><span class="line"><span class="function">LL <span class="title">section_sum</span><span class="params">(LL L, LL R, LL l, LL r, LL rt)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 若查询到包含区间 </span></span><br><span class="line"><span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)&#123; </span><br><span class="line"><span class="keyword">return</span> p[rt];</span><br><span class="line">&#125;</span><br><span class="line">LL m = (l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">// 下推标记</span></span><br><span class="line"><span class="built_in">push_down</span>(rt,m-l+<span class="number">1</span>,r-m);</span><br><span class="line"><span class="comment">// 记录答案 </span></span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m&gt;=L) ans += <span class="built_in">section_sum</span>(L,R,l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(m&lt; R) ans += <span class="built_in">section_sum</span>(L,R,m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组现状输出 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(LL l, LL r, LL rt)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">cout &lt;&lt; p[rt] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">LL m = (l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">// 下推标记</span></span><br><span class="line"><span class="built_in">push_down</span>(rt,m-l+<span class="number">1</span>,r-m);</span><br><span class="line"><span class="comment">// 左右递归 寻找最后的叶子 </span></span><br><span class="line"><span class="built_in">output</span>(l,m,rt&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">output</span>(m+<span class="number">1</span>,r,rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 输入数据并建树 </span></span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">input</span>();</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 区间修改 </span></span><br><span class="line">LL l ,r ,x;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r &gt;&gt; x; </span><br><span class="line"><span class="built_in">section_revise</span>(l,r,<span class="number">1</span>,n,x,<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 输出修改后结果</span></span><br><span class="line"><span class="built_in">output</span>(<span class="number">1</span>,n,<span class="number">1</span>); </span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 区间求和</span></span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">cout &lt;&lt; <span class="built_in">section_sum</span>(l,r,<span class="number">1</span>,n,<span class="number">1</span>) &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Codeforces】Educational Codeforces Round 89</title>
      <link href="/2020/06/13/ACM/%E3%80%90Codeforces%E3%80%91Educational%20Codeforces%20Round%2089/"/>
      <url>/2020/06/13/ACM/%E3%80%90Codeforces%E3%80%91Educational%20Codeforces%20Round%2089/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Shovels-and-Swords"><a href="#A-Shovels-and-Swords" class="headerlink" title="A. Shovels and Swords"></a>A. Shovels and Swords</h1><p>Polycarp plays a well-known computer game (we won’t mention its name). In this game, he can craft tools of two types — shovels and swords. To craft a shovel, Polycarp spends two sticks and one diamond; to craft a sword, Polycarp spends two diamonds and one stick.</p><p>Each tool can be sold for exactly one emerald. How many emeralds can Polycarp earn, if he has a sticks and b diamonds?</p><p><em>Input</em><br>The first line contains one integer t (1≤t≤1000) — the number of test cases.</p><p>The only line of each test case contains two integers a and b (0≤a,b≤109) — the number of sticks and the number of diamonds, respectively.</p><p><em>Output</em><br>For each test case print one integer — the maximum number of emeralds Polycarp can earn.</p><p><strong>Example</strong></p><p><strong>input</strong></p><blockquote><p>4<br>4 4<br>1000000000 0<br>7 15<br>8 7</p></blockquote><p><strong>output</strong></p><blockquote><p>2<br>0<br>7<br>5</p></blockquote><p><strong>Note</strong></p><p>In the first test case Polycarp can earn two emeralds as follows: craft one sword and one shovel.</p><p>In the second test case Polycarp does not have any diamonds, so he cannot craft anything.</p><p>题意：游戏我的世界中做一把铲子<strong>2</strong>木棍<strong>1</strong>钻石，一把剑<strong>2</strong>钻石<strong>1</strong>木棍，每件工具可以卖一个绿宝石，给<strong>a</strong>根木棍<strong>b</strong>个钻石，最多能卖多少绿宝石。</p><p>假设做<strong>x</strong>把铲子，<strong>y</strong>把剑，2<em>x+y&lt;=a,x+2</em>y&lt;=b,求x+y最大</p><h2 id="分情况求解"><a href="#分情况求解" class="headerlink" title="分情况求解"></a>分情况求解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 200009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k,ans;</span><br><span class="line"><span class="keyword">int</span> p[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>*n&lt;=m) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n); <span class="comment">// 钻石过多</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">2</span>*m&lt;=n) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,m); <span class="comment">// 棒子过多</span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(n+m)/<span class="number">3</span>); <span class="comment">// (x+y)*3&lt;=a+b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三分"><a href="#三分" class="headerlink" title="三分"></a>三分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k,ans;</span><br><span class="line"><span class="keyword">int</span> p[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="comment">// 计算能卖多少绿宝石</span></span><br><span class="line"><span class="keyword">int</span> lv_n = n - <span class="number">2</span>*x;</span><br><span class="line"><span class="keyword">int</span> lv_m = m - x;</span><br><span class="line">x += <span class="built_in">min</span>(lv_n,lv_m/<span class="number">2</span>);</span><br><span class="line">ans = <span class="built_in">max</span>(x,ans); <span class="comment">// 更新ans</span></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span>(k--) &#123;</span><br><span class="line"><span class="keyword">int</span> l,r,m1,m2;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">l = <span class="number">0</span> ,r = <span class="built_in">min</span>(n/<span class="number">2</span>,m);</span><br><span class="line">ans = <span class="built_in">max</span>(<span class="built_in">check</span>(l),<span class="built_in">check</span>(r)); <span class="comment">// 求两端</span></span><br><span class="line"><span class="keyword">while</span>(l+<span class="number">1</span>&lt;r) &#123;</span><br><span class="line">m1 = (l+r)/<span class="number">2</span>;</span><br><span class="line">m2 = (m1+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(m1)&gt;<span class="built_in">check</span>(m2)) &#123;</span><br><span class="line">r = m2;</span><br><span class="line">&#125; <span class="keyword">else</span> l = m1;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Shuffle"><a href="#B-Shuffle" class="headerlink" title="B. Shuffle"></a>B. Shuffle</h1><p>You are given an array consisting of n integers a1, a2, …, an. Initially ax=1, all other elements are equal to 0.</p><p>You have to perform m operations. During the i-th operation, you choose two indices c and d such that li≤c,d≤ri, and swap ac and ad.</p><p>Calculate the number of indices k such that it is possible to choose the operations so that ak=1 in the end.</p><p><em>Input</em><br>The first line contains a single integer t (1≤t≤100) — the number of test cases. Then the description of t testcases follow.</p><p>The first line of each test case contains three integers n, x and m (1≤n≤109; 1≤m≤100; 1≤x≤n).</p><p>Each of next m lines contains the descriptions of the operations; the i-th line contains two integers li and ri (1≤li≤ri≤n).</p><p><em>Output</em><br>For each test case print one integer — the number of indices k such that it is possible to choose the operations so that ak=1 in the end.</p><p><strong>Example</strong></p><p><strong>input</strong></p><blockquote><p>3<br>6 4 3<br>1 6<br>2 3<br>5 5<br>4 1 2<br>2 4<br>1 2<br>3 3 2<br>2 3<br>1 2</p></blockquote><p><strong>outputCopy</strong></p><blockquote><p>6<br>2<br>3</p></blockquote><p><strong>Note</strong><br>In the first test case, it is possible to achieve ak=1 for every k. To do so, you may use the following operations:</p><p>swap ak and a4;<br>swap a2 and a2;<br>swap a5 and a5.</p><p>In the second test case, only k=1 and k=2 are possible answers. To achieve a1=1, you have to swap a1 and a1 during the second operation. To achieve a2=1, you have to swap a1 and a2 during the second operation.</p><p>题意：给出了一个由n个整数a1，a2，…，an组成的数组。最初ax=1，所有其他元素都等于0.</p><p>你必须执行m操作。在第i个操作中，选择两个索引c和d，使li≤c，d≤ri，并交换ac和ad.</p><p>计算索引k的数量，以便可以选择操作，以便ak最终为1。</p><p>例如：<br>在第一个测试用例中，每k可以实现ak=1。为此，可以使用以下操作：</p><p>交换ak和a4；<br>交换a2和a2；<br>交换a5和a5。</p><p>在第二个测试用例中，只有k=1和k=2是可能的答案。<br>要达到a1=1，您必须在第二次操作期间交换a1和a1。要实现a2=1，必须在第二次操作期间交换a1和a2。</p><p>解：向左向右拓展能够得到的区间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 100009</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> p[MS];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; op;</span><br><span class="line">l = r = m; <span class="comment">// 无任何操作的情况下，只有 ak 能为 1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;op;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span>(a&lt;=l&amp;&amp;r&lt;=b)&#123; <span class="comment">// 向左向右扩展</span></span><br><span class="line">l = a;</span><br><span class="line">r = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&lt;=b&amp;&amp;b&lt;=r&amp;&amp;a&lt;l)&#123; <span class="comment">//向左扩展</span></span><br><span class="line">l = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&lt;=a&amp;&amp;a&lt;=r&amp;&amp;b&gt;r)&#123; <span class="comment">//向右扩展</span></span><br><span class="line">r = b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,r-l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Palindromic-Paths"><a href="#C-Palindromic-Paths" class="headerlink" title="C. Palindromic Paths"></a>C. Palindromic Paths</h1><p>You are given a matrix with n rows (numbered from 1 to n) and m columns (numbered from 1 to m). A number ai,j is written in the cell belonging to the i-th row and the j-th column, each number is either 0 or 1.</p><p>A chip is initially in the cell (1,1), and it will be moved to the cell (n,m). During each move, it either moves to the next cell in the current row, or in the current column (if the current cell is (x,y), then after the move it can be either (x+1,y) or (x,y+1)). The chip cannot leave the matrix.</p><p>Consider each path of the chip from (1,1) to (n,m). A path is called palindromic if the number in the first cell is equal to the number in the last cell, the number in the second cell is equal to the number in the second-to-last cell, and so on.</p><p>Your goal is to change the values in the minimum number of cells so that every path is palindromic.</p><p><em>Input</em><br>The first line contains one integer t (1≤t≤200) — the number of test cases.</p><p>The first line of each test case contains two integers n and m (2≤n,m≤30) — the dimensions of the matrix.</p><p>Then n lines follow, the i-th line contains m integers ai,1, ai,2, …, ai,m (0≤ai,j≤1).</p><p><em>Output</em><br>For each test case, print one integer — the minimum number of cells you have to change so that every path in the matrix is palindromic.</p><p><strong>Example</strong></p><p><strong>input</strong></p><blockquote><p>4<br>2 2<br>1 1<br>0 1<br>2 3<br>1 1 0<br>1 0 0<br>3 7<br>1 0 1 1 1 1 1<br>0 0 0 0 0 0 0<br>1 1 1 1 1 0 1<br>3 5<br>1 0 1 0 0<br>1 1 1 1 0<br>0 0 1 0 0</p></blockquote><p><strong>outputCopy</strong></p><blockquote><p>0<br>3<br>4<br>4</p></blockquote><p><strong>Note</strong><br>The resulting matrices in the first three test cases:<br><img src="https://img2020.cnblogs.com/blog/2062718/202006/2062718-20200613124526431-20190014.png"></p><p>题意：从（1,1）到（n，m）的每条路径要变成回文，最少修改 n,m 矩阵中的几个数字。</p><p>解：从开头走 x 步和从结尾走 x 步对应的值要相等</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 109</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> p[MS][MS];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span>(k--)&#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin &gt;&gt; p[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> h = (n+m)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=h;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> t0,t1; <span class="comment">// 计 0 ,1 数量</span></span><br><span class="line">t0 = t1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(j&lt;=m?<span class="number">1</span>:(j-m+<span class="number">1</span>));i&lt;=(j&lt;=n?j:n);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i][j-i+<span class="number">1</span>]==<span class="number">1</span>) t1++; <span class="comment">// 左上角</span></span><br><span class="line"><span class="keyword">else</span> t0++;</span><br><span class="line"><span class="keyword">if</span>(p[n-i+<span class="number">1</span>][m-j+i]==<span class="number">1</span>) t1++; <span class="comment">// 右下角</span></span><br><span class="line"><span class="keyword">else</span> t0++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((n+m)%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;j==h) <span class="keyword">break</span>;</span><br><span class="line">cnt += <span class="built_in">min</span>(t0,t1); <span class="comment">// 取 0 ,1 中数量小的一个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Two-Divisors"><a href="#D-Two-Divisors" class="headerlink" title="D. Two Divisors"></a>D. Two Divisors</h1><p>You are given n integers a1,a2,…,an.</p><p>For each ai find its two divisors d1&gt;1 and d2&gt;1 such that gcd(d1+d2,ai)=1 (where gcd(a,b) is the greatest common divisor of a and b) or say that there is no such pair.</p><p><em>Input</em><br>The first line contains single integer n (1≤n≤5⋅105) — the size of the array a.</p><p>The second line contains n integers a1,a2,…,an (2≤ai≤107) — the array a.</p><p><em>Output</em><br>To speed up the output, print two lines with n integers in each line.</p><p>The i-th integers in the first and second lines should be corresponding divisors d1&gt;1 and d2&gt;1 such that gcd(d1+d2,ai)=1 or −1 and −1 if there is no such pair. If there are multiple answers, print any of them.</p><p><strong>Example</strong></p><p><strong>input</strong></p><blockquote><p>10<br>2 3 4 5 6 7 8 9 10 24</p></blockquote><p><strong>output</strong></p><blockquote><p>-1 -1 -1 -1 3 -1 -1 -1 2 2<br>-1 -1 -1 -1 2 -1 -1 -1 5 3 </p></blockquote><p><strong>Note</strong><br>Let’s look at a7=8. It has 3 divisors greater than 1: 2, 4, 8. As you can see, the sum of any pair of divisors is divisible by 2 as well as a7.</p><p>There are other valid pairs of d1 and d2 for a10=24, like (3,4) or (8,3). You can print any of them.</p><p>题意：给你n个整数a1，a2，…，an。             </p><p>对于每个ai，找到其两个除数d1&gt;1和d2&gt;1，使得gcd（d1+d2，ai）=1（其中gcd（a，b）是a和b的最大公约数），或者说不存在这样的对。</p><p>解:找 ai 的两个最小的两个不同质因数，找不到则 -1，-1 . 用到欧拉筛法 1s 以内，普通筛法 1s 多一点 .</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483646</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 51</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,f = <span class="number">1</span>,num;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ms=<span class="number">1e6</span>+<span class="number">1</span>,maxn=<span class="number">1e7</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> a[ms],ans[ms][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> prime[maxn];      <span class="comment">// 就是个素数表, prime[] = &#123;0,2,3,5,7...&#125;;</span></span><br><span class="line"><span class="keyword">bool</span> sf[maxn]; <span class="comment">// 判断这个数是不是素数, sf[2] = true;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sushu</span><span class="params">()</span> </span>&#123; <span class="comment">// 欧拉筛</span></span><br><span class="line"><span class="comment">// num 用来记筛到第几个质数</span></span><br><span class="line"><span class="built_in">memset</span>(sf,<span class="literal">true</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(sf));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=maxn; i++) &#123;    </span><br><span class="line"><span class="keyword">if</span>(sf[i]) prime[++num]=i;     </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=num; j++) &#123;    </span><br><span class="line"><span class="keyword">if</span>(i*prime[j]&gt;maxn) <span class="keyword">break</span>; </span><br><span class="line">sf[i*prime[j]]=<span class="literal">false</span>; </span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sf[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">sf[<span class="number">0</span>]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">sushu</span>();</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">if</span>(sf[a[i]]==<span class="literal">true</span>) <span class="comment">// 如果是素数则 -1，-1</span></span><br><span class="line">ans[i][<span class="number">0</span>]=<span class="number">-1</span>,ans[i][<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>,x=a[i],pos = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=num; j++) &#123; <span class="comment">// 任何一个数都能展开成有限个质因数的乘积</span></span><br><span class="line"><span class="keyword">if</span>(x%prime[j]==<span class="number">0</span>) &#123;</span><br><span class="line">pos = prime[j]; <span class="comment">// 记录最小质因数</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(x%pos==<span class="number">0</span>) x/=pos; <span class="comment">// 寻找另一个质因数</span></span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">1</span>)&#123; <span class="comment">// 只有一个质因数 ex: 9 = 3^2</span></span><br><span class="line">ans[i][<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">ans[i][<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">ans[i][<span class="number">1</span>]=x;</span><br><span class="line">ans[i][<span class="number">0</span>]=pos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Two-Arrays"><a href="#E-Two-Arrays" class="headerlink" title="E. Two Arrays"></a>E. Two Arrays</h1><p>You are given two arrays a1,a2,…,an and b1,b2,…,bm. Array b is sorted in ascending order (bi&lt;bi+1 for each i from 1 to m−1).</p><p>You have to divide the array a into m consecutive subarrays so that, for each i from 1 to m, the minimum on the i-th subarray is equal to bi. Note that each element belongs to exactly one subarray, and they are formed in such a way: the first several elements of a compose the first subarray, the next several elements of a compose the second subarray, and so on.</p><p>For example, if a=[12,10,20,20,25,30] and b=[10,20,30] then there are two good partitions of array a:</p><p>[12,10,20],[20,25],[30];<br>[12,10],[20,20,25],[30].<br>You have to calculate the number of ways to divide the array a. Since the number can be pretty large print it modulo 998244353.</p><p><em>Input</em><br>The first line contains two integers n and m (1≤n,m≤2⋅105) — the length of arrays a and b respectively.</p><p>The second line contains n integers a1,a2,…,an (1≤ai≤109) — the array a.</p><p>The third line contains m integers b1,b2,…,bm (1≤bi≤109;bi&lt;bi+1) — the array b.</p><p><em>Output</em><br>In only line print one integer — the number of ways to divide the array a modulo 998244353.</p><p><strong>Examples</strong></p><p><strong>input</strong></p><blockquote><p>6 3<br>12 10 20 20 25 30<br>10 20 30</p></blockquote><p><strong>output</strong></p><blockquote><p>2</p></blockquote><p><strong>input</strong></p><blockquote><p>4 2<br>1 3 3 7<br>3 7</p></blockquote><p><strong>output</strong></p><blockquote><p>0</p></blockquote><p>input**</p><blockquote><p>8 2<br>1 2 2 2 2 2 2 2<br>1 2</p></blockquote><p><strong>output</strong></p><blockquote><p>7</p></blockquote><p>题意：给定长 n 的数组 a[] ,长 m 的数组 b[] ,将数组 a[] 划分为 m 个子区间 ,第 i 子区间的最小值与 bi 相等 ,求有多少种划分方法.</p><p>解：a[] 从后往前遍历 ,找到 bm 后标记 pos1 ,再往前遍历找到第一个小于 bm 的值标记 pos2 ,pos2 - pos1 就表示第 m 个子区间可以有几种划分方式 </p><p>因为 b[] 是升序的 ,所以 a(pos1,pos2] 区间内的值 &gt; b[m-1] .  以此类推 bm-1,bm-2 … 各有多少种划分 ,最后相乘即是答案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1.0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 2147483647</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 200009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// Notice the data size</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line">LL a[MS],b[MS];</span><br><span class="line">LL pos[MS][<span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(pos,<span class="number">-1</span>,<span class="keyword">sizeof</span> pos);</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fl; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">fl = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=(i==m<span class="number">-1</span>?n<span class="number">-1</span>:pos[i+<span class="number">1</span>][<span class="number">1</span>]);j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]==b[i]&amp;&amp;fl == <span class="number">0</span>) &#123;</span><br><span class="line">pos[i][<span class="number">0</span>] = j; <span class="comment">// pos[i][0] 记录第一次出现 b[i] 的位置</span></span><br><span class="line"> fl = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(a[j]&gt;=b[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pos[i][<span class="number">0</span>] == <span class="number">-1</span>)&#123; <span class="comment">// 若没有出现 b[i] </span></span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pos[i][<span class="number">1</span>] = j; <span class="comment">// 标记第一个小于 b[i] 的值</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag||pos[<span class="number">0</span>][<span class="number">1</span>]!=<span class="number">-1</span>||fl == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">ans = ans*(pos[i][<span class="number">0</span>]-pos[i][<span class="number">1</span>])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】求一个数的因子之和</title>
      <link href="/2020/06/13/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E6%B1%82%E4%B8%80%E4%B8%AA%E6%95%B0%E7%9A%84%E5%9B%A0%E5%AD%90%E4%B9%8B%E5%92%8C/"/>
      <url>/2020/06/13/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E6%B1%82%E4%B8%80%E4%B8%AA%E6%95%B0%E7%9A%84%E5%9B%A0%E5%AD%90%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="直接求解"><a href="#直接求解" class="headerlink" title="直接求解"></a>直接求解</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">factor</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">LL cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">sqrt</span>(x);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(x/i == i) cnt += i; <span class="comment">// ex: 9 = 3 * 3</span></span><br><span class="line"><span class="keyword">else</span> cnt += i + x/i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="筛法"><a href="#筛法" class="headerlink" title="筛法"></a>筛法</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LL sum[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">factor_sieve</span><span class="params">()</span></span>&#123; <span class="comment">// sum[i] 记录 数 i 的各个因子之和 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=MS;i++) sum[i] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=MS;i++)&#123;</span><br><span class="line">sum[i]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=MS;j+=i)&#123;</span><br><span class="line">sum[j] += i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决数独</title>
      <link href="/2020/06/11/ACM/%E8%A7%A3%E5%86%B3%E6%95%B0%E7%8B%AC/"/>
      <url>/2020/06/11/ACM/%E8%A7%A3%E5%86%B3%E6%95%B0%E7%8B%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是数独"><a href="#什么是数独" class="headerlink" title="什么是数独"></a>什么是数独</h1><p>数独（shù dú）是源自18世纪瑞士的一种数学游戏。是一种运用纸、笔进行演算的逻辑游戏。玩家需要根据9×9盘面上的已知数字，推理出所有剩余空格的数字，并满足每一行、每一列、每一个粗线宫（3*3）内的数字均含1-9，不重复 [1]  。<br>数独盘面是个九宫，每一宫又分为九个小格。在这八十一格中给出一定的已知数字和解题条件，利用逻辑和推理，在其他的空格上填入1-9的数字。使1-9每个数字在每一行、每一列和每一宫中都只出现一次，所以又称“九宫格”。<br>————百度百科</p><h1 id="怎么解数独"><a href="#怎么解数独" class="headerlink" title="怎么解数独"></a>怎么解数独</h1><h2 id="带脑子算-手算法"><a href="#带脑子算-手算法" class="headerlink" title="带脑子算(手算法)"></a>带脑子算(手算法)</h2><p>在我没上大学之前，那就是手算了，一个个数字试着填，填满了即为完成了<br>显然效率低而且还头疼(0.0)</p><h2 id="不带脑子算-复读机式算法"><a href="#不带脑子算-复读机式算法" class="headerlink" title="不带脑子算(复读机式算法)"></a>不带脑子算(复读机式算法)</h2><p>试着想了一下数独如何用计算机来解，于是结合一下所学<br>下面这段c++代码编译运行下，把数独盘面输入下就出结果了<br>我的贡献0%(复读题目+1%)，计算机贡献99%，(•ิ_•ิ)  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS 11</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> flag; </span><br><span class="line"><span class="keyword">char</span> smp[MS][MS];</span><br><span class="line"><span class="keyword">int</span> mp[MS][MS],ans[MS][MS];</span><br><span class="line"><span class="keyword">int</span> vp_row[MS][MS];</span><br><span class="line"><span class="keyword">int</span> vp_col[MS][MS];</span><br><span class="line"><span class="keyword">int</span> vp_cel[<span class="number">4</span>][<span class="number">4</span>][MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;1&#x27;</span>&lt;=c&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> jdg_row = vp_row[x][num];</span><br><span class="line"><span class="keyword">int</span> jdg_col = vp_col[y][num];</span><br><span class="line"><span class="keyword">int</span> jdg_cel = vp_cel[x/<span class="number">3</span>][y/<span class="number">3</span>][num];</span><br><span class="line"><span class="keyword">if</span>(jdg_row||jdg_col||jdg_cel) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_or_del_lab</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> num,<span class="keyword">int</span> jdg)</span></span>&#123;</span><br><span class="line">vp_row[x][num] = jdg;</span><br><span class="line">vp_col[y][num] = jdg;</span><br><span class="line">vp_cel[x/<span class="number">3</span>][y/<span class="number">3</span>][num] = jdg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_smp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++) <span class="built_in">gets</span>(smp[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">into_mp</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">mp[i][j] = <span class="built_in">change</span>(smp[i][j]);</span><br><span class="line"><span class="built_in">add_or_del_lab</span>(i,j,mp[i][j],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> step)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(step==<span class="number">9</span>*<span class="number">9</span>)&#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,ans[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(mp[step/<span class="number">9</span>][step%<span class="number">9</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">ans[step/<span class="number">9</span>][step%<span class="number">9</span>] = mp[step/<span class="number">9</span>][step%<span class="number">9</span>];</span><br><span class="line"><span class="built_in">solve</span>(step+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> now_x = step/<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> now_y = step%<span class="number">9</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(now_x,now_y,i)&amp;&amp;mp[now_x][now_y]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">add_or_del_lab</span>(now_x,now_y,i,<span class="number">1</span>);</span><br><span class="line">ans[now_x][now_y] = i;</span><br><span class="line"><span class="built_in">solve</span>(step+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add_or_del_lab</span>(now_x,now_y,i,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入你想解决的数独：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;===================\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;注:(9*9)空缺数字用空格代替\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;===================\n&quot;</span>);</span><br><span class="line"><span class="built_in">input_smp</span>();</span><br><span class="line"><span class="built_in">into_mp</span>();</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;未找到解，请检查输入是否正确合法\n&quot;</span>); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">input:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 2 5 9 8</span></span><br><span class="line"><span class="comment">    7  5</span></span><br><span class="line"><span class="comment">19    7</span></span><br><span class="line"><span class="comment">  6  7</span></span><br><span class="line"><span class="comment"> 3  8 4</span></span><br><span class="line"><span class="comment">7  95 862</span></span><br><span class="line"><span class="comment">  8  594</span></span><br><span class="line"><span class="comment">  234   6</span></span><br><span class="line"><span class="comment"> 74  15  </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4 2 7 5 3 9 6 8 1</span></span><br><span class="line"><span class="comment">8 6 3 1 7 4 2 5 9</span></span><br><span class="line"><span class="comment">1 9 5 8 6 2 7 3 4</span></span><br><span class="line"><span class="comment">2 8 6 4 1 7 3 9 5</span></span><br><span class="line"><span class="comment">5 3 9 2 8 6 4 1 7</span></span><br><span class="line"><span class="comment">7 4 1 9 5 3 8 6 2</span></span><br><span class="line"><span class="comment">6 1 8 7 2 5 9 4 3</span></span><br><span class="line"><span class="comment">9 5 2 3 4 8 1 7 6</span></span><br><span class="line"><span class="comment">3 7 4 6 9 1 5 2 8</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后发现网络上早已有了数独求解器(..•˘_˘•..)</p><h1 id="复读式解数独有啥用"><a href="#复读式解数独有啥用" class="headerlink" title="复读式解数独有啥用"></a>复读式解数独有啥用</h1><p>有利于老年痴呆~</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】判素数与素数筛法</title>
      <link href="/2020/06/11/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E5%88%A4%E7%B4%A0%E6%95%B0%E4%B8%8E%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/"/>
      <url>/2020/06/11/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E5%88%A4%E7%B4%A0%E6%95%B0%E4%B8%8E%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="判断素数"><a href="#判断素数" class="headerlink" title="判断素数"></a>判断素数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="普通筛"><a href="#普通筛" class="headerlink" title="普通筛"></a>普通筛</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p[MS];</span><br><span class="line"><span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span> p);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=MS;i++) p[i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(MS);i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(p[i])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=MS;j+=i)</span><br><span class="line">p[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 标记为 1 的即为素数 </span></span><br></pre></td></tr></table></figure><h1 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> prime[MS];      <span class="comment">//就是个素数表, prime[] = &#123;0,2,3,5,7...&#125;;</span></span><br><span class="line"><span class="keyword">bool</span> sf[MS]; <span class="comment">//判断这个数是不是素数，sf[i]中的i是从1到maxn的数</span></span><br><span class="line"><span class="function">Void <span class="title">Euler_sieve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//num 用来记筛到第几个质数</span></span><br><span class="line"><span class="built_in">memset</span>(sf,<span class="literal">true</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(sf));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=MS; i++) &#123;       <span class="comment">//外层枚举1~maxn</span></span><br><span class="line"><span class="keyword">if</span>(sf[i]) prime[++num]=i;      <span class="comment">//如果是质数就加入素数表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=num; j++) &#123;    <span class="comment">//内层枚举num以内的质数</span></span><br><span class="line"><span class="keyword">if</span>(i*prime[j]&gt;MS) <span class="keyword">break</span>; <span class="comment">//筛完结束</span></span><br><span class="line">sf[i*prime[j]]=<span class="literal">false</span>;      <span class="comment">//筛掉...</span></span><br><span class="line"><span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>) <span class="keyword">break</span>;   <span class="comment">//避免重复筛</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sf[<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line">sf[<span class="number">0</span>]=<span class="literal">false</span>;  <span class="comment">//1 0 特判</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】排列组合A(n,m)与C(n,m)</title>
      <link href="/2020/06/11/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88A(n,m)%E4%B8%8EC(n,m)/"/>
      <url>/2020/06/11/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88A(n,m)%E4%B8%8EC(n,m)/</url>
      
        <content type="html"><![CDATA[<h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><p><img src="https://img2020.cnblogs.com/blog/2062718/202006/2062718-20200611155630192-928792502.png"><br><img src="https://img2020.cnblogs.com/blog/2062718/202006/2062718-20200611155729279-1837564877.png"></p><p>代码模拟公式计算<br>例：C(7,3)则循环三次每次分别为<br>5 / 1 ,<br>5 * 6 / 1 * 2 ,<br>5 * 6 * 7 / 1 * 2 * 3  </p><h1 id="C-n-m"><a href="#C-n-m" class="headerlink" title="C(n,m)"></a>C(n,m)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(LL n,LL m)</span> <span class="comment">// n为下标 m为上标</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL k,sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=m;k++)&#123;</span><br><span class="line">        sum = (sum*(n-m+k))/k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="A-n-m"><a href="#A-n-m" class="headerlink" title="A(n,m)"></a>A(n,m)</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="function">LL <span class="title">A</span><span class="params">(LL n,LL m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL k,sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=m;k++)&#123;</span><br><span class="line">        sum = (sum*(n-m+k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【时间优化】快读</title>
      <link href="/2020/06/11/ACM/%E3%80%90%E6%97%B6%E9%97%B4%E4%BC%98%E5%8C%96%E3%80%91%E5%BF%AB%E8%AF%BB/"/>
      <url>/2020/06/11/ACM/%E3%80%90%E6%97%B6%E9%97%B4%E4%BC%98%E5%8C%96%E3%80%91%E5%BF%AB%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">LL x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span> (ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))&#123;x=x*<span class="number">10</span>+ch<span class="number">-48</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】快速乘</title>
      <link href="/2020/06/11/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E5%BF%AB%E9%80%9F%E4%B9%98/"/>
      <url>/2020/06/11/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E5%BF%AB%E9%80%9F%E4%B9%98/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="function">LL <span class="title">qmul</span><span class="params">(LL a,LL b,LL mod)</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans = (ans+a)%mod;</span><br><span class="line">a = a*<span class="number">2</span>%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】快速幂</title>
      <link href="/2020/06/11/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
      <url>/2020/06/11/ACM/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL n,LL m)</span></span>&#123;</span><br><span class="line">LL ans = <span class="number">1</span>%mod;</span><br><span class="line"><span class="keyword">while</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(m&amp;<span class="number">1</span>) ans = ans*n%mod;</span><br><span class="line">n = n*n%mod;</span><br><span class="line">    m &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL n,LL m)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>%mod;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m&amp;<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">qpow</span>(n,m<span class="number">-1</span>)*n%mod;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        LL tmp = <span class="built_in">qpow</span>(n,m/<span class="number">2</span>)%mod;</span><br><span class="line">        <span class="keyword">return</span> tmp * tmp % mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
